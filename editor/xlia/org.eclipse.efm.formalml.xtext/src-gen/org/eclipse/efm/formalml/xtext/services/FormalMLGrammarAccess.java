/*****************************************************************************
* Copyright (c) 2016 CEA LIST.
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*  Arnault Lapitre (CEA LIST) arnault.lapitre@cea.fr
*  - Initial API and implementation
*****************************************************************************/
package org.eclipse.efm.formalml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FormalMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XliaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Xlia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrologAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrologXliaPrologObjectParserRuleCall_0_0 = (RuleCall)cPrologAssignment_0.eContents().get(0);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemSystemParserRuleCall_1_0 = (RuleCall)cSystemAssignment_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Main Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Xlia XliaModel:
		//	prolog=XliaPrologObject
		//	system=System
		@Override public ParserRule getRule() { return rule; }
		
		//prolog=XliaPrologObject system=System
		public Group getGroup() { return cGroup; }
		
		//prolog=XliaPrologObject
		public Assignment getPrologAssignment_0() { return cPrologAssignment_0; }
		
		//XliaPrologObject
		public RuleCall getPrologXliaPrologObjectParserRuleCall_0_0() { return cPrologXliaPrologObjectParserRuleCall_0_0; }
		
		//system=System
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }
		
		//System
		public RuleCall getSystemSystemParserRuleCall_1_0() { return cSystemSystemParserRuleCall_1_0; }
	}
	public class XliaPrologObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaPrologObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameFormalMLKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameXliaKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameXfspKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsXliaPrologAttributeParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsXliaOptionObjectParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//XliaPrologObject XliaObject:
		//	name=('@FormalML' | '@xlia' | '@xfsp') '<'
		//	elements+=XliaPrologAttribute '>:'
		//	elements+=XliaOptionObject?
		@Override public ParserRule getRule() { return rule; }
		
		//name=('@FormalML' | '@xlia' | '@xfsp') '<' elements+=XliaPrologAttribute '>:' elements+=XliaOptionObject?
		public Group getGroup() { return cGroup; }
		
		//name=('@FormalML' | '@xlia' | '@xfsp')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('@FormalML' | '@xlia' | '@xfsp')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'@FormalML'
		public Keyword getNameFormalMLKeyword_0_0_0() { return cNameFormalMLKeyword_0_0_0; }
		
		//'@xlia'
		public Keyword getNameXliaKeyword_0_0_1() { return cNameXliaKeyword_0_0_1; }
		
		//'@xfsp'
		public Keyword getNameXfspKeyword_0_0_2() { return cNameXfspKeyword_0_0_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//elements+=XliaPrologAttribute
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//XliaPrologAttribute
		public RuleCall getElementsXliaPrologAttributeParserRuleCall_2_0() { return cElementsXliaPrologAttributeParserRuleCall_2_0; }
		
		////		( ',' elements+=XliaPrologAttribute )+
		//'>:'
		public Keyword getGreaterThanSignColonKeyword_3() { return cGreaterThanSignColonKeyword_3; }
		
		//elements+=XliaOptionObject?
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//XliaOptionObject
		public RuleCall getElementsXliaOptionObjectParserRuleCall_4_0() { return cElementsXliaOptionObjectParserRuleCall_4_0; }
	}
	public class XliaPrologAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaPrologAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameSystemKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNamePackageKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValueAlternatives_1_1_0 = (Alternatives)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValueLiteralFloatExpressionParserRuleCall_1_1_0_0 = (RuleCall)cValueAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cValueLiteralStringExpressionParserRuleCall_1_1_0_1 = (RuleCall)cValueAlternatives_1_1_0.eContents().get(1);
		
		//XliaPrologAttribute XliaAttribute:
		//	name=('system' | 'package') (',' value=(LiteralFloatExpression | LiteralStringExpression))?
		@Override public ParserRule getRule() { return rule; }
		
		//name=('system' | 'package') (',' value=(LiteralFloatExpression | LiteralStringExpression))?
		public Group getGroup() { return cGroup; }
		
		//name=('system' | 'package')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('system' | 'package')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'system'
		public Keyword getNameSystemKeyword_0_0_0() { return cNameSystemKeyword_0_0_0; }
		
		//'package'
		public Keyword getNamePackageKeyword_0_0_1() { return cNamePackageKeyword_0_0_1; }
		
		//(',' value=(LiteralFloatExpression | LiteralStringExpression))?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//value=(LiteralFloatExpression | LiteralStringExpression)
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//(LiteralFloatExpression | LiteralStringExpression)
		public Alternatives getValueAlternatives_1_1_0() { return cValueAlternatives_1_1_0; }
		
		//LiteralFloatExpression
		public RuleCall getValueLiteralFloatExpressionParserRuleCall_1_1_0_0() { return cValueLiteralFloatExpressionParserRuleCall_1_1_0_0; }
		
		//LiteralStringExpression
		public RuleCall getValueLiteralStringExpressionParserRuleCall_1_1_0_1() { return cValueLiteralStringExpressionParserRuleCall_1_1_0_1; }
	}
	public class XliaOptionObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaOptionObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOptionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsXliaNamedElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////XliaPrologAttribute returns XliaAttribute
		////	: (name = 'model')?    value=XliaModelKind
		////	| (name = 'version')?
		////		value=( LiteralFloatExpression | LiteralStringExpression )
		////	;
		////
		////XliaModelKind returns fmlExpr::LiteralStringExpression
		////	: value=( 'system' | 'package' )
		////	;
		//XliaOptionObject XliaObject:
		//	name='@option' '{'
		//	elements+=XliaNamedElement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//name='@option' '{' elements+=XliaNamedElement* '}'
		public Group getGroup() { return cGroup; }
		
		//name='@option'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'@option'
		public Keyword getNameOptionKeyword_0_0() { return cNameOptionKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=XliaNamedElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//XliaNamedElement
		public RuleCall getElementsXliaNamedElementParserRuleCall_2_0() { return cElementsXliaNamedElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class XliaNamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaNamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXliaObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXliaAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XliaNamedElement:
		//	XliaObject
		//	| XliaAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//XliaObject | XliaAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XliaObject
		public RuleCall getXliaObjectParserRuleCall_0() { return cXliaObjectParserRuleCall_0; }
		
		//XliaAttribute
		public RuleCall getXliaAttributeParserRuleCall_1() { return cXliaAttributeParserRuleCall_1; }
	}
	public class XliaObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLIA_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsXliaNamedElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XliaObject:
		//	name=XLIA_ID '{'
		//	elements+=XliaNamedElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLIA_ID '{' elements+=XliaNamedElement* '}'
		public Group getGroup() { return cGroup; }
		
		//name=XLIA_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLIA_ID
		public RuleCall getNameXLIA_IDTerminalRuleCall_0_0() { return cNameXLIA_IDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=XliaNamedElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//XliaNamedElement
		public RuleCall getElementsXliaNamedElementParserRuleCall_2_0() { return cElementsXliaNamedElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class XliaAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XliaAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLIA_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XliaAttribute:
		//	name=XLIA_ID '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLIA_ID '=' value=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//name=XLIA_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLIA_ID
		public RuleCall getNameXLIA_IDTerminalRuleCall_0_0() { return cNameXLIA_IDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Primitive Value
		//////////////////////////////////////////////////////////////////////////////////
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInteger ecore::ELong:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class ECharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ECharacter");
		private final RuleCall cCHARACTERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ECharacter ecore::EChar:
		//	CHARACTER
		@Override public ParserRule getRule() { return rule; }
		
		//CHARACTER
		public RuleCall getCHARACTERTerminalRuleCall() { return cCHARACTERTerminalRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class ReservedWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ReservedWord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMachineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStatemachineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPseudostateKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVertexKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cProcedureKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMacroKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRoutineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cTransitionKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPublicKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPrivateKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cProtectedKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cStaticKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cFinalKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cReferenceKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cVolatileKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cTransientKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cModelKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cPrototypeKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cInstanceKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cTimedKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cInput_enabledKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cPortKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cSignalKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cBufferKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cChannelKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cVarKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cValKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cConstKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cInputKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cInKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cInoutKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cOutputKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cOutKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cReturnKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cSimpleKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cStartKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cFinalKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cInitialKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cTerminalKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cJunctionKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cChoiceKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cForkKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cJoinKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cDhistoryKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cShistoryKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cRouteKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cConnectKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cEnvKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cRdvKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cMulti_rdvKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cBufferKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cUnicastKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cAnycastKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cMulticastKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cBroadcastKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cBooleanKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cBoolKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cCharKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cStringKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cMessageKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cIntegerKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cIntKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cUintegerKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cUintKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cRationalKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cRatKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cUrationalKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cUratKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cTimeKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cClockKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cFloatKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cDoubleKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cRealKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cUfloatKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		private final Keyword cUdoubleKeyword_77 = (Keyword)cAlternatives.eContents().get(77);
		private final Keyword cUrealKeyword_78 = (Keyword)cAlternatives.eContents().get(78);
		private final Keyword cIntervalKeyword_79 = (Keyword)cAlternatives.eContents().get(79);
		private final Keyword cEnumKeyword_80 = (Keyword)cAlternatives.eContents().get(80);
		private final Keyword cStructKeyword_81 = (Keyword)cAlternatives.eContents().get(81);
		private final Keyword cUnionKeyword_82 = (Keyword)cAlternatives.eContents().get(82);
		private final Keyword cVectorKeyword_83 = (Keyword)cAlternatives.eContents().get(83);
		private final Keyword cRvectorKeyword_84 = (Keyword)cAlternatives.eContents().get(84);
		private final Keyword cListKeyword_85 = (Keyword)cAlternatives.eContents().get(85);
		private final Keyword cSetKeyword_86 = (Keyword)cAlternatives.eContents().get(86);
		private final Keyword cBagKeyword_87 = (Keyword)cAlternatives.eContents().get(87);
		private final Keyword cFifoKeyword_88 = (Keyword)cAlternatives.eContents().get(88);
		private final Keyword cLifoKeyword_89 = (Keyword)cAlternatives.eContents().get(89);
		private final Keyword cGuardKeyword_90 = (Keyword)cAlternatives.eContents().get(90);
		private final Keyword cTguardKeyword_91 = (Keyword)cAlternatives.eContents().get(91);
		private final Keyword cEventKeyword_92 = (Keyword)cAlternatives.eContents().get(92);
		private final Keyword cChecksatKeyword_93 = (Keyword)cAlternatives.eContents().get(93);
		private final Keyword cViaKeyword_94 = (Keyword)cAlternatives.eContents().get(94);
		private final Keyword cNewfreshKeyword_95 = (Keyword)cAlternatives.eContents().get(95);
		private final Keyword cBreakKeyword_96 = (Keyword)cAlternatives.eContents().get(96);
		private final Keyword cContinueKeyword_97 = (Keyword)cAlternatives.eContents().get(97);
		private final Keyword cExitKeyword_98 = (Keyword)cAlternatives.eContents().get(98);
		private final Keyword cInitKeyword_99 = (Keyword)cAlternatives.eContents().get(99);
		private final Keyword cDestroyKeyword_100 = (Keyword)cAlternatives.eContents().get(100);
		private final Keyword cStopKeyword_101 = (Keyword)cAlternatives.eContents().get(101);
		private final Keyword cAbortKeyword_102 = (Keyword)cAlternatives.eContents().get(102);
		private final Keyword cRestartKeyword_103 = (Keyword)cAlternatives.eContents().get(103);
		private final Keyword cSuspendKeyword_104 = (Keyword)cAlternatives.eContents().get(104);
		private final Keyword cResumeKeyword_105 = (Keyword)cAlternatives.eContents().get(105);
		private final Keyword cWaitKeyword_106 = (Keyword)cAlternatives.eContents().get(106);
		private final Keyword cDisableKeyword_107 = (Keyword)cAlternatives.eContents().get(107);
		private final Keyword cEnableKeyword_108 = (Keyword)cAlternatives.eContents().get(108);
		private final Keyword cScheduleKeyword_109 = (Keyword)cAlternatives.eContents().get(109);
		private final Keyword cIrunKeyword_110 = (Keyword)cAlternatives.eContents().get(110);
		private final Keyword cRunKeyword_111 = (Keyword)cAlternatives.eContents().get(111);
		private final Keyword cRtcKeyword_112 = (Keyword)cAlternatives.eContents().get(112);
		private final Keyword cCallKeyword_113 = (Keyword)cAlternatives.eContents().get(113);
		private final Keyword cNewKeyword_114 = (Keyword)cAlternatives.eContents().get(114);
		private final Keyword cCtorKeyword_115 = (Keyword)cAlternatives.eContents().get(115);
		private final Keyword cThisKeyword_116 = (Keyword)cAlternatives.eContents().get(116);
		private final Keyword cSelfKeyword_117 = (Keyword)cAlternatives.eContents().get(117);
		private final Keyword cParentKeyword_118 = (Keyword)cAlternatives.eContents().get(118);
		private final Keyword cSuperKeyword_119 = (Keyword)cAlternatives.eContents().get(119);
		private final Keyword cNullKeyword_120 = (Keyword)cAlternatives.eContents().get(120);
		
		////QualifiedName returns ecore::EString
		////	: ID ( '[' ID ']' )? '.' ID ( '[' ID ']' )? | ID
		////	;
		//ReservedWord:
		//	'package' | 'system' | 'machine'
		//	| 'statemachine' | 'state' | 'pseudostate' | 'vertex'
		//	| 'procedure' | 'macro' | 'routine' | 'transition'
		//	| 'public' | 'private' | 'protected'
		//	| 'static' | 'final' | 'reference' | 'volatile' | 'transient'
		//	| 'model' | 'prototype' | 'instance'
		//	| 'timed' | 'input_enabled'
		//	| 'port' | 'signal' | 'buffer' | 'channel'
		//	| 'var' | 'val' | 'const'
		//	| 'input' | 'in' | 'inout' | 'output' | 'out' | 'return'
		//	| 'simple' | 'start' | 'final' | 'initial' | 'terminal' | 'junction'
		//	| 'choice' | 'fork' | 'join' | 'dhistory' | 'shistory'
		//	| 'route' | 'connect' | 'env' | 'rdv' | 'multi_rdv' | 'buffer'
		//	| 'unicast' | 'anycast' | 'multicast' | 'broadcast'
		//	| 'boolean' | 'bool' | 'char' | 'string' | 'message'
		//	| 'integer' | 'int' | 'uinteger' | 'uint'
		//	| 'rational' | 'rat' | 'urational' | 'urat'
		//	| 'time' | 'clock'
		//	| 'float' | 'double' | 'real' | 'ufloat' | 'udouble' | 'ureal'
		//	| 'interval' | 'enum' | 'struct' | 'union'
		//	| 'vector' | 'rvector' | 'list' | 'set' | 'bag' | 'fifo' | 'lifo'
		//	| 'guard' | 'tguard' | 'event' | 'checksat' | 'via' | 'newfresh'
		//	| 'break' | 'continue' | 'exit' | 'init' | 'destroy' | 'stop' | 'abort'
		//	| 'restart' | 'suspend' | 'resume' | 'wait' | 'disable' | 'enable'
		//	| 'schedule' | 'irun' | 'run' | 'rtc' | 'call' | 'new' | 'ctor'
		//	| 'this' | 'self' | 'parent' | 'super' | 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' | 'system' | 'machine' | 'statemachine' | 'state' | 'pseudostate' | 'vertex' | 'procedure' | 'macro' |
		//'routine' | 'transition' | 'public' | 'private' | 'protected' | 'static' | 'final' | 'reference' | 'volatile' |
		//'transient' | 'model' | 'prototype' | 'instance' | 'timed' | 'input_enabled' | 'port' | 'signal' | 'buffer' | 'channel'
		//| 'var' | 'val' | 'const' | 'input' | 'in' | 'inout' | 'output' | 'out' | 'return' | 'simple' | 'start' | 'final' |
		//'initial' | 'terminal' | 'junction' | 'choice' | 'fork' | 'join' | 'dhistory' | 'shistory' | 'route' | 'connect' |
		//'env' | 'rdv' | 'multi_rdv' | 'buffer' | 'unicast' | 'anycast' | 'multicast' | 'broadcast' | 'boolean' | 'bool' |
		//'char' | 'string' | 'message' | 'integer' | 'int' | 'uinteger' | 'uint' | 'rational' | 'rat' | 'urational' | 'urat' |
		//'time' | 'clock' | 'float' | 'double' | 'real' | 'ufloat' | 'udouble' | 'ureal' | 'interval' | 'enum' | 'struct' |
		//'union' | 'vector' | 'rvector' | 'list' | 'set' | 'bag' | 'fifo' | 'lifo' | 'guard' | 'tguard' | 'event' | 'checksat' |
		//'via' | 'newfresh' | 'break' | 'continue' | 'exit' | 'init' | 'destroy' | 'stop' | 'abort' | 'restart' | 'suspend' |
		//'resume' | 'wait' | 'disable' | 'enable' | 'schedule' | 'irun' | 'run' | 'rtc' | 'call' | 'new' | 'ctor' | 'this' |
		//'self' | 'parent' | 'super' | 'null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//'system'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//'machine'
		public Keyword getMachineKeyword_2() { return cMachineKeyword_2; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_3() { return cStatemachineKeyword_3; }
		
		//'state'
		public Keyword getStateKeyword_4() { return cStateKeyword_4; }
		
		//'pseudostate'
		public Keyword getPseudostateKeyword_5() { return cPseudostateKeyword_5; }
		
		//'vertex'
		public Keyword getVertexKeyword_6() { return cVertexKeyword_6; }
		
		//'procedure'
		public Keyword getProcedureKeyword_7() { return cProcedureKeyword_7; }
		
		//'macro'
		public Keyword getMacroKeyword_8() { return cMacroKeyword_8; }
		
		//'routine'
		public Keyword getRoutineKeyword_9() { return cRoutineKeyword_9; }
		
		//'transition'
		public Keyword getTransitionKeyword_10() { return cTransitionKeyword_10; }
		
		//'public'
		public Keyword getPublicKeyword_11() { return cPublicKeyword_11; }
		
		//'private'
		public Keyword getPrivateKeyword_12() { return cPrivateKeyword_12; }
		
		//'protected'
		public Keyword getProtectedKeyword_13() { return cProtectedKeyword_13; }
		
		//'static'
		public Keyword getStaticKeyword_14() { return cStaticKeyword_14; }
		
		//'final'
		public Keyword getFinalKeyword_15() { return cFinalKeyword_15; }
		
		//'reference'
		public Keyword getReferenceKeyword_16() { return cReferenceKeyword_16; }
		
		//'volatile'
		public Keyword getVolatileKeyword_17() { return cVolatileKeyword_17; }
		
		//'transient'
		public Keyword getTransientKeyword_18() { return cTransientKeyword_18; }
		
		//'model'
		public Keyword getModelKeyword_19() { return cModelKeyword_19; }
		
		//'prototype'
		public Keyword getPrototypeKeyword_20() { return cPrototypeKeyword_20; }
		
		//'instance'
		public Keyword getInstanceKeyword_21() { return cInstanceKeyword_21; }
		
		//'timed'
		public Keyword getTimedKeyword_22() { return cTimedKeyword_22; }
		
		//'input_enabled'
		public Keyword getInput_enabledKeyword_23() { return cInput_enabledKeyword_23; }
		
		//'port'
		public Keyword getPortKeyword_24() { return cPortKeyword_24; }
		
		//'signal'
		public Keyword getSignalKeyword_25() { return cSignalKeyword_25; }
		
		//'buffer'
		public Keyword getBufferKeyword_26() { return cBufferKeyword_26; }
		
		//'channel'
		public Keyword getChannelKeyword_27() { return cChannelKeyword_27; }
		
		//'var'
		public Keyword getVarKeyword_28() { return cVarKeyword_28; }
		
		//'val'
		public Keyword getValKeyword_29() { return cValKeyword_29; }
		
		//'const'
		public Keyword getConstKeyword_30() { return cConstKeyword_30; }
		
		//'input'
		public Keyword getInputKeyword_31() { return cInputKeyword_31; }
		
		//'in'
		public Keyword getInKeyword_32() { return cInKeyword_32; }
		
		//'inout'
		public Keyword getInoutKeyword_33() { return cInoutKeyword_33; }
		
		//'output'
		public Keyword getOutputKeyword_34() { return cOutputKeyword_34; }
		
		//'out'
		public Keyword getOutKeyword_35() { return cOutKeyword_35; }
		
		//'return'
		public Keyword getReturnKeyword_36() { return cReturnKeyword_36; }
		
		//'simple'
		public Keyword getSimpleKeyword_37() { return cSimpleKeyword_37; }
		
		//'start'
		public Keyword getStartKeyword_38() { return cStartKeyword_38; }
		
		//'final'
		public Keyword getFinalKeyword_39() { return cFinalKeyword_39; }
		
		//'initial'
		public Keyword getInitialKeyword_40() { return cInitialKeyword_40; }
		
		//'terminal'
		public Keyword getTerminalKeyword_41() { return cTerminalKeyword_41; }
		
		//'junction'
		public Keyword getJunctionKeyword_42() { return cJunctionKeyword_42; }
		
		//'choice'
		public Keyword getChoiceKeyword_43() { return cChoiceKeyword_43; }
		
		//'fork'
		public Keyword getForkKeyword_44() { return cForkKeyword_44; }
		
		//'join'
		public Keyword getJoinKeyword_45() { return cJoinKeyword_45; }
		
		//'dhistory'
		public Keyword getDhistoryKeyword_46() { return cDhistoryKeyword_46; }
		
		//'shistory'
		public Keyword getShistoryKeyword_47() { return cShistoryKeyword_47; }
		
		//'route'
		public Keyword getRouteKeyword_48() { return cRouteKeyword_48; }
		
		//'connect'
		public Keyword getConnectKeyword_49() { return cConnectKeyword_49; }
		
		//'env'
		public Keyword getEnvKeyword_50() { return cEnvKeyword_50; }
		
		//'rdv'
		public Keyword getRdvKeyword_51() { return cRdvKeyword_51; }
		
		//'multi_rdv'
		public Keyword getMulti_rdvKeyword_52() { return cMulti_rdvKeyword_52; }
		
		//'buffer'
		public Keyword getBufferKeyword_53() { return cBufferKeyword_53; }
		
		//'unicast'
		public Keyword getUnicastKeyword_54() { return cUnicastKeyword_54; }
		
		//'anycast'
		public Keyword getAnycastKeyword_55() { return cAnycastKeyword_55; }
		
		//'multicast'
		public Keyword getMulticastKeyword_56() { return cMulticastKeyword_56; }
		
		//'broadcast'
		public Keyword getBroadcastKeyword_57() { return cBroadcastKeyword_57; }
		
		//'boolean'
		public Keyword getBooleanKeyword_58() { return cBooleanKeyword_58; }
		
		//'bool'
		public Keyword getBoolKeyword_59() { return cBoolKeyword_59; }
		
		//'char'
		public Keyword getCharKeyword_60() { return cCharKeyword_60; }
		
		//'string'
		public Keyword getStringKeyword_61() { return cStringKeyword_61; }
		
		//'message'
		public Keyword getMessageKeyword_62() { return cMessageKeyword_62; }
		
		//'integer'
		public Keyword getIntegerKeyword_63() { return cIntegerKeyword_63; }
		
		//'int'
		public Keyword getIntKeyword_64() { return cIntKeyword_64; }
		
		//'uinteger'
		public Keyword getUintegerKeyword_65() { return cUintegerKeyword_65; }
		
		//'uint'
		public Keyword getUintKeyword_66() { return cUintKeyword_66; }
		
		//'rational'
		public Keyword getRationalKeyword_67() { return cRationalKeyword_67; }
		
		//'rat'
		public Keyword getRatKeyword_68() { return cRatKeyword_68; }
		
		//'urational'
		public Keyword getUrationalKeyword_69() { return cUrationalKeyword_69; }
		
		//'urat'
		public Keyword getUratKeyword_70() { return cUratKeyword_70; }
		
		//'time'
		public Keyword getTimeKeyword_71() { return cTimeKeyword_71; }
		
		//'clock'
		public Keyword getClockKeyword_72() { return cClockKeyword_72; }
		
		//'float'
		public Keyword getFloatKeyword_73() { return cFloatKeyword_73; }
		
		//'double'
		public Keyword getDoubleKeyword_74() { return cDoubleKeyword_74; }
		
		//'real'
		public Keyword getRealKeyword_75() { return cRealKeyword_75; }
		
		//'ufloat'
		public Keyword getUfloatKeyword_76() { return cUfloatKeyword_76; }
		
		//'udouble'
		public Keyword getUdoubleKeyword_77() { return cUdoubleKeyword_77; }
		
		//'ureal'
		public Keyword getUrealKeyword_78() { return cUrealKeyword_78; }
		
		//'interval'
		public Keyword getIntervalKeyword_79() { return cIntervalKeyword_79; }
		
		//'enum'
		public Keyword getEnumKeyword_80() { return cEnumKeyword_80; }
		
		//'struct'
		public Keyword getStructKeyword_81() { return cStructKeyword_81; }
		
		//'union'
		public Keyword getUnionKeyword_82() { return cUnionKeyword_82; }
		
		//'vector'
		public Keyword getVectorKeyword_83() { return cVectorKeyword_83; }
		
		//'rvector'
		public Keyword getRvectorKeyword_84() { return cRvectorKeyword_84; }
		
		//'list'
		public Keyword getListKeyword_85() { return cListKeyword_85; }
		
		//'set'
		public Keyword getSetKeyword_86() { return cSetKeyword_86; }
		
		//'bag'
		public Keyword getBagKeyword_87() { return cBagKeyword_87; }
		
		//'fifo'
		public Keyword getFifoKeyword_88() { return cFifoKeyword_88; }
		
		//'lifo'
		public Keyword getLifoKeyword_89() { return cLifoKeyword_89; }
		
		//'guard'
		public Keyword getGuardKeyword_90() { return cGuardKeyword_90; }
		
		//'tguard'
		public Keyword getTguardKeyword_91() { return cTguardKeyword_91; }
		
		//'event'
		public Keyword getEventKeyword_92() { return cEventKeyword_92; }
		
		//'checksat'
		public Keyword getChecksatKeyword_93() { return cChecksatKeyword_93; }
		
		//'via'
		public Keyword getViaKeyword_94() { return cViaKeyword_94; }
		
		//'newfresh'
		public Keyword getNewfreshKeyword_95() { return cNewfreshKeyword_95; }
		
		//'break'
		public Keyword getBreakKeyword_96() { return cBreakKeyword_96; }
		
		//'continue'
		public Keyword getContinueKeyword_97() { return cContinueKeyword_97; }
		
		//'exit'
		public Keyword getExitKeyword_98() { return cExitKeyword_98; }
		
		//'init'
		public Keyword getInitKeyword_99() { return cInitKeyword_99; }
		
		//'destroy'
		public Keyword getDestroyKeyword_100() { return cDestroyKeyword_100; }
		
		//'stop'
		public Keyword getStopKeyword_101() { return cStopKeyword_101; }
		
		//'abort'
		public Keyword getAbortKeyword_102() { return cAbortKeyword_102; }
		
		//'restart'
		public Keyword getRestartKeyword_103() { return cRestartKeyword_103; }
		
		//'suspend'
		public Keyword getSuspendKeyword_104() { return cSuspendKeyword_104; }
		
		//'resume'
		public Keyword getResumeKeyword_105() { return cResumeKeyword_105; }
		
		//'wait'
		public Keyword getWaitKeyword_106() { return cWaitKeyword_106; }
		
		//'disable'
		public Keyword getDisableKeyword_107() { return cDisableKeyword_107; }
		
		//'enable'
		public Keyword getEnableKeyword_108() { return cEnableKeyword_108; }
		
		//'schedule'
		public Keyword getScheduleKeyword_109() { return cScheduleKeyword_109; }
		
		//'irun'
		public Keyword getIrunKeyword_110() { return cIrunKeyword_110; }
		
		//'run'
		public Keyword getRunKeyword_111() { return cRunKeyword_111; }
		
		//'rtc'
		public Keyword getRtcKeyword_112() { return cRtcKeyword_112; }
		
		//'call'
		public Keyword getCallKeyword_113() { return cCallKeyword_113; }
		
		//'new'
		public Keyword getNewKeyword_114() { return cNewKeyword_114; }
		
		//'ctor'
		public Keyword getCtorKeyword_115() { return cCtorKeyword_115; }
		
		//'this'
		public Keyword getThisKeyword_116() { return cThisKeyword_116; }
		
		//'self'
		public Keyword getSelfKeyword_117() { return cSelfKeyword_117; }
		
		//'parent'
		public Keyword getParentKeyword_118() { return cParentKeyword_118; }
		
		//'super'
		public Keyword getSuperKeyword_119() { return cSuperKeyword_119; }
		
		//'null'
		public Keyword getNullKeyword_120() { return cNullKeyword_120; }
	}
	public class ESIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ESIdentifier");
		private final RuleCall cXLIA_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ESIdentifier:
		//	XLIA_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//XLIA_ID
		public RuleCall getXLIA_IDTerminalRuleCall() { return cXLIA_IDTerminalRuleCall; }
	}
	public class ESUfidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ESUfid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXLIA_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cXLIA_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ESUfid:
		//	XLIA_ID (('.' | ':' | '::') XLIA_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XLIA_ID (('.' | ':' | '::') XLIA_ID)*
		public Group getGroup() { return cGroup; }
		
		//XLIA_ID
		public RuleCall getXLIA_IDTerminalRuleCall_0() { return cXLIA_IDTerminalRuleCall_0; }
		
		//(('.' | ':' | '::') XLIA_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | ':' | '::')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0_2() { return cColonColonKeyword_1_0_2; }
		
		//XLIA_ID
		public RuleCall getXLIA_IDTerminalRuleCall_1_1() { return cXLIA_IDTerminalRuleCall_1_1; }
	}
	public class UnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnrestrictedName");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnrestrictedName:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameBindingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_2_1_0 = (RuleCall)cNameBindingAssignment_2_1.eContents().get(0);
		
		//QualifiedName fmlCommon::QualifiedName:
		//	UnqualifiedName ('::' nameBinding+=NameBinding)* ('.' nameBinding+=NameBinding)*
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedName ('::' nameBinding+=NameBinding)* ('.' nameBinding+=NameBinding)*
		public Group getGroup() { return cGroup; }
		
		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }
		
		//('::' nameBinding+=NameBinding)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
		
		//('.' nameBinding+=NameBinding)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_2_1() { return cNameBindingAssignment_2_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_2_1_0() { return cNameBindingNameBindingParserRuleCall_2_1_0; }
	}
	public class PotentiallyAmbiguousQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PotentiallyAmbiguousQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsAmbiguousAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsAmbiguousFullStopKeyword_2_0_0 = (Keyword)cIsAmbiguousAssignment_2_0.eContents().get(0);
		private final Assignment cNameBindingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_2_1_0 = (RuleCall)cNameBindingAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNameBindingAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_2_2_1_0 = (RuleCall)cNameBindingAssignment_2_2_1.eContents().get(0);
		
		//PotentiallyAmbiguousQualifiedName fmlCommon::QualifiedName:
		//	UnqualifiedName ('::' nameBinding+=NameBinding)* (isAmbiguous?='.' nameBinding+=NameBinding ('.'
		//	nameBinding+=NameBinding)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedName ('::' nameBinding+=NameBinding)* (isAmbiguous?='.' nameBinding+=NameBinding ('.'
		//nameBinding+=NameBinding)*)?
		public Group getGroup() { return cGroup; }
		
		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }
		
		//('::' nameBinding+=NameBinding)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
		
		//(isAmbiguous?='.' nameBinding+=NameBinding ('.' nameBinding+=NameBinding)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//isAmbiguous?='.'
		public Assignment getIsAmbiguousAssignment_2_0() { return cIsAmbiguousAssignment_2_0; }
		
		//'.'
		public Keyword getIsAmbiguousFullStopKeyword_2_0_0() { return cIsAmbiguousFullStopKeyword_2_0_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_2_1() { return cNameBindingAssignment_2_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_2_1_0() { return cNameBindingNameBindingParserRuleCall_2_1_0; }
		
		//('.' nameBinding+=NameBinding)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_2_2_1() { return cNameBindingAssignment_2_2_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_2_2_1_0() { return cNameBindingNameBindingParserRuleCall_2_2_1_0; }
	}
	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		
		//ColonQualifiedName fmlCommon::QualifiedName:
		//	UnqualifiedName ('::' nameBinding+=NameBinding)+
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedName ('::' nameBinding+=NameBinding)+
		public Group getGroup() { return cGroup; }
		
		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }
		
		//('::' nameBinding+=NameBinding)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
	}
	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnqualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_1_1_0 = (RuleCall)cNameBindingAssignment_1_1.eContents().get(0);
		
		//DotQualifiedName fmlCommon::QualifiedName:
		//	UnqualifiedName ('.' nameBinding+=NameBinding)+
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedName ('.' nameBinding+=NameBinding)+
		public Group getGroup() { return cGroup; }
		
		//UnqualifiedName
		public RuleCall getUnqualifiedNameParserRuleCall_0() { return cUnqualifiedNameParserRuleCall_0; }
		
		//('.' nameBinding+=NameBinding)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment_1_1() { return cNameBindingAssignment_1_1; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_1_1_0() { return cNameBindingNameBindingParserRuleCall_1_1_0; }
	}
	public class UnqualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnqualifiedName");
		private final Assignment cNameBindingAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBindingNameBindingParserRuleCall_0 = (RuleCall)cNameBindingAssignment.eContents().get(0);
		
		//UnqualifiedName fmlCommon::QualifiedName:
		//	nameBinding+=NameBinding
		@Override public ParserRule getRule() { return rule; }
		
		//nameBinding+=NameBinding
		public Assignment getNameBindingAssignment() { return cNameBindingAssignment; }
		
		//NameBinding
		public RuleCall getNameBindingNameBindingParserRuleCall_0() { return cNameBindingNameBindingParserRuleCall_0; }
	}
	public class NameBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.NameBinding");
		private final RuleCall cXLIA_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NameBinding:
		//	XLIA_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//XLIA_ID
		public RuleCall getXLIA_IDTerminalRuleCall() { return cXLIA_IDTerminalRuleCall; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cUnorderedGroup_0.eContents().get(1);
		private final Assignment cTimedAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cTimedTimedKeyword_0_1_0_0 = (Keyword)cTimedAssignment_0_1_0.eContents().get(0);
		private final Assignment cInput_enabledAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final Keyword cInput_enabledInput_enabledKeyword_0_1_1_0 = (Keyword)cInput_enabledAssignment_0_1_1.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMocKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_6_0_0 = (RuleCall)cPortAssignment_6_0.eContents().get(0);
		private final Assignment cSignalAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_6_1_0 = (RuleCall)cSignalAssignment_6_1.eContents().get(0);
		private final Assignment cBufferAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_6_2_0 = (RuleCall)cBufferAssignment_6_2.eContents().get(0);
		private final Assignment cChannelAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_6_3_0 = (RuleCall)cChannelAssignment_6_3.eContents().get(0);
		private final Assignment cTypedefAssignment_6_4 = (Assignment)cAlternatives_6.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_6_4_0 = (RuleCall)cTypedefAssignment_6_4.eContents().get(0);
		private final Assignment cPropertyAssignment_6_5 = (Assignment)cAlternatives_6.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_6_5_0 = (RuleCall)cPropertyAssignment_6_5.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cPropertyKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1 = (Alternatives)cGroup_7_0.eContents().get(1);
		private final Assignment cPortAssignment_7_0_1_0 = (Assignment)cAlternatives_7_0_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_7_0_1_0_0 = (RuleCall)cPortAssignment_7_0_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_0_1_1 = (Assignment)cAlternatives_7_0_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_7_0_1_1_0 = (RuleCall)cSignalAssignment_7_0_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_0_1_2 = (Assignment)cAlternatives_7_0_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_7_0_1_2_0 = (RuleCall)cBufferAssignment_7_0_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_0_1_3 = (Assignment)cAlternatives_7_0_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_7_0_1_3_0 = (RuleCall)cChannelAssignment_7_0_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_0_1_4 = (Assignment)cAlternatives_7_0_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_0_1_4_0 = (RuleCall)cTypedefAssignment_7_0_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_0_1_5 = (Assignment)cAlternatives_7_0_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_7_0_1_5_0 = (RuleCall)cPropertyAssignment_7_0_1_5.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cPublicKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1_1 = (Alternatives)cGroup_7_1.eContents().get(1);
		private final Assignment cPortAssignment_7_1_1_0 = (Assignment)cAlternatives_7_1_1.eContents().get(0);
		private final RuleCall cPortPortPublicParserRuleCall_7_1_1_0_0 = (RuleCall)cPortAssignment_7_1_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_1_1_1 = (Assignment)cAlternatives_7_1_1.eContents().get(1);
		private final RuleCall cSignalSignalPublicParserRuleCall_7_1_1_1_0 = (RuleCall)cSignalAssignment_7_1_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_1_1_2 = (Assignment)cAlternatives_7_1_1.eContents().get(2);
		private final RuleCall cBufferBufferPublicParserRuleCall_7_1_1_2_0 = (RuleCall)cBufferAssignment_7_1_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_1_1_3 = (Assignment)cAlternatives_7_1_1.eContents().get(3);
		private final RuleCall cChannelChannelPublicParserRuleCall_7_1_1_3_0 = (RuleCall)cChannelAssignment_7_1_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_1_1_4 = (Assignment)cAlternatives_7_1_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_1_1_4_0 = (RuleCall)cTypedefAssignment_7_1_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_1_1_5 = (Assignment)cAlternatives_7_1_1.eContents().get(5);
		private final RuleCall cPropertyVariablePublicParserRuleCall_7_1_1_5_0 = (RuleCall)cPropertyAssignment_7_1_1_5.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cAlternatives_7.eContents().get(2);
		private final Keyword cProtectedKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Alternatives cAlternatives_7_2_1 = (Alternatives)cGroup_7_2.eContents().get(1);
		private final Assignment cPortAssignment_7_2_1_0 = (Assignment)cAlternatives_7_2_1.eContents().get(0);
		private final RuleCall cPortPortProtectedParserRuleCall_7_2_1_0_0 = (RuleCall)cPortAssignment_7_2_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_2_1_1 = (Assignment)cAlternatives_7_2_1.eContents().get(1);
		private final RuleCall cSignalSignalProtectedParserRuleCall_7_2_1_1_0 = (RuleCall)cSignalAssignment_7_2_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_2_1_2 = (Assignment)cAlternatives_7_2_1.eContents().get(2);
		private final RuleCall cBufferBufferProtectedParserRuleCall_7_2_1_2_0 = (RuleCall)cBufferAssignment_7_2_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_2_1_3 = (Assignment)cAlternatives_7_2_1.eContents().get(3);
		private final RuleCall cChannelChannelProtectedParserRuleCall_7_2_1_3_0 = (RuleCall)cChannelAssignment_7_2_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_2_1_4 = (Assignment)cAlternatives_7_2_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_2_1_4_0 = (RuleCall)cTypedefAssignment_7_2_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_2_1_5 = (Assignment)cAlternatives_7_2_1.eContents().get(5);
		private final RuleCall cPropertyVariableProtectedParserRuleCall_7_2_1_5_0 = (RuleCall)cPropertyAssignment_7_2_1_5.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cAlternatives_7.eContents().get(3);
		private final Keyword cPrivateKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Alternatives cAlternatives_7_3_1 = (Alternatives)cGroup_7_3.eContents().get(1);
		private final Assignment cPortAssignment_7_3_1_0 = (Assignment)cAlternatives_7_3_1.eContents().get(0);
		private final RuleCall cPortPortPrivateParserRuleCall_7_3_1_0_0 = (RuleCall)cPortAssignment_7_3_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_3_1_1 = (Assignment)cAlternatives_7_3_1.eContents().get(1);
		private final RuleCall cSignalSignalPrivateParserRuleCall_7_3_1_1_0 = (RuleCall)cSignalAssignment_7_3_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_3_1_2 = (Assignment)cAlternatives_7_3_1.eContents().get(2);
		private final RuleCall cBufferBufferPrivateParserRuleCall_7_3_1_2_0 = (RuleCall)cBufferAssignment_7_3_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_3_1_3 = (Assignment)cAlternatives_7_3_1.eContents().get(3);
		private final RuleCall cChannelChannelPrivateParserRuleCall_7_3_1_3_0 = (RuleCall)cChannelAssignment_7_3_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_3_1_4 = (Assignment)cAlternatives_7_3_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_3_1_4_0 = (RuleCall)cTypedefAssignment_7_3_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_3_1_5 = (Assignment)cAlternatives_7_3_1.eContents().get(5);
		private final RuleCall cPropertyVariablePrivateParserRuleCall_7_3_1_5_0 = (RuleCall)cPropertyAssignment_7_3_1_5.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_8_0 = (Alternatives)cAlternatives_8.eContents().get(0);
		private final Group cGroup_8_0_0 = (Group)cAlternatives_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_0_0 = (Alternatives)cGroup_8_0_0.eContents().get(0);
		private final Keyword cRoutineKeyword_8_0_0_0_0 = (Keyword)cAlternatives_8_0_0_0.eContents().get(0);
		private final Keyword cMacroKeyword_8_0_0_0_1 = (Keyword)cAlternatives_8_0_0_0.eContents().get(1);
		private final Assignment cRoutineAssignment_8_0_0_1 = (Assignment)cGroup_8_0_0.eContents().get(1);
		private final RuleCall cRoutineRoutineParserRuleCall_8_0_0_1_0 = (RuleCall)cRoutineAssignment_8_0_0_1.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cAlternatives_8_0.eContents().get(1);
		private final Keyword cProcedureKeyword_8_0_1_0 = (Keyword)cGroup_8_0_1.eContents().get(0);
		private final Assignment cProcedureAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_8_0_1_1_0 = (RuleCall)cProcedureAssignment_8_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cAlternatives_8.eContents().get(1);
		private final Assignment cRoutineAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cRoutineRoutineParserRuleCall_8_1_0_0 = (RuleCall)cRoutineAssignment_8_1_0.eContents().get(0);
		private final Assignment cProcedureAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_8_1_1_0 = (RuleCall)cProcedureAssignment_8_1_1.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Alternatives cAlternatives_9_0_0 = (Alternatives)cGroup_9_0.eContents().get(0);
		private final Keyword cCompositeKeyword_9_0_0_0 = (Keyword)cAlternatives_9_0_0.eContents().get(0);
		private final Keyword cMachineKeyword_9_0_0_1 = (Keyword)cAlternatives_9_0_0.eContents().get(1);
		private final Alternatives cAlternatives_9_0_1 = (Alternatives)cGroup_9_0.eContents().get(1);
		private final Assignment cMachineAssignment_9_0_1_0 = (Assignment)cAlternatives_9_0_1.eContents().get(0);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_0_1_0_0 = (RuleCall)cMachineAssignment_9_0_1_0.eContents().get(0);
		private final Assignment cInstanceAssignment_9_0_1_1 = (Assignment)cAlternatives_9_0_1.eContents().get(1);
		private final RuleCall cInstanceInstanceMachineParserRuleCall_9_0_1_1_0 = (RuleCall)cInstanceAssignment_9_0_1_1.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cModelKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cMachineAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_1_1_0 = (RuleCall)cMachineAssignment_9_1_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cAlternatives_9.eContents().get(2);
		private final Keyword cPrototypeKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cMachineAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_2_1_0 = (RuleCall)cMachineAssignment_9_2_1.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cAlternatives_9.eContents().get(3);
		private final Keyword cInstanceKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cInstanceAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cInstanceInstanceMachineParserRuleCall_9_3_1_0 = (RuleCall)cInstanceAssignment_9_3_1.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Keyword cBehaviorKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cBehaviorBehaviorParserRuleCall_10_0_1_0 = (RuleCall)cBehaviorAssignment_10_0_1.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cAlternatives_10.eContents().get(1);
		private final Keyword cStatemachineKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cBehaviorAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cBehaviorStatemachineParserRuleCall_10_1_1_0 = (RuleCall)cBehaviorAssignment_10_1_1.eContents().get(0);
		private final Assignment cMainAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMainMoeBehaviorParserRuleCall_11_0 = (RuleCall)cMainAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//System fmlInfra::System:
		//	(visibility=VisibilityKind?
		//	& (timed?='timed' | input_enabled?='input_enabled')?)
		//	'system' ('<' 'moc:'? ('and' | 'or') '>')?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	('@property:' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	| '@public:' (port+=PortPublic
		//	| signal+=SignalPublic
		//	| buffer+=BufferPublic
		//	| channel+=ChannelPublic
		//	| typedef+=TypeDefinition
		//	| property+=VariablePublic)*
		//	| '@protected:' (port+=PortProtected
		//	| signal+=SignalProtected
		//	| buffer+=BufferProtected
		//	| channel+=ChannelProtected
		//	| typedef+=TypeDefinition
		//	| property+=VariableProtected)*
		//	| '@private:' (port+=PortPrivate
		//	| signal+=SignalPrivate
		//	| buffer+=BufferPrivate
		//	| channel+=ChannelPrivate
		//	| typedef+=TypeDefinition
		//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
		//	| '@procedure:' procedure+=Procedure+)*
		//	| (routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock
		//	| instance+=InstanceMachine)+
		//	| '@model:' machine+=AnyMachineBlock*
		//	| '@prototype:' machine+=AnyMachineBlock*
		//	| '@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+
		//	| '@statemachine:' behavior+=Statemachine+)*
		//	main=MoeBehavior
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//(visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')?) 'system' ('<' 'moc:'? ('and' | 'or')
		//'>')? name=ESIdentifier unrestrictedName=UnrestrictedName? '{' (port+=Port | signal+=Signal | buffer+=Buffer |
		//channel+=Channel | typedef+=TypeDefinition | property+=Variable)* ('@property:' (port+=Port | signal+=Signal |
		//buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)* | '@public:' (port+=PortPublic |
		//signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)* | '@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected |
		//channel+=ChannelProtected | typedef+=TypeDefinition | property+=VariableProtected)* | '@private:' (port+=PortPrivate |
		//signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* |
		//(routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock |
		//instance+=InstanceMachine)+ | '@model:' machine+=AnyMachineBlock* | '@prototype:' machine+=AnyMachineBlock* |
		//'@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+ | '@statemachine:'
		//behavior+=Statemachine+)* main=MoeBehavior '}'
		public Group getGroup() { return cGroup; }
		
		//(visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0_0; }
		
		//(timed?='timed' | input_enabled?='input_enabled')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//timed?='timed'
		public Assignment getTimedAssignment_0_1_0() { return cTimedAssignment_0_1_0; }
		
		//'timed'
		public Keyword getTimedTimedKeyword_0_1_0_0() { return cTimedTimedKeyword_0_1_0_0; }
		
		//input_enabled?='input_enabled'
		public Assignment getInput_enabledAssignment_0_1_1() { return cInput_enabledAssignment_0_1_1; }
		
		//'input_enabled'
		public Keyword getInput_enabledInput_enabledKeyword_0_1_1_0() { return cInput_enabledInput_enabledKeyword_0_1_1_0; }
		
		//'system'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//('<' 'moc:'? ('and' | 'or') '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_2_1() { return cMocKeyword_2_1; }
		
		//('and' | 'or')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_0() { return cAndKeyword_2_2_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1() { return cOrKeyword_2_2_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//port+=Port
		public Assignment getPortAssignment_6_0() { return cPortAssignment_6_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_6_0_0() { return cPortPortParserRuleCall_6_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_6_1() { return cSignalAssignment_6_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_6_1_0() { return cSignalSignalParserRuleCall_6_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_6_2() { return cBufferAssignment_6_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_6_2_0() { return cBufferBufferParserRuleCall_6_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_6_3() { return cChannelAssignment_6_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_6_3_0() { return cChannelChannelParserRuleCall_6_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_6_4() { return cTypedefAssignment_6_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_6_4_0() { return cTypedefTypeDefinitionParserRuleCall_6_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_6_5() { return cPropertyAssignment_6_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_6_5_0() { return cPropertyVariableParserRuleCall_6_5_0; }
		
		//('@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)* | '@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic |
		//channel+=ChannelPublic | typedef+=TypeDefinition | property+=VariablePublic)* | '@protected:' (port+=PortProtected |
		//signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected | typedef+=TypeDefinition |
		//property+=VariableProtected)* | '@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate |
		//channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)*
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'@property:'
		public Keyword getPropertyKeyword_7_0_0() { return cPropertyKeyword_7_0_0; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_7_0_1() { return cAlternatives_7_0_1; }
		
		//port+=Port
		public Assignment getPortAssignment_7_0_1_0() { return cPortAssignment_7_0_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_7_0_1_0_0() { return cPortPortParserRuleCall_7_0_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_7_0_1_1() { return cSignalAssignment_7_0_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_7_0_1_1_0() { return cSignalSignalParserRuleCall_7_0_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_7_0_1_2() { return cBufferAssignment_7_0_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_7_0_1_2_0() { return cBufferBufferParserRuleCall_7_0_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_7_0_1_3() { return cChannelAssignment_7_0_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_7_0_1_3_0() { return cChannelChannelParserRuleCall_7_0_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_0_1_4() { return cTypedefAssignment_7_0_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_0_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_0_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_7_0_1_5() { return cPropertyAssignment_7_0_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_0_1_5_0() { return cPropertyVariableParserRuleCall_7_0_1_5_0; }
		
		//'@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic |
		//typedef+=TypeDefinition | property+=VariablePublic)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'@public:'
		public Keyword getPublicKeyword_7_1_0() { return cPublicKeyword_7_1_0; }
		
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)*
		public Alternatives getAlternatives_7_1_1() { return cAlternatives_7_1_1; }
		
		//port+=PortPublic
		public Assignment getPortAssignment_7_1_1_0() { return cPortAssignment_7_1_1_0; }
		
		//PortPublic
		public RuleCall getPortPortPublicParserRuleCall_7_1_1_0_0() { return cPortPortPublicParserRuleCall_7_1_1_0_0; }
		
		//signal+=SignalPublic
		public Assignment getSignalAssignment_7_1_1_1() { return cSignalAssignment_7_1_1_1; }
		
		//SignalPublic
		public RuleCall getSignalSignalPublicParserRuleCall_7_1_1_1_0() { return cSignalSignalPublicParserRuleCall_7_1_1_1_0; }
		
		//buffer+=BufferPublic
		public Assignment getBufferAssignment_7_1_1_2() { return cBufferAssignment_7_1_1_2; }
		
		//BufferPublic
		public RuleCall getBufferBufferPublicParserRuleCall_7_1_1_2_0() { return cBufferBufferPublicParserRuleCall_7_1_1_2_0; }
		
		//channel+=ChannelPublic
		public Assignment getChannelAssignment_7_1_1_3() { return cChannelAssignment_7_1_1_3; }
		
		//ChannelPublic
		public RuleCall getChannelChannelPublicParserRuleCall_7_1_1_3_0() { return cChannelChannelPublicParserRuleCall_7_1_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_1_1_4() { return cTypedefAssignment_7_1_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_1_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_1_1_4_0; }
		
		//property+=VariablePublic
		public Assignment getPropertyAssignment_7_1_1_5() { return cPropertyAssignment_7_1_1_5; }
		
		//VariablePublic
		public RuleCall getPropertyVariablePublicParserRuleCall_7_1_1_5_0() { return cPropertyVariablePublicParserRuleCall_7_1_1_5_0; }
		
		//'@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'@protected:'
		public Keyword getProtectedKeyword_7_2_0() { return cProtectedKeyword_7_2_0; }
		
		//(port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Alternatives getAlternatives_7_2_1() { return cAlternatives_7_2_1; }
		
		//port+=PortProtected
		public Assignment getPortAssignment_7_2_1_0() { return cPortAssignment_7_2_1_0; }
		
		//PortProtected
		public RuleCall getPortPortProtectedParserRuleCall_7_2_1_0_0() { return cPortPortProtectedParserRuleCall_7_2_1_0_0; }
		
		//signal+=SignalProtected
		public Assignment getSignalAssignment_7_2_1_1() { return cSignalAssignment_7_2_1_1; }
		
		//SignalProtected
		public RuleCall getSignalSignalProtectedParserRuleCall_7_2_1_1_0() { return cSignalSignalProtectedParserRuleCall_7_2_1_1_0; }
		
		//buffer+=BufferProtected
		public Assignment getBufferAssignment_7_2_1_2() { return cBufferAssignment_7_2_1_2; }
		
		//BufferProtected
		public RuleCall getBufferBufferProtectedParserRuleCall_7_2_1_2_0() { return cBufferBufferProtectedParserRuleCall_7_2_1_2_0; }
		
		//channel+=ChannelProtected
		public Assignment getChannelAssignment_7_2_1_3() { return cChannelAssignment_7_2_1_3; }
		
		//ChannelProtected
		public RuleCall getChannelChannelProtectedParserRuleCall_7_2_1_3_0() { return cChannelChannelProtectedParserRuleCall_7_2_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_2_1_4() { return cTypedefAssignment_7_2_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_2_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_2_1_4_0; }
		
		//property+=VariableProtected
		public Assignment getPropertyAssignment_7_2_1_5() { return cPropertyAssignment_7_2_1_5; }
		
		//VariableProtected
		public RuleCall getPropertyVariableProtectedParserRuleCall_7_2_1_5_0() { return cPropertyVariableProtectedParserRuleCall_7_2_1_5_0; }
		
		//'@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate |
		//typedef+=TypeDefinition | property+=VariablePrivate)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//'@private:'
		public Keyword getPrivateKeyword_7_3_0() { return cPrivateKeyword_7_3_0; }
		
		//(port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*
		public Alternatives getAlternatives_7_3_1() { return cAlternatives_7_3_1; }
		
		//port+=PortPrivate
		public Assignment getPortAssignment_7_3_1_0() { return cPortAssignment_7_3_1_0; }
		
		//PortPrivate
		public RuleCall getPortPortPrivateParserRuleCall_7_3_1_0_0() { return cPortPortPrivateParserRuleCall_7_3_1_0_0; }
		
		//signal+=SignalPrivate
		public Assignment getSignalAssignment_7_3_1_1() { return cSignalAssignment_7_3_1_1; }
		
		//SignalPrivate
		public RuleCall getSignalSignalPrivateParserRuleCall_7_3_1_1_0() { return cSignalSignalPrivateParserRuleCall_7_3_1_1_0; }
		
		//buffer+=BufferPrivate
		public Assignment getBufferAssignment_7_3_1_2() { return cBufferAssignment_7_3_1_2; }
		
		//BufferPrivate
		public RuleCall getBufferBufferPrivateParserRuleCall_7_3_1_2_0() { return cBufferBufferPrivateParserRuleCall_7_3_1_2_0; }
		
		//channel+=ChannelPrivate
		public Assignment getChannelAssignment_7_3_1_3() { return cChannelAssignment_7_3_1_3; }
		
		//ChannelPrivate
		public RuleCall getChannelChannelPrivateParserRuleCall_7_3_1_3_0() { return cChannelChannelPrivateParserRuleCall_7_3_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_3_1_4() { return cTypedefAssignment_7_3_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_3_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_3_1_4_0; }
		
		//property+=VariablePrivate
		public Assignment getPropertyAssignment_7_3_1_5() { return cPropertyAssignment_7_3_1_5; }
		
		//VariablePrivate
		public RuleCall getPropertyVariablePrivateParserRuleCall_7_3_1_5_0() { return cPropertyVariablePrivateParserRuleCall_7_3_1_5_0; }
		
		//((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* | (routine+=Routine |
		//procedure+=Procedure)+)
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//(('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)*
		public Alternatives getAlternatives_8_0() { return cAlternatives_8_0; }
		
		//('@routine:' | '@macro:') routine+=Routine+
		public Group getGroup_8_0_0() { return cGroup_8_0_0; }
		
		//('@routine:' | '@macro:')
		public Alternatives getAlternatives_8_0_0_0() { return cAlternatives_8_0_0_0; }
		
		//'@routine:'
		public Keyword getRoutineKeyword_8_0_0_0_0() { return cRoutineKeyword_8_0_0_0_0; }
		
		//'@macro:'
		public Keyword getMacroKeyword_8_0_0_0_1() { return cMacroKeyword_8_0_0_0_1; }
		
		//routine+=Routine+
		public Assignment getRoutineAssignment_8_0_0_1() { return cRoutineAssignment_8_0_0_1; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_8_0_0_1_0() { return cRoutineRoutineParserRuleCall_8_0_0_1_0; }
		
		//'@procedure:' procedure+=Procedure+
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }
		
		//'@procedure:'
		public Keyword getProcedureKeyword_8_0_1_0() { return cProcedureKeyword_8_0_1_0; }
		
		//procedure+=Procedure+
		public Assignment getProcedureAssignment_8_0_1_1() { return cProcedureAssignment_8_0_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_8_0_1_1_0() { return cProcedureProcedureParserRuleCall_8_0_1_1_0; }
		
		//(routine+=Routine | procedure+=Procedure)+
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//routine+=Routine
		public Assignment getRoutineAssignment_8_1_0() { return cRoutineAssignment_8_1_0; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_8_1_0_0() { return cRoutineRoutineParserRuleCall_8_1_0_0; }
		
		//procedure+=Procedure
		public Assignment getProcedureAssignment_8_1_1() { return cProcedureAssignment_8_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_8_1_1_0() { return cProcedureProcedureParserRuleCall_8_1_1_0; }
		
		//(('@composite:' | '@machine:') (machine+=AnyMachineBlock | instance+=InstanceMachine)+ | '@model:'
		//machine+=AnyMachineBlock* | '@prototype:' machine+=AnyMachineBlock* | '@instance:' instance+=InstanceMachine*)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//('@composite:' | '@machine:') (machine+=AnyMachineBlock | instance+=InstanceMachine)+
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//('@composite:' | '@machine:')
		public Alternatives getAlternatives_9_0_0() { return cAlternatives_9_0_0; }
		
		//'@composite:'
		public Keyword getCompositeKeyword_9_0_0_0() { return cCompositeKeyword_9_0_0_0; }
		
		//'@machine:'
		public Keyword getMachineKeyword_9_0_0_1() { return cMachineKeyword_9_0_0_1; }
		
		//(machine+=AnyMachineBlock | instance+=InstanceMachine)+
		public Alternatives getAlternatives_9_0_1() { return cAlternatives_9_0_1; }
		
		//machine+=AnyMachineBlock
		public Assignment getMachineAssignment_9_0_1_0() { return cMachineAssignment_9_0_1_0; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_0_1_0_0() { return cMachineAnyMachineBlockParserRuleCall_9_0_1_0_0; }
		
		//instance+=InstanceMachine
		public Assignment getInstanceAssignment_9_0_1_1() { return cInstanceAssignment_9_0_1_1; }
		
		//InstanceMachine
		public RuleCall getInstanceInstanceMachineParserRuleCall_9_0_1_1_0() { return cInstanceInstanceMachineParserRuleCall_9_0_1_1_0; }
		
		//'@model:' machine+=AnyMachineBlock*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//'@model:'
		public Keyword getModelKeyword_9_1_0() { return cModelKeyword_9_1_0; }
		
		//machine+=AnyMachineBlock*
		public Assignment getMachineAssignment_9_1_1() { return cMachineAssignment_9_1_1; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_1_1_0() { return cMachineAnyMachineBlockParserRuleCall_9_1_1_0; }
		
		//'@prototype:' machine+=AnyMachineBlock*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'@prototype:'
		public Keyword getPrototypeKeyword_9_2_0() { return cPrototypeKeyword_9_2_0; }
		
		//machine+=AnyMachineBlock*
		public Assignment getMachineAssignment_9_2_1() { return cMachineAssignment_9_2_1; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_2_1_0() { return cMachineAnyMachineBlockParserRuleCall_9_2_1_0; }
		
		//'@instance:' instance+=InstanceMachine*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//'@instance:'
		public Keyword getInstanceKeyword_9_3_0() { return cInstanceKeyword_9_3_0; }
		
		//instance+=InstanceMachine*
		public Assignment getInstanceAssignment_9_3_1() { return cInstanceAssignment_9_3_1; }
		
		//InstanceMachine
		public RuleCall getInstanceInstanceMachineParserRuleCall_9_3_1_0() { return cInstanceInstanceMachineParserRuleCall_9_3_1_0; }
		
		//('@behavior:' behavior+=Behavior+ | '@statemachine:' behavior+=Statemachine+)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//'@behavior:' behavior+=Behavior+
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//'@behavior:'
		public Keyword getBehaviorKeyword_10_0_0() { return cBehaviorKeyword_10_0_0; }
		
		//behavior+=Behavior+
		public Assignment getBehaviorAssignment_10_0_1() { return cBehaviorAssignment_10_0_1; }
		
		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_10_0_1_0() { return cBehaviorBehaviorParserRuleCall_10_0_1_0; }
		
		//'@statemachine:' behavior+=Statemachine+
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//'@statemachine:'
		public Keyword getStatemachineKeyword_10_1_0() { return cStatemachineKeyword_10_1_0; }
		
		//behavior+=Statemachine+
		public Assignment getBehaviorAssignment_10_1_1() { return cBehaviorAssignment_10_1_1; }
		
		//Statemachine
		public RuleCall getBehaviorStatemachineParserRuleCall_10_1_1_0() { return cBehaviorStatemachineParserRuleCall_10_1_1_0; }
		
		//main=MoeBehavior
		public Assignment getMainAssignment_11() { return cMainAssignment_11; }
		
		//MoeBehavior
		public RuleCall getMainMoeBehaviorParserRuleCall_11_0() { return cMainMoeBehaviorParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class AnyMachineBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.AnyMachineBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMachineBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatemachineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnyMachineBlock fmlInfra::Machine:
		//	MachineBlock
		//	| Statemachine
		@Override public ParserRule getRule() { return rule; }
		
		//MachineBlock | Statemachine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MachineBlock
		public RuleCall getMachineBlockParserRuleCall_0() { return cMachineBlockParserRuleCall_0; }
		
		//Statemachine
		public RuleCall getStatemachineParserRuleCall_1() { return cStatemachineParserRuleCall_1; }
	}
	public class InstanceMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InstanceMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cMachineKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cStatemachineKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModelMachineCrossReference_4_0 = (CrossReference)cModelAssignment_4.eContents().get(0);
		private final RuleCall cModelMachineESUfidParserRuleCall_4_0_1 = (RuleCall)cModelMachineCrossReference_4_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameESIdentifierParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0 = (RuleCall)cUnrestrictedNameAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Group cGroup_8_0_0 = (Group)cGroup_8_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_0_0_0 = (Keyword)cGroup_8_0_0.eContents().get(0);
		private final Group cGroup_8_0_0_1 = (Group)cGroup_8_0_0.eContents().get(1);
		private final Assignment cSlotAssignment_8_0_0_1_0 = (Assignment)cGroup_8_0_0_1.eContents().get(0);
		private final RuleCall cSlotSlotParameterParserRuleCall_8_0_0_1_0_0 = (RuleCall)cSlotAssignment_8_0_0_1_0.eContents().get(0);
		private final Group cGroup_8_0_0_1_1 = (Group)cGroup_8_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_8_0_0_1_1_0 = (Keyword)cGroup_8_0_0_1_1.eContents().get(0);
		private final Assignment cSlotAssignment_8_0_0_1_1_1 = (Assignment)cGroup_8_0_0_1_1.eContents().get(1);
		private final RuleCall cSlotSlotParameterParserRuleCall_8_0_0_1_1_1_0 = (RuleCall)cSlotAssignment_8_0_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_0_0_2 = (Keyword)cGroup_8_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_0_1 = (Keyword)cGroup_8_0.eContents().get(1);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Assignment cSlotAssignment_8_1_1_0 = (Assignment)cGroup_8_1_1.eContents().get(0);
		private final RuleCall cSlotSlotPropertyParserRuleCall_8_1_1_0_0 = (RuleCall)cSlotAssignment_8_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_1_1 = (Keyword)cGroup_8_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		
		//InstanceMachine fmlInfra::InstanceMachine:
		//	'instance' ('machine' | 'statemachine')?
		//	'<' 'model:'? model=[fmlInfra::Machine|ESUfid] '>'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? (('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')? ';'
		//	| '{' (slot+=SlotProperty ';')* '}')
		@Override public ParserRule getRule() { return rule; }
		
		//'instance' ('machine' | 'statemachine')? '<' 'model:'? model=[fmlInfra::Machine|ESUfid] '>' name=ESIdentifier
		//unrestrictedName=UnrestrictedName? (('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')? ';' | '{'
		//(slot+=SlotProperty ';')* '}')
		public Group getGroup() { return cGroup; }
		
		//'instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }
		
		//('machine' | 'statemachine')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'machine'
		public Keyword getMachineKeyword_1_0() { return cMachineKeyword_1_0; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_1_1() { return cStatemachineKeyword_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'model:'?
		public Keyword getModelKeyword_3() { return cModelKeyword_3; }
		
		//model=[fmlInfra::Machine|ESUfid]
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }
		
		//[fmlInfra::Machine|ESUfid]
		public CrossReference getModelMachineCrossReference_4_0() { return cModelMachineCrossReference_4_0; }
		
		//ESUfid
		public RuleCall getModelMachineESUfidParserRuleCall_4_0_1() { return cModelMachineESUfidParserRuleCall_4_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_6_0() { return cNameESIdentifierParserRuleCall_6_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_7() { return cUnrestrictedNameAssignment_7; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_7_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0; }
		
		//(('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')? ';' | '{' (slot+=SlotProperty ';')* '}')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')? ';'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')?
		public Group getGroup_8_0_0() { return cGroup_8_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0_0_0() { return cLeftParenthesisKeyword_8_0_0_0; }
		
		//(slot+=SlotParameter (',' slot+=SlotParameter)*)?
		public Group getGroup_8_0_0_1() { return cGroup_8_0_0_1; }
		
		//slot+=SlotParameter
		public Assignment getSlotAssignment_8_0_0_1_0() { return cSlotAssignment_8_0_0_1_0; }
		
		//SlotParameter
		public RuleCall getSlotSlotParameterParserRuleCall_8_0_0_1_0_0() { return cSlotSlotParameterParserRuleCall_8_0_0_1_0_0; }
		
		//(',' slot+=SlotParameter)*
		public Group getGroup_8_0_0_1_1() { return cGroup_8_0_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_8_0_0_1_1_0() { return cCommaKeyword_8_0_0_1_1_0; }
		
		//slot+=SlotParameter
		public Assignment getSlotAssignment_8_0_0_1_1_1() { return cSlotAssignment_8_0_0_1_1_1; }
		
		//SlotParameter
		public RuleCall getSlotSlotParameterParserRuleCall_8_0_0_1_1_1_0() { return cSlotSlotParameterParserRuleCall_8_0_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_0_0_2() { return cRightParenthesisKeyword_8_0_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_0_1() { return cSemicolonKeyword_8_0_1; }
		
		//'{' (slot+=SlotProperty ';')* '}'
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1_0() { return cLeftCurlyBracketKeyword_8_1_0; }
		
		//(slot+=SlotProperty ';')*
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }
		
		//slot+=SlotProperty
		public Assignment getSlotAssignment_8_1_1_0() { return cSlotAssignment_8_1_1_0; }
		
		//SlotProperty
		public RuleCall getSlotSlotPropertyParserRuleCall_8_1_1_0_0() { return cSlotSlotPropertyParserRuleCall_8_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_1_1() { return cSemicolonKeyword_8_1_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1_2() { return cRightCurlyBracketKeyword_8_1_2; }
	}
	public class SlotParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SlotParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXliaPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cXliaPropertyPropertyDefinitionCrossReference_0_0 = (CrossReference)cXliaPropertyAssignment_0.eContents().get(0);
		private final RuleCall cXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1 = (RuleCall)cXliaPropertyPropertyDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SlotParameter fmlInfra::SlotProperty:
		//	xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] ':' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier]
		public Assignment getXliaPropertyAssignment_0() { return cXliaPropertyAssignment_0; }
		
		//[fmlInfra::PropertyDefinition|ESIdentifier]
		public CrossReference getXliaPropertyPropertyDefinitionCrossReference_0_0() { return cXliaPropertyPropertyDefinitionCrossReference_0_0; }
		
		//ESIdentifier
		public RuleCall getXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1() { return cXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class SlotPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SlotProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXliaPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cXliaPropertyPropertyDefinitionCrossReference_0_0 = (CrossReference)cXliaPropertyAssignment_0.eContents().get(0);
		private final RuleCall cXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1 = (RuleCall)cXliaPropertyPropertyDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SlotProperty fmlInfra::SlotProperty:
		//	xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] '=' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier]
		public Assignment getXliaPropertyAssignment_0() { return cXliaPropertyAssignment_0; }
		
		//[fmlInfra::PropertyDefinition|ESIdentifier]
		public CrossReference getXliaPropertyPropertyDefinitionCrossReference_0_0() { return cXliaPropertyPropertyDefinitionCrossReference_0_0; }
		
		//ESIdentifier
		public RuleCall getXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1() { return cXliaPropertyPropertyDefinitionESIdentifierParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class MachineBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.MachineBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cUnorderedGroup_0.eContents().get(1);
		private final Assignment cTimedAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cTimedTimedKeyword_0_1_0_0 = (Keyword)cTimedAssignment_0_1_0.eContents().get(0);
		private final Assignment cInput_enabledAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final Keyword cInput_enabledInput_enabledKeyword_0_1_1_0 = (Keyword)cInput_enabledAssignment_0_1_1.eContents().get(0);
		private final Assignment cDesignAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cDesignDesignKindEnumRuleCall_0_2_0 = (RuleCall)cDesignAssignment_0_2.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMocKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_6_0_0 = (RuleCall)cPortAssignment_6_0.eContents().get(0);
		private final Assignment cSignalAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_6_1_0 = (RuleCall)cSignalAssignment_6_1.eContents().get(0);
		private final Assignment cBufferAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_6_2_0 = (RuleCall)cBufferAssignment_6_2.eContents().get(0);
		private final Assignment cChannelAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_6_3_0 = (RuleCall)cChannelAssignment_6_3.eContents().get(0);
		private final Assignment cTypedefAssignment_6_4 = (Assignment)cAlternatives_6.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_6_4_0 = (RuleCall)cTypedefAssignment_6_4.eContents().get(0);
		private final Assignment cPropertyAssignment_6_5 = (Assignment)cAlternatives_6.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_6_5_0 = (RuleCall)cPropertyAssignment_6_5.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cPropertyKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1 = (Alternatives)cGroup_7_0.eContents().get(1);
		private final Assignment cPortAssignment_7_0_1_0 = (Assignment)cAlternatives_7_0_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_7_0_1_0_0 = (RuleCall)cPortAssignment_7_0_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_0_1_1 = (Assignment)cAlternatives_7_0_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_7_0_1_1_0 = (RuleCall)cSignalAssignment_7_0_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_0_1_2 = (Assignment)cAlternatives_7_0_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_7_0_1_2_0 = (RuleCall)cBufferAssignment_7_0_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_0_1_3 = (Assignment)cAlternatives_7_0_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_7_0_1_3_0 = (RuleCall)cChannelAssignment_7_0_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_0_1_4 = (Assignment)cAlternatives_7_0_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_0_1_4_0 = (RuleCall)cTypedefAssignment_7_0_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_0_1_5 = (Assignment)cAlternatives_7_0_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_7_0_1_5_0 = (RuleCall)cPropertyAssignment_7_0_1_5.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cPublicKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1_1 = (Alternatives)cGroup_7_1.eContents().get(1);
		private final Assignment cPortAssignment_7_1_1_0 = (Assignment)cAlternatives_7_1_1.eContents().get(0);
		private final RuleCall cPortPortPublicParserRuleCall_7_1_1_0_0 = (RuleCall)cPortAssignment_7_1_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_1_1_1 = (Assignment)cAlternatives_7_1_1.eContents().get(1);
		private final RuleCall cSignalSignalPublicParserRuleCall_7_1_1_1_0 = (RuleCall)cSignalAssignment_7_1_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_1_1_2 = (Assignment)cAlternatives_7_1_1.eContents().get(2);
		private final RuleCall cBufferBufferPublicParserRuleCall_7_1_1_2_0 = (RuleCall)cBufferAssignment_7_1_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_1_1_3 = (Assignment)cAlternatives_7_1_1.eContents().get(3);
		private final RuleCall cChannelChannelPublicParserRuleCall_7_1_1_3_0 = (RuleCall)cChannelAssignment_7_1_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_1_1_4 = (Assignment)cAlternatives_7_1_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_1_1_4_0 = (RuleCall)cTypedefAssignment_7_1_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_1_1_5 = (Assignment)cAlternatives_7_1_1.eContents().get(5);
		private final RuleCall cPropertyVariablePublicParserRuleCall_7_1_1_5_0 = (RuleCall)cPropertyAssignment_7_1_1_5.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cAlternatives_7.eContents().get(2);
		private final Keyword cProtectedKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Alternatives cAlternatives_7_2_1 = (Alternatives)cGroup_7_2.eContents().get(1);
		private final Assignment cPortAssignment_7_2_1_0 = (Assignment)cAlternatives_7_2_1.eContents().get(0);
		private final RuleCall cPortPortProtectedParserRuleCall_7_2_1_0_0 = (RuleCall)cPortAssignment_7_2_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_2_1_1 = (Assignment)cAlternatives_7_2_1.eContents().get(1);
		private final RuleCall cSignalSignalProtectedParserRuleCall_7_2_1_1_0 = (RuleCall)cSignalAssignment_7_2_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_2_1_2 = (Assignment)cAlternatives_7_2_1.eContents().get(2);
		private final RuleCall cBufferBufferProtectedParserRuleCall_7_2_1_2_0 = (RuleCall)cBufferAssignment_7_2_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_2_1_3 = (Assignment)cAlternatives_7_2_1.eContents().get(3);
		private final RuleCall cChannelChannelProtectedParserRuleCall_7_2_1_3_0 = (RuleCall)cChannelAssignment_7_2_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_2_1_4 = (Assignment)cAlternatives_7_2_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_2_1_4_0 = (RuleCall)cTypedefAssignment_7_2_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_2_1_5 = (Assignment)cAlternatives_7_2_1.eContents().get(5);
		private final RuleCall cPropertyVariableProtectedParserRuleCall_7_2_1_5_0 = (RuleCall)cPropertyAssignment_7_2_1_5.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cAlternatives_7.eContents().get(3);
		private final Keyword cPrivateKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Alternatives cAlternatives_7_3_1 = (Alternatives)cGroup_7_3.eContents().get(1);
		private final Assignment cPortAssignment_7_3_1_0 = (Assignment)cAlternatives_7_3_1.eContents().get(0);
		private final RuleCall cPortPortPrivateParserRuleCall_7_3_1_0_0 = (RuleCall)cPortAssignment_7_3_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_3_1_1 = (Assignment)cAlternatives_7_3_1.eContents().get(1);
		private final RuleCall cSignalSignalPrivateParserRuleCall_7_3_1_1_0 = (RuleCall)cSignalAssignment_7_3_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_3_1_2 = (Assignment)cAlternatives_7_3_1.eContents().get(2);
		private final RuleCall cBufferBufferPrivateParserRuleCall_7_3_1_2_0 = (RuleCall)cBufferAssignment_7_3_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_3_1_3 = (Assignment)cAlternatives_7_3_1.eContents().get(3);
		private final RuleCall cChannelChannelPrivateParserRuleCall_7_3_1_3_0 = (RuleCall)cChannelAssignment_7_3_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_3_1_4 = (Assignment)cAlternatives_7_3_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_3_1_4_0 = (RuleCall)cTypedefAssignment_7_3_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_3_1_5 = (Assignment)cAlternatives_7_3_1.eContents().get(5);
		private final RuleCall cPropertyVariablePrivateParserRuleCall_7_3_1_5_0 = (RuleCall)cPropertyAssignment_7_3_1_5.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_8_0 = (Alternatives)cAlternatives_8.eContents().get(0);
		private final Group cGroup_8_0_0 = (Group)cAlternatives_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_0_0 = (Alternatives)cGroup_8_0_0.eContents().get(0);
		private final Keyword cRoutineKeyword_8_0_0_0_0 = (Keyword)cAlternatives_8_0_0_0.eContents().get(0);
		private final Keyword cMacroKeyword_8_0_0_0_1 = (Keyword)cAlternatives_8_0_0_0.eContents().get(1);
		private final Assignment cRoutineAssignment_8_0_0_1 = (Assignment)cGroup_8_0_0.eContents().get(1);
		private final RuleCall cRoutineRoutineParserRuleCall_8_0_0_1_0 = (RuleCall)cRoutineAssignment_8_0_0_1.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cAlternatives_8_0.eContents().get(1);
		private final Keyword cProcedureKeyword_8_0_1_0 = (Keyword)cGroup_8_0_1.eContents().get(0);
		private final Assignment cProcedureAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_8_0_1_1_0 = (RuleCall)cProcedureAssignment_8_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cAlternatives_8.eContents().get(1);
		private final Assignment cRoutineAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cRoutineRoutineParserRuleCall_8_1_0_0 = (RuleCall)cRoutineAssignment_8_1_0.eContents().get(0);
		private final Assignment cProcedureAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_8_1_1_0 = (RuleCall)cProcedureAssignment_8_1_1.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Alternatives cAlternatives_9_0_0 = (Alternatives)cGroup_9_0.eContents().get(0);
		private final Keyword cCompositeKeyword_9_0_0_0 = (Keyword)cAlternatives_9_0_0.eContents().get(0);
		private final Keyword cMachineKeyword_9_0_0_1 = (Keyword)cAlternatives_9_0_0.eContents().get(1);
		private final Alternatives cAlternatives_9_0_1 = (Alternatives)cGroup_9_0.eContents().get(1);
		private final Assignment cMachineAssignment_9_0_1_0 = (Assignment)cAlternatives_9_0_1.eContents().get(0);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_0_1_0_0 = (RuleCall)cMachineAssignment_9_0_1_0.eContents().get(0);
		private final Assignment cInstanceAssignment_9_0_1_1 = (Assignment)cAlternatives_9_0_1.eContents().get(1);
		private final RuleCall cInstanceInstanceMachineParserRuleCall_9_0_1_1_0 = (RuleCall)cInstanceAssignment_9_0_1_1.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cModelKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cMachineAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_1_1_0 = (RuleCall)cMachineAssignment_9_1_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cAlternatives_9.eContents().get(2);
		private final Keyword cPrototypeKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cMachineAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cMachineAnyMachineBlockParserRuleCall_9_2_1_0 = (RuleCall)cMachineAssignment_9_2_1.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cAlternatives_9.eContents().get(3);
		private final Keyword cInstanceKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cInstanceAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cInstanceInstanceMachineParserRuleCall_9_3_1_0 = (RuleCall)cInstanceAssignment_9_3_1.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Keyword cBehaviorKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cBehaviorBehaviorParserRuleCall_10_0_1_0 = (RuleCall)cBehaviorAssignment_10_0_1.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cAlternatives_10.eContents().get(1);
		private final Keyword cStatemachineKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cBehaviorAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cBehaviorStatemachineParserRuleCall_10_1_1_0 = (RuleCall)cBehaviorAssignment_10_1_1.eContents().get(0);
		private final Assignment cMainAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMainMoeBehaviorParserRuleCall_11_0 = (RuleCall)cMainAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//MachineBlock fmlInfra::Machine:
		//	(visibility=VisibilityKind?
		//	& (timed?='timed' | input_enabled?='input_enabled')?
		//	& design=DesignKind?)
		//	'machine' ('<' 'moc:'? ('and' | 'or') '>')?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	('@property:' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	| '@public:' (port+=PortPublic
		//	| signal+=SignalPublic
		//	| buffer+=BufferPublic
		//	| channel+=ChannelPublic
		//	| typedef+=TypeDefinition
		//	| property+=VariablePublic)*
		//	| '@protected:' (port+=PortProtected
		//	| signal+=SignalProtected
		//	| buffer+=BufferProtected
		//	| channel+=ChannelProtected
		//	| typedef+=TypeDefinition
		//	| property+=VariableProtected)*
		//	| '@private:' (port+=PortPrivate
		//	| signal+=SignalPrivate
		//	| buffer+=BufferPrivate
		//	| channel+=ChannelPrivate
		//	| typedef+=TypeDefinition
		//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
		//	| '@procedure:' procedure+=Procedure+)*
		//	| (routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock
		//	| instance+=InstanceMachine)+
		//	| '@model:' machine+=AnyMachineBlock*
		//	| '@prototype:' machine+=AnyMachineBlock*
		//	| '@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+
		//	| '@statemachine:' behavior+=Statemachine+)*
		//	main=MoeBehavior
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//(visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')? & design=DesignKind?) 'machine' ('<'
		//'moc:'? ('and' | 'or') '>')? name=ESIdentifier unrestrictedName=UnrestrictedName? '{' (port+=Port | signal+=Signal |
		//buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)* ('@property:' (port+=Port |
		//signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)* | '@public:'
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)* | '@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected |
		//channel+=ChannelProtected | typedef+=TypeDefinition | property+=VariableProtected)* | '@private:' (port+=PortPrivate |
		//signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* |
		//(routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock |
		//instance+=InstanceMachine)+ | '@model:' machine+=AnyMachineBlock* | '@prototype:' machine+=AnyMachineBlock* |
		//'@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+ | '@statemachine:'
		//behavior+=Statemachine+)* main=MoeBehavior '}'
		public Group getGroup() { return cGroup; }
		
		//(visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')? & design=DesignKind?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0_0; }
		
		//(timed?='timed' | input_enabled?='input_enabled')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//timed?='timed'
		public Assignment getTimedAssignment_0_1_0() { return cTimedAssignment_0_1_0; }
		
		//'timed'
		public Keyword getTimedTimedKeyword_0_1_0_0() { return cTimedTimedKeyword_0_1_0_0; }
		
		//input_enabled?='input_enabled'
		public Assignment getInput_enabledAssignment_0_1_1() { return cInput_enabledAssignment_0_1_1; }
		
		//'input_enabled'
		public Keyword getInput_enabledInput_enabledKeyword_0_1_1_0() { return cInput_enabledInput_enabledKeyword_0_1_1_0; }
		
		//design=DesignKind?
		public Assignment getDesignAssignment_0_2() { return cDesignAssignment_0_2; }
		
		//DesignKind
		public RuleCall getDesignDesignKindEnumRuleCall_0_2_0() { return cDesignDesignKindEnumRuleCall_0_2_0; }
		
		//'machine'
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }
		
		//('<' 'moc:'? ('and' | 'or') '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_2_1() { return cMocKeyword_2_1; }
		
		//('and' | 'or')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_0() { return cAndKeyword_2_2_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1() { return cOrKeyword_2_2_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//port+=Port
		public Assignment getPortAssignment_6_0() { return cPortAssignment_6_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_6_0_0() { return cPortPortParserRuleCall_6_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_6_1() { return cSignalAssignment_6_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_6_1_0() { return cSignalSignalParserRuleCall_6_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_6_2() { return cBufferAssignment_6_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_6_2_0() { return cBufferBufferParserRuleCall_6_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_6_3() { return cChannelAssignment_6_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_6_3_0() { return cChannelChannelParserRuleCall_6_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_6_4() { return cTypedefAssignment_6_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_6_4_0() { return cTypedefTypeDefinitionParserRuleCall_6_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_6_5() { return cPropertyAssignment_6_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_6_5_0() { return cPropertyVariableParserRuleCall_6_5_0; }
		
		//('@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)* | '@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic |
		//channel+=ChannelPublic | typedef+=TypeDefinition | property+=VariablePublic)* | '@protected:' (port+=PortProtected |
		//signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected | typedef+=TypeDefinition |
		//property+=VariableProtected)* | '@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate |
		//channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)*
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'@property:'
		public Keyword getPropertyKeyword_7_0_0() { return cPropertyKeyword_7_0_0; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_7_0_1() { return cAlternatives_7_0_1; }
		
		//port+=Port
		public Assignment getPortAssignment_7_0_1_0() { return cPortAssignment_7_0_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_7_0_1_0_0() { return cPortPortParserRuleCall_7_0_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_7_0_1_1() { return cSignalAssignment_7_0_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_7_0_1_1_0() { return cSignalSignalParserRuleCall_7_0_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_7_0_1_2() { return cBufferAssignment_7_0_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_7_0_1_2_0() { return cBufferBufferParserRuleCall_7_0_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_7_0_1_3() { return cChannelAssignment_7_0_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_7_0_1_3_0() { return cChannelChannelParserRuleCall_7_0_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_0_1_4() { return cTypedefAssignment_7_0_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_0_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_0_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_7_0_1_5() { return cPropertyAssignment_7_0_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_0_1_5_0() { return cPropertyVariableParserRuleCall_7_0_1_5_0; }
		
		//'@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic |
		//typedef+=TypeDefinition | property+=VariablePublic)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'@public:'
		public Keyword getPublicKeyword_7_1_0() { return cPublicKeyword_7_1_0; }
		
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)*
		public Alternatives getAlternatives_7_1_1() { return cAlternatives_7_1_1; }
		
		//port+=PortPublic
		public Assignment getPortAssignment_7_1_1_0() { return cPortAssignment_7_1_1_0; }
		
		//PortPublic
		public RuleCall getPortPortPublicParserRuleCall_7_1_1_0_0() { return cPortPortPublicParserRuleCall_7_1_1_0_0; }
		
		//signal+=SignalPublic
		public Assignment getSignalAssignment_7_1_1_1() { return cSignalAssignment_7_1_1_1; }
		
		//SignalPublic
		public RuleCall getSignalSignalPublicParserRuleCall_7_1_1_1_0() { return cSignalSignalPublicParserRuleCall_7_1_1_1_0; }
		
		//buffer+=BufferPublic
		public Assignment getBufferAssignment_7_1_1_2() { return cBufferAssignment_7_1_1_2; }
		
		//BufferPublic
		public RuleCall getBufferBufferPublicParserRuleCall_7_1_1_2_0() { return cBufferBufferPublicParserRuleCall_7_1_1_2_0; }
		
		//channel+=ChannelPublic
		public Assignment getChannelAssignment_7_1_1_3() { return cChannelAssignment_7_1_1_3; }
		
		//ChannelPublic
		public RuleCall getChannelChannelPublicParserRuleCall_7_1_1_3_0() { return cChannelChannelPublicParserRuleCall_7_1_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_1_1_4() { return cTypedefAssignment_7_1_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_1_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_1_1_4_0; }
		
		//property+=VariablePublic
		public Assignment getPropertyAssignment_7_1_1_5() { return cPropertyAssignment_7_1_1_5; }
		
		//VariablePublic
		public RuleCall getPropertyVariablePublicParserRuleCall_7_1_1_5_0() { return cPropertyVariablePublicParserRuleCall_7_1_1_5_0; }
		
		//'@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'@protected:'
		public Keyword getProtectedKeyword_7_2_0() { return cProtectedKeyword_7_2_0; }
		
		//(port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Alternatives getAlternatives_7_2_1() { return cAlternatives_7_2_1; }
		
		//port+=PortProtected
		public Assignment getPortAssignment_7_2_1_0() { return cPortAssignment_7_2_1_0; }
		
		//PortProtected
		public RuleCall getPortPortProtectedParserRuleCall_7_2_1_0_0() { return cPortPortProtectedParserRuleCall_7_2_1_0_0; }
		
		//signal+=SignalProtected
		public Assignment getSignalAssignment_7_2_1_1() { return cSignalAssignment_7_2_1_1; }
		
		//SignalProtected
		public RuleCall getSignalSignalProtectedParserRuleCall_7_2_1_1_0() { return cSignalSignalProtectedParserRuleCall_7_2_1_1_0; }
		
		//buffer+=BufferProtected
		public Assignment getBufferAssignment_7_2_1_2() { return cBufferAssignment_7_2_1_2; }
		
		//BufferProtected
		public RuleCall getBufferBufferProtectedParserRuleCall_7_2_1_2_0() { return cBufferBufferProtectedParserRuleCall_7_2_1_2_0; }
		
		//channel+=ChannelProtected
		public Assignment getChannelAssignment_7_2_1_3() { return cChannelAssignment_7_2_1_3; }
		
		//ChannelProtected
		public RuleCall getChannelChannelProtectedParserRuleCall_7_2_1_3_0() { return cChannelChannelProtectedParserRuleCall_7_2_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_2_1_4() { return cTypedefAssignment_7_2_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_2_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_2_1_4_0; }
		
		//property+=VariableProtected
		public Assignment getPropertyAssignment_7_2_1_5() { return cPropertyAssignment_7_2_1_5; }
		
		//VariableProtected
		public RuleCall getPropertyVariableProtectedParserRuleCall_7_2_1_5_0() { return cPropertyVariableProtectedParserRuleCall_7_2_1_5_0; }
		
		//'@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate |
		//typedef+=TypeDefinition | property+=VariablePrivate)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//'@private:'
		public Keyword getPrivateKeyword_7_3_0() { return cPrivateKeyword_7_3_0; }
		
		//(port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*
		public Alternatives getAlternatives_7_3_1() { return cAlternatives_7_3_1; }
		
		//port+=PortPrivate
		public Assignment getPortAssignment_7_3_1_0() { return cPortAssignment_7_3_1_0; }
		
		//PortPrivate
		public RuleCall getPortPortPrivateParserRuleCall_7_3_1_0_0() { return cPortPortPrivateParserRuleCall_7_3_1_0_0; }
		
		//signal+=SignalPrivate
		public Assignment getSignalAssignment_7_3_1_1() { return cSignalAssignment_7_3_1_1; }
		
		//SignalPrivate
		public RuleCall getSignalSignalPrivateParserRuleCall_7_3_1_1_0() { return cSignalSignalPrivateParserRuleCall_7_3_1_1_0; }
		
		//buffer+=BufferPrivate
		public Assignment getBufferAssignment_7_3_1_2() { return cBufferAssignment_7_3_1_2; }
		
		//BufferPrivate
		public RuleCall getBufferBufferPrivateParserRuleCall_7_3_1_2_0() { return cBufferBufferPrivateParserRuleCall_7_3_1_2_0; }
		
		//channel+=ChannelPrivate
		public Assignment getChannelAssignment_7_3_1_3() { return cChannelAssignment_7_3_1_3; }
		
		//ChannelPrivate
		public RuleCall getChannelChannelPrivateParserRuleCall_7_3_1_3_0() { return cChannelChannelPrivateParserRuleCall_7_3_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_3_1_4() { return cTypedefAssignment_7_3_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_3_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_3_1_4_0; }
		
		//property+=VariablePrivate
		public Assignment getPropertyAssignment_7_3_1_5() { return cPropertyAssignment_7_3_1_5; }
		
		//VariablePrivate
		public RuleCall getPropertyVariablePrivateParserRuleCall_7_3_1_5_0() { return cPropertyVariablePrivateParserRuleCall_7_3_1_5_0; }
		
		//((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* | (routine+=Routine |
		//procedure+=Procedure)+)
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//(('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)*
		public Alternatives getAlternatives_8_0() { return cAlternatives_8_0; }
		
		//('@routine:' | '@macro:') routine+=Routine+
		public Group getGroup_8_0_0() { return cGroup_8_0_0; }
		
		//('@routine:' | '@macro:')
		public Alternatives getAlternatives_8_0_0_0() { return cAlternatives_8_0_0_0; }
		
		//'@routine:'
		public Keyword getRoutineKeyword_8_0_0_0_0() { return cRoutineKeyword_8_0_0_0_0; }
		
		//'@macro:'
		public Keyword getMacroKeyword_8_0_0_0_1() { return cMacroKeyword_8_0_0_0_1; }
		
		//routine+=Routine+
		public Assignment getRoutineAssignment_8_0_0_1() { return cRoutineAssignment_8_0_0_1; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_8_0_0_1_0() { return cRoutineRoutineParserRuleCall_8_0_0_1_0; }
		
		//'@procedure:' procedure+=Procedure+
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }
		
		//'@procedure:'
		public Keyword getProcedureKeyword_8_0_1_0() { return cProcedureKeyword_8_0_1_0; }
		
		//procedure+=Procedure+
		public Assignment getProcedureAssignment_8_0_1_1() { return cProcedureAssignment_8_0_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_8_0_1_1_0() { return cProcedureProcedureParserRuleCall_8_0_1_1_0; }
		
		//(routine+=Routine | procedure+=Procedure)+
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//routine+=Routine
		public Assignment getRoutineAssignment_8_1_0() { return cRoutineAssignment_8_1_0; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_8_1_0_0() { return cRoutineRoutineParserRuleCall_8_1_0_0; }
		
		//procedure+=Procedure
		public Assignment getProcedureAssignment_8_1_1() { return cProcedureAssignment_8_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_8_1_1_0() { return cProcedureProcedureParserRuleCall_8_1_1_0; }
		
		//(('@composite:' | '@machine:') (machine+=AnyMachineBlock | instance+=InstanceMachine)+ | '@model:'
		//machine+=AnyMachineBlock* | '@prototype:' machine+=AnyMachineBlock* | '@instance:' instance+=InstanceMachine*)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//('@composite:' | '@machine:') (machine+=AnyMachineBlock | instance+=InstanceMachine)+
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//('@composite:' | '@machine:')
		public Alternatives getAlternatives_9_0_0() { return cAlternatives_9_0_0; }
		
		//'@composite:'
		public Keyword getCompositeKeyword_9_0_0_0() { return cCompositeKeyword_9_0_0_0; }
		
		//'@machine:'
		public Keyword getMachineKeyword_9_0_0_1() { return cMachineKeyword_9_0_0_1; }
		
		//(machine+=AnyMachineBlock | instance+=InstanceMachine)+
		public Alternatives getAlternatives_9_0_1() { return cAlternatives_9_0_1; }
		
		//machine+=AnyMachineBlock
		public Assignment getMachineAssignment_9_0_1_0() { return cMachineAssignment_9_0_1_0; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_0_1_0_0() { return cMachineAnyMachineBlockParserRuleCall_9_0_1_0_0; }
		
		//instance+=InstanceMachine
		public Assignment getInstanceAssignment_9_0_1_1() { return cInstanceAssignment_9_0_1_1; }
		
		//InstanceMachine
		public RuleCall getInstanceInstanceMachineParserRuleCall_9_0_1_1_0() { return cInstanceInstanceMachineParserRuleCall_9_0_1_1_0; }
		
		//'@model:' machine+=AnyMachineBlock*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//'@model:'
		public Keyword getModelKeyword_9_1_0() { return cModelKeyword_9_1_0; }
		
		//machine+=AnyMachineBlock*
		public Assignment getMachineAssignment_9_1_1() { return cMachineAssignment_9_1_1; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_1_1_0() { return cMachineAnyMachineBlockParserRuleCall_9_1_1_0; }
		
		//'@prototype:' machine+=AnyMachineBlock*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'@prototype:'
		public Keyword getPrototypeKeyword_9_2_0() { return cPrototypeKeyword_9_2_0; }
		
		//machine+=AnyMachineBlock*
		public Assignment getMachineAssignment_9_2_1() { return cMachineAssignment_9_2_1; }
		
		//AnyMachineBlock
		public RuleCall getMachineAnyMachineBlockParserRuleCall_9_2_1_0() { return cMachineAnyMachineBlockParserRuleCall_9_2_1_0; }
		
		//'@instance:' instance+=InstanceMachine*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//'@instance:'
		public Keyword getInstanceKeyword_9_3_0() { return cInstanceKeyword_9_3_0; }
		
		//instance+=InstanceMachine*
		public Assignment getInstanceAssignment_9_3_1() { return cInstanceAssignment_9_3_1; }
		
		//InstanceMachine
		public RuleCall getInstanceInstanceMachineParserRuleCall_9_3_1_0() { return cInstanceInstanceMachineParserRuleCall_9_3_1_0; }
		
		//('@behavior:' behavior+=Behavior+ | '@statemachine:' behavior+=Statemachine+)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//'@behavior:' behavior+=Behavior+
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//'@behavior:'
		public Keyword getBehaviorKeyword_10_0_0() { return cBehaviorKeyword_10_0_0; }
		
		//behavior+=Behavior+
		public Assignment getBehaviorAssignment_10_0_1() { return cBehaviorAssignment_10_0_1; }
		
		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_10_0_1_0() { return cBehaviorBehaviorParserRuleCall_10_0_1_0; }
		
		//'@statemachine:' behavior+=Statemachine+
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//'@statemachine:'
		public Keyword getStatemachineKeyword_10_1_0() { return cStatemachineKeyword_10_1_0; }
		
		//behavior+=Statemachine+
		public Assignment getBehaviorAssignment_10_1_1() { return cBehaviorAssignment_10_1_1; }
		
		//Statemachine
		public RuleCall getBehaviorStatemachineParserRuleCall_10_1_1_0() { return cBehaviorStatemachineParserRuleCall_10_1_1_0; }
		
		//main=MoeBehavior
		public Assignment getMainAssignment_11() { return cMainAssignment_11; }
		
		//MoeBehavior
		public RuleCall getMainMoeBehaviorParserRuleCall_11_0() { return cMainMoeBehaviorParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMocKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cOrKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cParameterAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cParameterFunctionalParameterParserRuleCall_5_0_1_0_0 = (RuleCall)cParameterAssignment_5_0_1_0.eContents().get(0);
		private final Group cGroup_5_0_1_1 = (Group)cGroup_5_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_0_1_1_0 = (Keyword)cGroup_5_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_5_0_1_1_1 = (Assignment)cGroup_5_0_1_1.eContents().get(1);
		private final RuleCall cParameterFunctionalParameterParserRuleCall_5_0_1_1_1_0 = (RuleCall)cParameterAssignment_5_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1 = (Alternatives)cGroup_5_1.eContents().get(1);
		private final Assignment cParameterAssignment_5_1_1_0 = (Assignment)cAlternatives_5_1_1.eContents().get(0);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_1_1_0_0 = (RuleCall)cParameterAssignment_5_1_1_0.eContents().get(0);
		private final Group cGroup_5_1_1_1 = (Group)cAlternatives_5_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_1_1_1_0 = (Keyword)cGroup_5_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_5_1_1_1_1 = (Assignment)cGroup_5_1_1_1.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_1_1_1_1_0 = (RuleCall)cParameterAssignment_5_1_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_1_1_2 = (Group)cGroup_5_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_1_1_2_0 = (Keyword)cGroup_5_1_1_1_2.eContents().get(0);
		private final Assignment cParameterAssignment_5_1_1_1_2_1 = (Assignment)cGroup_5_1_1_1_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_1_1_1_2_1_0 = (RuleCall)cParameterAssignment_5_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_1_1_3 = (Keyword)cGroup_5_1_1_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cParameterKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1 = (Alternatives)cGroup_7_0.eContents().get(1);
		private final Group cGroup_7_0_1_0 = (Group)cAlternatives_7_0_1.eContents().get(0);
		private final Keyword cInputKeyword_7_0_1_0_0 = (Keyword)cGroup_7_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_0_1 = (Alternatives)cGroup_7_0_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_0_1_0 = (Assignment)cAlternatives_7_0_1_0_1.eContents().get(0);
		private final RuleCall cParameterParameterInputParserRuleCall_7_0_1_0_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_0_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_0_1_1 = (Group)cAlternatives_7_0_1_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_0_1_1_0 = (Keyword)cGroup_7_0_1_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_0_1_1_1 = (Assignment)cGroup_7_0_1_0_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_0_1_1_2 = (Keyword)cGroup_7_0_1_0_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_1 = (Group)cAlternatives_7_0_1.eContents().get(1);
		private final Keyword cInoutKeyword_7_0_1_1_0 = (Keyword)cGroup_7_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_1_1 = (Alternatives)cGroup_7_0_1_1.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_1_1_0 = (Assignment)cAlternatives_7_0_1_1_1.eContents().get(0);
		private final RuleCall cParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_1_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_1_1_1 = (Group)cAlternatives_7_0_1_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_1_1_1_0 = (Keyword)cGroup_7_0_1_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_1_1_1_1 = (Assignment)cGroup_7_0_1_1_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_1_1_1_2 = (Keyword)cGroup_7_0_1_1_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_2 = (Group)cAlternatives_7_0_1.eContents().get(2);
		private final Keyword cOutputKeyword_7_0_1_2_0 = (Keyword)cGroup_7_0_1_2.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_2_1 = (Alternatives)cGroup_7_0_1_2.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_2_1_0 = (Assignment)cAlternatives_7_0_1_2_1.eContents().get(0);
		private final RuleCall cParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_2_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_2_1_1 = (Group)cAlternatives_7_0_1_2_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_2_1_1_0 = (Keyword)cGroup_7_0_1_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_2_1_1_1 = (Assignment)cGroup_7_0_1_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_2_1_1_2 = (Keyword)cGroup_7_0_1_2_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_3 = (Group)cAlternatives_7_0_1.eContents().get(3);
		private final Keyword cReturnKeyword_7_0_1_3_0 = (Keyword)cGroup_7_0_1_3.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_3_1 = (Alternatives)cGroup_7_0_1_3.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_3_1_0 = (Assignment)cAlternatives_7_0_1_3_1.eContents().get(0);
		private final RuleCall cParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_3_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_3_1_1 = (Group)cAlternatives_7_0_1_3_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_3_1_1_0 = (Keyword)cGroup_7_0_1_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_3_1_1_1 = (Assignment)cGroup_7_0_1_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_3_1_1_2 = (Keyword)cGroup_7_0_1_3_1_1.eContents().get(2);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cAlternatives_7.eContents().get(1);
		private final Assignment cPortAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_7_1_0_0 = (RuleCall)cPortAssignment_7_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_7_1_1_0 = (RuleCall)cSignalAssignment_7_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_1_2 = (Assignment)cAlternatives_7_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_7_1_2_0 = (RuleCall)cBufferAssignment_7_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_1_3 = (Assignment)cAlternatives_7_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_7_1_3_0 = (RuleCall)cChannelAssignment_7_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_1_4 = (Assignment)cAlternatives_7_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_1_4_0 = (RuleCall)cTypedefAssignment_7_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_1_5 = (Assignment)cAlternatives_7_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_7_1_5_0 = (RuleCall)cPropertyAssignment_7_1_5.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cInputKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_1 = (Alternatives)cGroup_8_0.eContents().get(1);
		private final Assignment cParameterAssignment_8_0_1_0 = (Assignment)cAlternatives_8_0_1.eContents().get(0);
		private final RuleCall cParameterParameterInputParserRuleCall_8_0_1_0_0 = (RuleCall)cParameterAssignment_8_0_1_0.eContents().get(0);
		private final Group cGroup_8_0_1_1 = (Group)cAlternatives_8_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_0_1_1_0 = (Keyword)cGroup_8_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_0_1_1_1 = (Assignment)cGroup_8_0_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInputParserRuleCall_8_0_1_1_1_0 = (RuleCall)cParameterAssignment_8_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_1_1_2 = (Keyword)cGroup_8_0_1_1.eContents().get(2);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cInoutKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Alternatives cAlternatives_8_1_1 = (Alternatives)cGroup_8_1.eContents().get(1);
		private final Assignment cParameterAssignment_8_1_1_0 = (Assignment)cAlternatives_8_1_1.eContents().get(0);
		private final RuleCall cParameterParameterInoutParserRuleCall_8_1_1_0_0 = (RuleCall)cParameterAssignment_8_1_1_0.eContents().get(0);
		private final Group cGroup_8_1_1_1 = (Group)cAlternatives_8_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_1_1_1_0 = (Keyword)cGroup_8_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_1_1_1_1 = (Assignment)cGroup_8_1_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInoutParserRuleCall_8_1_1_1_1_0 = (RuleCall)cParameterAssignment_8_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_1_1_1_2 = (Keyword)cGroup_8_1_1_1.eContents().get(2);
		private final Group cGroup_8_2 = (Group)cAlternatives_8.eContents().get(2);
		private final Keyword cOutputKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Alternatives cAlternatives_8_2_1 = (Alternatives)cGroup_8_2.eContents().get(1);
		private final Assignment cParameterAssignment_8_2_1_0 = (Assignment)cAlternatives_8_2_1.eContents().get(0);
		private final RuleCall cParameterParameterOutputParserRuleCall_8_2_1_0_0 = (RuleCall)cParameterAssignment_8_2_1_0.eContents().get(0);
		private final Group cGroup_8_2_1_1 = (Group)cAlternatives_8_2_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2_1_1_0 = (Keyword)cGroup_8_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_2_1_1_1 = (Assignment)cGroup_8_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterOutputParserRuleCall_8_2_1_1_1_0 = (RuleCall)cParameterAssignment_8_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2_1_1_2 = (Keyword)cGroup_8_2_1_1.eContents().get(2);
		private final Group cGroup_8_3 = (Group)cAlternatives_8.eContents().get(3);
		private final Keyword cReturnKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Alternatives cAlternatives_8_3_1 = (Alternatives)cGroup_8_3.eContents().get(1);
		private final Assignment cParameterAssignment_8_3_1_0 = (Assignment)cAlternatives_8_3_1.eContents().get(0);
		private final RuleCall cParameterParameterReturnParserRuleCall_8_3_1_0_0 = (RuleCall)cParameterAssignment_8_3_1_0.eContents().get(0);
		private final Group cGroup_8_3_1_1 = (Group)cAlternatives_8_3_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_3_1_1_0 = (Keyword)cGroup_8_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_3_1_1_1 = (Assignment)cGroup_8_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterReturnParserRuleCall_8_3_1_1_1_0 = (RuleCall)cParameterAssignment_8_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3_1_1_2 = (Keyword)cGroup_8_3_1_1.eContents().get(2);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Keyword cPropertyKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Alternatives cAlternatives_9_0_1 = (Alternatives)cGroup_9_0.eContents().get(1);
		private final Assignment cPortAssignment_9_0_1_0 = (Assignment)cAlternatives_9_0_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_9_0_1_0_0 = (RuleCall)cPortAssignment_9_0_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_0_1_1 = (Assignment)cAlternatives_9_0_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_9_0_1_1_0 = (RuleCall)cSignalAssignment_9_0_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_0_1_2 = (Assignment)cAlternatives_9_0_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_9_0_1_2_0 = (RuleCall)cBufferAssignment_9_0_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_0_1_3 = (Assignment)cAlternatives_9_0_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_9_0_1_3_0 = (RuleCall)cChannelAssignment_9_0_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_0_1_4 = (Assignment)cAlternatives_9_0_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_0_1_4_0 = (RuleCall)cTypedefAssignment_9_0_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_0_1_5 = (Assignment)cAlternatives_9_0_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_9_0_1_5_0 = (RuleCall)cPropertyAssignment_9_0_1_5.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cPublicKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Alternatives cAlternatives_9_1_1 = (Alternatives)cGroup_9_1.eContents().get(1);
		private final Assignment cPortAssignment_9_1_1_0 = (Assignment)cAlternatives_9_1_1.eContents().get(0);
		private final RuleCall cPortPortPublicParserRuleCall_9_1_1_0_0 = (RuleCall)cPortAssignment_9_1_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_1_1_1 = (Assignment)cAlternatives_9_1_1.eContents().get(1);
		private final RuleCall cSignalSignalPublicParserRuleCall_9_1_1_1_0 = (RuleCall)cSignalAssignment_9_1_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_1_1_2 = (Assignment)cAlternatives_9_1_1.eContents().get(2);
		private final RuleCall cBufferBufferPublicParserRuleCall_9_1_1_2_0 = (RuleCall)cBufferAssignment_9_1_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_1_1_3 = (Assignment)cAlternatives_9_1_1.eContents().get(3);
		private final RuleCall cChannelChannelPublicParserRuleCall_9_1_1_3_0 = (RuleCall)cChannelAssignment_9_1_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_1_1_4 = (Assignment)cAlternatives_9_1_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_1_1_4_0 = (RuleCall)cTypedefAssignment_9_1_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_1_1_5 = (Assignment)cAlternatives_9_1_1.eContents().get(5);
		private final RuleCall cPropertyVariablePublicParserRuleCall_9_1_1_5_0 = (RuleCall)cPropertyAssignment_9_1_1_5.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cAlternatives_9.eContents().get(2);
		private final Keyword cProtectedKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Alternatives cAlternatives_9_2_1 = (Alternatives)cGroup_9_2.eContents().get(1);
		private final Assignment cPortAssignment_9_2_1_0 = (Assignment)cAlternatives_9_2_1.eContents().get(0);
		private final RuleCall cPortPortProtectedParserRuleCall_9_2_1_0_0 = (RuleCall)cPortAssignment_9_2_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_2_1_1 = (Assignment)cAlternatives_9_2_1.eContents().get(1);
		private final RuleCall cSignalSignalProtectedParserRuleCall_9_2_1_1_0 = (RuleCall)cSignalAssignment_9_2_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_2_1_2 = (Assignment)cAlternatives_9_2_1.eContents().get(2);
		private final RuleCall cBufferBufferProtectedParserRuleCall_9_2_1_2_0 = (RuleCall)cBufferAssignment_9_2_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_2_1_3 = (Assignment)cAlternatives_9_2_1.eContents().get(3);
		private final RuleCall cChannelChannelProtectedParserRuleCall_9_2_1_3_0 = (RuleCall)cChannelAssignment_9_2_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_2_1_4 = (Assignment)cAlternatives_9_2_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_2_1_4_0 = (RuleCall)cTypedefAssignment_9_2_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_2_1_5 = (Assignment)cAlternatives_9_2_1.eContents().get(5);
		private final RuleCall cPropertyVariableProtectedParserRuleCall_9_2_1_5_0 = (RuleCall)cPropertyAssignment_9_2_1_5.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cAlternatives_9.eContents().get(3);
		private final Keyword cPrivateKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Alternatives cAlternatives_9_3_1 = (Alternatives)cGroup_9_3.eContents().get(1);
		private final Assignment cPortAssignment_9_3_1_0 = (Assignment)cAlternatives_9_3_1.eContents().get(0);
		private final RuleCall cPortPortPrivateParserRuleCall_9_3_1_0_0 = (RuleCall)cPortAssignment_9_3_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_3_1_1 = (Assignment)cAlternatives_9_3_1.eContents().get(1);
		private final RuleCall cSignalSignalPrivateParserRuleCall_9_3_1_1_0 = (RuleCall)cSignalAssignment_9_3_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_3_1_2 = (Assignment)cAlternatives_9_3_1.eContents().get(2);
		private final RuleCall cBufferBufferPrivateParserRuleCall_9_3_1_2_0 = (RuleCall)cBufferAssignment_9_3_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_3_1_3 = (Assignment)cAlternatives_9_3_1.eContents().get(3);
		private final RuleCall cChannelChannelPrivateParserRuleCall_9_3_1_3_0 = (RuleCall)cChannelAssignment_9_3_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_3_1_4 = (Assignment)cAlternatives_9_3_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_3_1_4_0 = (RuleCall)cTypedefAssignment_9_3_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_3_1_5 = (Assignment)cAlternatives_9_3_1.eContents().get(5);
		private final RuleCall cPropertyVariablePrivateParserRuleCall_9_3_1_5_0 = (RuleCall)cPropertyAssignment_9_3_1_5.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Alternatives cAlternatives_10_0 = (Alternatives)cAlternatives_10.eContents().get(0);
		private final Group cGroup_10_0_0 = (Group)cAlternatives_10_0.eContents().get(0);
		private final Alternatives cAlternatives_10_0_0_0 = (Alternatives)cGroup_10_0_0.eContents().get(0);
		private final Keyword cRoutineKeyword_10_0_0_0_0 = (Keyword)cAlternatives_10_0_0_0.eContents().get(0);
		private final Keyword cMacroKeyword_10_0_0_0_1 = (Keyword)cAlternatives_10_0_0_0.eContents().get(1);
		private final Assignment cRoutineAssignment_10_0_0_1 = (Assignment)cGroup_10_0_0.eContents().get(1);
		private final RuleCall cRoutineRoutineParserRuleCall_10_0_0_1_0 = (RuleCall)cRoutineAssignment_10_0_0_1.eContents().get(0);
		private final Group cGroup_10_0_1 = (Group)cAlternatives_10_0.eContents().get(1);
		private final Keyword cProcedureKeyword_10_0_1_0 = (Keyword)cGroup_10_0_1.eContents().get(0);
		private final Assignment cProcedureAssignment_10_0_1_1 = (Assignment)cGroup_10_0_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_10_0_1_1_0 = (RuleCall)cProcedureAssignment_10_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_10_1 = (Alternatives)cAlternatives_10.eContents().get(1);
		private final Assignment cRoutineAssignment_10_1_0 = (Assignment)cAlternatives_10_1.eContents().get(0);
		private final RuleCall cRoutineRoutineParserRuleCall_10_1_0_0 = (RuleCall)cRoutineAssignment_10_1_0.eContents().get(0);
		private final Assignment cProcedureAssignment_10_1_1 = (Assignment)cAlternatives_10_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_10_1_1_0 = (RuleCall)cProcedureAssignment_10_1_1.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cRegionAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cRegionStatemachineRegionParserRuleCall_11_0_0 = (RuleCall)cRegionAssignment_11_0.eContents().get(0);
		private final Assignment cRegionAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cRegionStatemachineRegionLiteParserRuleCall_11_1_0 = (RuleCall)cRegionAssignment_11_1.eContents().get(0);
		private final Assignment cExecutionAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cExecutionProcedureExecutionParserRuleCall_12_0 = (RuleCall)cExecutionAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Procedure View Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Procedure fmlInfra::Procedure:
		//	visibility=VisibilityKind?
		//	'procedure' ('<' 'moc:'? ('and' | 'or') '>')?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? (('(' (parameter+=FunctionalParameter (','
		//	parameter+=FunctionalParameter)*)? ')')? ('-->' (parameter+=FormalParameter
		//	| '(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'))?)?
		//	'{' ('@parameter:' ('input' (parameter+=ParameterInput
		//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
		//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
		//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
		//	| '{' parameter+=ParameterReturn+ '}'))*
		//	| (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*) ('@input:' (parameter+=ParameterInput
		//	| '{' parameter+=ParameterInput+ '}')*
		//	| '@inout:' (parameter+=ParameterInout
		//	| '{' parameter+=ParameterInout+ '}')*
		//	| '@output:' (parameter+=ParameterOutput
		//	| '{' parameter+=ParameterOutput+ '}')*
		//	| '@return:' (parameter+=ParameterReturn
		//	| '{' parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	| '@public:' (port+=PortPublic
		//	| signal+=SignalPublic
		//	| buffer+=BufferPublic
		//	| channel+=ChannelPublic
		//	| typedef+=TypeDefinition
		//	| property+=VariablePublic)*
		//	| '@protected:' (port+=PortProtected
		//	| signal+=SignalProtected
		//	| buffer+=BufferProtected
		//	| channel+=ChannelProtected
		//	| typedef+=TypeDefinition
		//	| property+=VariableProtected)*
		//	| '@private:' (port+=PortPrivate
		//	| signal+=SignalPrivate
		//	| buffer+=BufferPrivate
		//	| channel+=ChannelPrivate
		//	| typedef+=TypeDefinition
		//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
		//	| '@procedure:' procedure+=Procedure+)*
		//	| (routine+=Routine | procedure+=Procedure)+) (region+=StatemachineRegion+
		//	| region+=StatemachineRegionLite)?
		//	execution=ProcedureExecution?
		//	//		& ( computation=ModelOfComputation )?
		//	//		& ( interaction=ModelOfInteraction )?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityKind? 'procedure' ('<' 'moc:'? ('and' | 'or') '>')? name=ESIdentifier
		//unrestrictedName=UnrestrictedName? (('(' (parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*)? ')')?
		//('-->' (parameter+=FormalParameter | '(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'))?)? '{'
		//('@parameter:' ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))* |
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*)
		//('@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')* | '@inout:' (parameter+=ParameterInout |
		//'{' parameter+=ParameterInout+ '}')* | '@output:' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')* |
		//'@return:' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port |
		//signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)* | '@public:'
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)* | '@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected |
		//channel+=ChannelProtected | typedef+=TypeDefinition | property+=VariableProtected)* | '@private:' (port+=PortPrivate |
		//signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* |
		//(routine+=Routine | procedure+=Procedure)+) (region+=StatemachineRegion+ | region+=StatemachineRegionLite)?
		//execution=ProcedureExecution? //		& ( computation=ModelOfComputation )?
		////		& ( interaction=ModelOfInteraction )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }
		
		//'procedure'
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//('<' 'moc:'? ('and' | 'or') '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_2_1() { return cMocKeyword_2_1; }
		
		//('and' | 'or')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_0() { return cAndKeyword_2_2_0; }
		
		//'or'
		public Keyword getOrKeyword_2_2_1() { return cOrKeyword_2_2_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//(('(' (parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*)? ')')? ('-->' (parameter+=FormalParameter |
		//'(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'))?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//('(' (parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*)? ')')?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//(parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*)?
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }
		
		//parameter+=FunctionalParameter
		public Assignment getParameterAssignment_5_0_1_0() { return cParameterAssignment_5_0_1_0; }
		
		//FunctionalParameter
		public RuleCall getParameterFunctionalParameterParserRuleCall_5_0_1_0_0() { return cParameterFunctionalParameterParserRuleCall_5_0_1_0_0; }
		
		//(',' parameter+=FunctionalParameter)*
		public Group getGroup_5_0_1_1() { return cGroup_5_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_5_0_1_1_0() { return cCommaKeyword_5_0_1_1_0; }
		
		//parameter+=FunctionalParameter
		public Assignment getParameterAssignment_5_0_1_1_1() { return cParameterAssignment_5_0_1_1_1; }
		
		//FunctionalParameter
		public RuleCall getParameterFunctionalParameterParserRuleCall_5_0_1_1_1_0() { return cParameterFunctionalParameterParserRuleCall_5_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_2() { return cRightParenthesisKeyword_5_0_2; }
		
		//('-->' (parameter+=FormalParameter | '(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'))?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0; }
		
		//(parameter+=FormalParameter | '(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')
		public Alternatives getAlternatives_5_1_1() { return cAlternatives_5_1_1; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_1_1_0() { return cParameterAssignment_5_1_1_0; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_1_1_0_0() { return cParameterFormalParameterParserRuleCall_5_1_1_0_0; }
		
		//'(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'
		public Group getGroup_5_1_1_1() { return cGroup_5_1_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1_1_1_0() { return cLeftParenthesisKeyword_5_1_1_1_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_1_1_1_1() { return cParameterAssignment_5_1_1_1_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_1_1_1_1_0() { return cParameterFormalParameterParserRuleCall_5_1_1_1_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_5_1_1_1_2() { return cGroup_5_1_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_5_1_1_1_2_0() { return cCommaKeyword_5_1_1_1_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_1_1_1_2_1() { return cParameterAssignment_5_1_1_1_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_1_1_1_2_1_0() { return cParameterFormalParameterParserRuleCall_5_1_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_1_1_1_3() { return cRightParenthesisKeyword_5_1_1_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//('@parameter:' ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))* |
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'@parameter:' ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'@parameter:'
		public Keyword getParameterKeyword_7_0_0() { return cParameterKeyword_7_0_0; }
		
		//('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout | '{'
		//parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}') |
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Alternatives getAlternatives_7_0_1() { return cAlternatives_7_0_1; }
		
		//'input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Group getGroup_7_0_1_0() { return cGroup_7_0_1_0; }
		
		//'input'
		public Keyword getInputKeyword_7_0_1_0_0() { return cInputKeyword_7_0_1_0_0; }
		
		//(parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Alternatives getAlternatives_7_0_1_0_1() { return cAlternatives_7_0_1_0_1; }
		
		//parameter+=ParameterInput
		public Assignment getParameterAssignment_7_0_1_0_1_0() { return cParameterAssignment_7_0_1_0_1_0; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_7_0_1_0_1_0_0() { return cParameterParameterInputParserRuleCall_7_0_1_0_1_0_0; }
		
		//'{' parameter+=ParameterInput+ '}'
		public Group getGroup_7_0_1_0_1_1() { return cGroup_7_0_1_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_0_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_0_1_1_0; }
		
		//parameter+=ParameterInput+
		public Assignment getParameterAssignment_7_0_1_0_1_1_1() { return cParameterAssignment_7_0_1_0_1_1_1; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0() { return cParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_0_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_0_1_1_2; }
		
		//'inout' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Group getGroup_7_0_1_1() { return cGroup_7_0_1_1; }
		
		//'inout'
		public Keyword getInoutKeyword_7_0_1_1_0() { return cInoutKeyword_7_0_1_1_0; }
		
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Alternatives getAlternatives_7_0_1_1_1() { return cAlternatives_7_0_1_1_1; }
		
		//parameter+=ParameterInout
		public Assignment getParameterAssignment_7_0_1_1_1_0() { return cParameterAssignment_7_0_1_1_1_0; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0() { return cParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0; }
		
		//'{' parameter+=ParameterInout+ '}'
		public Group getGroup_7_0_1_1_1_1() { return cGroup_7_0_1_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_1_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_1_1_1_0; }
		
		//parameter+=ParameterInout+
		public Assignment getParameterAssignment_7_0_1_1_1_1_1() { return cParameterAssignment_7_0_1_1_1_1_1; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0() { return cParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_1_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_1_1_1_2; }
		
		//'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Group getGroup_7_0_1_2() { return cGroup_7_0_1_2; }
		
		//'output'
		public Keyword getOutputKeyword_7_0_1_2_0() { return cOutputKeyword_7_0_1_2_0; }
		
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Alternatives getAlternatives_7_0_1_2_1() { return cAlternatives_7_0_1_2_1; }
		
		//parameter+=ParameterOutput
		public Assignment getParameterAssignment_7_0_1_2_1_0() { return cParameterAssignment_7_0_1_2_1_0; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0() { return cParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0; }
		
		//'{' parameter+=ParameterOutput+ '}'
		public Group getGroup_7_0_1_2_1_1() { return cGroup_7_0_1_2_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_2_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_2_1_1_0; }
		
		//parameter+=ParameterOutput+
		public Assignment getParameterAssignment_7_0_1_2_1_1_1() { return cParameterAssignment_7_0_1_2_1_1_1; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0() { return cParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_2_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_2_1_1_2; }
		
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Group getGroup_7_0_1_3() { return cGroup_7_0_1_3; }
		
		//'return'
		public Keyword getReturnKeyword_7_0_1_3_0() { return cReturnKeyword_7_0_1_3_0; }
		
		//(parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Alternatives getAlternatives_7_0_1_3_1() { return cAlternatives_7_0_1_3_1; }
		
		//parameter+=ParameterReturn
		public Assignment getParameterAssignment_7_0_1_3_1_0() { return cParameterAssignment_7_0_1_3_1_0; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0() { return cParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0; }
		
		//'{' parameter+=ParameterReturn+ '}'
		public Group getGroup_7_0_1_3_1_1() { return cGroup_7_0_1_3_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_3_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_3_1_1_0; }
		
		//parameter+=ParameterReturn+
		public Assignment getParameterAssignment_7_0_1_3_1_1_1() { return cParameterAssignment_7_0_1_3_1_1_1; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0() { return cParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_3_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_3_1_1_2; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//port+=Port
		public Assignment getPortAssignment_7_1_0() { return cPortAssignment_7_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_7_1_0_0() { return cPortPortParserRuleCall_7_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_7_1_1() { return cSignalAssignment_7_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_7_1_1_0() { return cSignalSignalParserRuleCall_7_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_7_1_2() { return cBufferAssignment_7_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_7_1_2_0() { return cBufferBufferParserRuleCall_7_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_7_1_3() { return cChannelAssignment_7_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_7_1_3_0() { return cChannelChannelParserRuleCall_7_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_1_4() { return cTypedefAssignment_7_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_7_1_5() { return cPropertyAssignment_7_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_1_5_0() { return cPropertyVariableParserRuleCall_7_1_5_0; }
		
		//('@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')* | '@inout:' (parameter+=ParameterInout |
		//'{' parameter+=ParameterInout+ '}')* | '@output:' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')* |
		//'@return:' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')*
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'@input:'
		public Keyword getInputKeyword_8_0_0() { return cInputKeyword_8_0_0; }
		
		//(parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')*
		public Alternatives getAlternatives_8_0_1() { return cAlternatives_8_0_1; }
		
		//parameter+=ParameterInput
		public Assignment getParameterAssignment_8_0_1_0() { return cParameterAssignment_8_0_1_0; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_8_0_1_0_0() { return cParameterParameterInputParserRuleCall_8_0_1_0_0; }
		
		//'{' parameter+=ParameterInput+ '}'
		public Group getGroup_8_0_1_1() { return cGroup_8_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0_1_1_0() { return cLeftCurlyBracketKeyword_8_0_1_1_0; }
		
		//parameter+=ParameterInput+
		public Assignment getParameterAssignment_8_0_1_1_1() { return cParameterAssignment_8_0_1_1_1; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_8_0_1_1_1_0() { return cParameterParameterInputParserRuleCall_8_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_0_1_1_2() { return cRightCurlyBracketKeyword_8_0_1_1_2; }
		
		//'@inout:' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'@inout:'
		public Keyword getInoutKeyword_8_1_0() { return cInoutKeyword_8_1_0; }
		
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')*
		public Alternatives getAlternatives_8_1_1() { return cAlternatives_8_1_1; }
		
		//parameter+=ParameterInout
		public Assignment getParameterAssignment_8_1_1_0() { return cParameterAssignment_8_1_1_0; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_8_1_1_0_0() { return cParameterParameterInoutParserRuleCall_8_1_1_0_0; }
		
		//'{' parameter+=ParameterInout+ '}'
		public Group getGroup_8_1_1_1() { return cGroup_8_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1_1_1_0() { return cLeftCurlyBracketKeyword_8_1_1_1_0; }
		
		//parameter+=ParameterInout+
		public Assignment getParameterAssignment_8_1_1_1_1() { return cParameterAssignment_8_1_1_1_1; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_8_1_1_1_1_0() { return cParameterParameterInoutParserRuleCall_8_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1_1_1_2() { return cRightCurlyBracketKeyword_8_1_1_1_2; }
		
		//'@output:' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//'@output:'
		public Keyword getOutputKeyword_8_2_0() { return cOutputKeyword_8_2_0; }
		
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')*
		public Alternatives getAlternatives_8_2_1() { return cAlternatives_8_2_1; }
		
		//parameter+=ParameterOutput
		public Assignment getParameterAssignment_8_2_1_0() { return cParameterAssignment_8_2_1_0; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_8_2_1_0_0() { return cParameterParameterOutputParserRuleCall_8_2_1_0_0; }
		
		//'{' parameter+=ParameterOutput+ '}'
		public Group getGroup_8_2_1_1() { return cGroup_8_2_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2_1_1_0() { return cLeftCurlyBracketKeyword_8_2_1_1_0; }
		
		//parameter+=ParameterOutput+
		public Assignment getParameterAssignment_8_2_1_1_1() { return cParameterAssignment_8_2_1_1_1; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_8_2_1_1_1_0() { return cParameterParameterOutputParserRuleCall_8_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2_1_1_2() { return cRightCurlyBracketKeyword_8_2_1_1_2; }
		
		//'@return:' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//'@return:'
		public Keyword getReturnKeyword_8_3_0() { return cReturnKeyword_8_3_0; }
		
		//(parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*
		public Alternatives getAlternatives_8_3_1() { return cAlternatives_8_3_1; }
		
		//parameter+=ParameterReturn
		public Assignment getParameterAssignment_8_3_1_0() { return cParameterAssignment_8_3_1_0; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_8_3_1_0_0() { return cParameterParameterReturnParserRuleCall_8_3_1_0_0; }
		
		//'{' parameter+=ParameterReturn+ '}'
		public Group getGroup_8_3_1_1() { return cGroup_8_3_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_3_1_1_0() { return cLeftCurlyBracketKeyword_8_3_1_1_0; }
		
		//parameter+=ParameterReturn+
		public Assignment getParameterAssignment_8_3_1_1_1() { return cParameterAssignment_8_3_1_1_1; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_8_3_1_1_1_0() { return cParameterParameterReturnParserRuleCall_8_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3_1_1_2() { return cRightCurlyBracketKeyword_8_3_1_1_2; }
		
		//('@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)* | '@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic |
		//channel+=ChannelPublic | typedef+=TypeDefinition | property+=VariablePublic)* | '@protected:' (port+=PortProtected |
		//signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected | typedef+=TypeDefinition |
		//property+=VariableProtected)* | '@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate |
		//channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//'@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)*
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//'@property:'
		public Keyword getPropertyKeyword_9_0_0() { return cPropertyKeyword_9_0_0; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_9_0_1() { return cAlternatives_9_0_1; }
		
		//port+=Port
		public Assignment getPortAssignment_9_0_1_0() { return cPortAssignment_9_0_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_9_0_1_0_0() { return cPortPortParserRuleCall_9_0_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_9_0_1_1() { return cSignalAssignment_9_0_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_9_0_1_1_0() { return cSignalSignalParserRuleCall_9_0_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_9_0_1_2() { return cBufferAssignment_9_0_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_9_0_1_2_0() { return cBufferBufferParserRuleCall_9_0_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_9_0_1_3() { return cChannelAssignment_9_0_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_9_0_1_3_0() { return cChannelChannelParserRuleCall_9_0_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_0_1_4() { return cTypedefAssignment_9_0_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_0_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_0_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_9_0_1_5() { return cPropertyAssignment_9_0_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_9_0_1_5_0() { return cPropertyVariableParserRuleCall_9_0_1_5_0; }
		
		//'@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic |
		//typedef+=TypeDefinition | property+=VariablePublic)*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//'@public:'
		public Keyword getPublicKeyword_9_1_0() { return cPublicKeyword_9_1_0; }
		
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)*
		public Alternatives getAlternatives_9_1_1() { return cAlternatives_9_1_1; }
		
		//port+=PortPublic
		public Assignment getPortAssignment_9_1_1_0() { return cPortAssignment_9_1_1_0; }
		
		//PortPublic
		public RuleCall getPortPortPublicParserRuleCall_9_1_1_0_0() { return cPortPortPublicParserRuleCall_9_1_1_0_0; }
		
		//signal+=SignalPublic
		public Assignment getSignalAssignment_9_1_1_1() { return cSignalAssignment_9_1_1_1; }
		
		//SignalPublic
		public RuleCall getSignalSignalPublicParserRuleCall_9_1_1_1_0() { return cSignalSignalPublicParserRuleCall_9_1_1_1_0; }
		
		//buffer+=BufferPublic
		public Assignment getBufferAssignment_9_1_1_2() { return cBufferAssignment_9_1_1_2; }
		
		//BufferPublic
		public RuleCall getBufferBufferPublicParserRuleCall_9_1_1_2_0() { return cBufferBufferPublicParserRuleCall_9_1_1_2_0; }
		
		//channel+=ChannelPublic
		public Assignment getChannelAssignment_9_1_1_3() { return cChannelAssignment_9_1_1_3; }
		
		//ChannelPublic
		public RuleCall getChannelChannelPublicParserRuleCall_9_1_1_3_0() { return cChannelChannelPublicParserRuleCall_9_1_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_1_1_4() { return cTypedefAssignment_9_1_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_1_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_1_1_4_0; }
		
		//property+=VariablePublic
		public Assignment getPropertyAssignment_9_1_1_5() { return cPropertyAssignment_9_1_1_5; }
		
		//VariablePublic
		public RuleCall getPropertyVariablePublicParserRuleCall_9_1_1_5_0() { return cPropertyVariablePublicParserRuleCall_9_1_1_5_0; }
		
		//'@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'@protected:'
		public Keyword getProtectedKeyword_9_2_0() { return cProtectedKeyword_9_2_0; }
		
		//(port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Alternatives getAlternatives_9_2_1() { return cAlternatives_9_2_1; }
		
		//port+=PortProtected
		public Assignment getPortAssignment_9_2_1_0() { return cPortAssignment_9_2_1_0; }
		
		//PortProtected
		public RuleCall getPortPortProtectedParserRuleCall_9_2_1_0_0() { return cPortPortProtectedParserRuleCall_9_2_1_0_0; }
		
		//signal+=SignalProtected
		public Assignment getSignalAssignment_9_2_1_1() { return cSignalAssignment_9_2_1_1; }
		
		//SignalProtected
		public RuleCall getSignalSignalProtectedParserRuleCall_9_2_1_1_0() { return cSignalSignalProtectedParserRuleCall_9_2_1_1_0; }
		
		//buffer+=BufferProtected
		public Assignment getBufferAssignment_9_2_1_2() { return cBufferAssignment_9_2_1_2; }
		
		//BufferProtected
		public RuleCall getBufferBufferProtectedParserRuleCall_9_2_1_2_0() { return cBufferBufferProtectedParserRuleCall_9_2_1_2_0; }
		
		//channel+=ChannelProtected
		public Assignment getChannelAssignment_9_2_1_3() { return cChannelAssignment_9_2_1_3; }
		
		//ChannelProtected
		public RuleCall getChannelChannelProtectedParserRuleCall_9_2_1_3_0() { return cChannelChannelProtectedParserRuleCall_9_2_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_2_1_4() { return cTypedefAssignment_9_2_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_2_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_2_1_4_0; }
		
		//property+=VariableProtected
		public Assignment getPropertyAssignment_9_2_1_5() { return cPropertyAssignment_9_2_1_5; }
		
		//VariableProtected
		public RuleCall getPropertyVariableProtectedParserRuleCall_9_2_1_5_0() { return cPropertyVariableProtectedParserRuleCall_9_2_1_5_0; }
		
		//'@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate |
		//typedef+=TypeDefinition | property+=VariablePrivate)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//'@private:'
		public Keyword getPrivateKeyword_9_3_0() { return cPrivateKeyword_9_3_0; }
		
		//(port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*
		public Alternatives getAlternatives_9_3_1() { return cAlternatives_9_3_1; }
		
		//port+=PortPrivate
		public Assignment getPortAssignment_9_3_1_0() { return cPortAssignment_9_3_1_0; }
		
		//PortPrivate
		public RuleCall getPortPortPrivateParserRuleCall_9_3_1_0_0() { return cPortPortPrivateParserRuleCall_9_3_1_0_0; }
		
		//signal+=SignalPrivate
		public Assignment getSignalAssignment_9_3_1_1() { return cSignalAssignment_9_3_1_1; }
		
		//SignalPrivate
		public RuleCall getSignalSignalPrivateParserRuleCall_9_3_1_1_0() { return cSignalSignalPrivateParserRuleCall_9_3_1_1_0; }
		
		//buffer+=BufferPrivate
		public Assignment getBufferAssignment_9_3_1_2() { return cBufferAssignment_9_3_1_2; }
		
		//BufferPrivate
		public RuleCall getBufferBufferPrivateParserRuleCall_9_3_1_2_0() { return cBufferBufferPrivateParserRuleCall_9_3_1_2_0; }
		
		//channel+=ChannelPrivate
		public Assignment getChannelAssignment_9_3_1_3() { return cChannelAssignment_9_3_1_3; }
		
		//ChannelPrivate
		public RuleCall getChannelChannelPrivateParserRuleCall_9_3_1_3_0() { return cChannelChannelPrivateParserRuleCall_9_3_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_3_1_4() { return cTypedefAssignment_9_3_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_3_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_3_1_4_0; }
		
		//property+=VariablePrivate
		public Assignment getPropertyAssignment_9_3_1_5() { return cPropertyAssignment_9_3_1_5; }
		
		//VariablePrivate
		public RuleCall getPropertyVariablePrivateParserRuleCall_9_3_1_5_0() { return cPropertyVariablePrivateParserRuleCall_9_3_1_5_0; }
		
		//((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* | (routine+=Routine |
		//procedure+=Procedure)+)
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//(('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)*
		public Alternatives getAlternatives_10_0() { return cAlternatives_10_0; }
		
		//('@routine:' | '@macro:') routine+=Routine+
		public Group getGroup_10_0_0() { return cGroup_10_0_0; }
		
		//('@routine:' | '@macro:')
		public Alternatives getAlternatives_10_0_0_0() { return cAlternatives_10_0_0_0; }
		
		//'@routine:'
		public Keyword getRoutineKeyword_10_0_0_0_0() { return cRoutineKeyword_10_0_0_0_0; }
		
		//'@macro:'
		public Keyword getMacroKeyword_10_0_0_0_1() { return cMacroKeyword_10_0_0_0_1; }
		
		//routine+=Routine+
		public Assignment getRoutineAssignment_10_0_0_1() { return cRoutineAssignment_10_0_0_1; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_10_0_0_1_0() { return cRoutineRoutineParserRuleCall_10_0_0_1_0; }
		
		//'@procedure:' procedure+=Procedure+
		public Group getGroup_10_0_1() { return cGroup_10_0_1; }
		
		//'@procedure:'
		public Keyword getProcedureKeyword_10_0_1_0() { return cProcedureKeyword_10_0_1_0; }
		
		//procedure+=Procedure+
		public Assignment getProcedureAssignment_10_0_1_1() { return cProcedureAssignment_10_0_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_10_0_1_1_0() { return cProcedureProcedureParserRuleCall_10_0_1_1_0; }
		
		//(routine+=Routine | procedure+=Procedure)+
		public Alternatives getAlternatives_10_1() { return cAlternatives_10_1; }
		
		//routine+=Routine
		public Assignment getRoutineAssignment_10_1_0() { return cRoutineAssignment_10_1_0; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_10_1_0_0() { return cRoutineRoutineParserRuleCall_10_1_0_0; }
		
		//procedure+=Procedure
		public Assignment getProcedureAssignment_10_1_1() { return cProcedureAssignment_10_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_10_1_1_0() { return cProcedureProcedureParserRuleCall_10_1_1_0; }
		
		//(region+=StatemachineRegion+ | region+=StatemachineRegionLite)?
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//region+=StatemachineRegion+
		public Assignment getRegionAssignment_11_0() { return cRegionAssignment_11_0; }
		
		//StatemachineRegion
		public RuleCall getRegionStatemachineRegionParserRuleCall_11_0_0() { return cRegionStatemachineRegionParserRuleCall_11_0_0; }
		
		//region+=StatemachineRegionLite
		public Assignment getRegionAssignment_11_1() { return cRegionAssignment_11_1; }
		
		//StatemachineRegionLite
		public RuleCall getRegionStatemachineRegionLiteParserRuleCall_11_1_0() { return cRegionStatemachineRegionLiteParserRuleCall_11_1_0; }
		
		//execution=ProcedureExecution?
		public Assignment getExecutionAssignment_12() { return cExecutionAssignment_12; }
		
		//ProcedureExecution
		public RuleCall getExecutionProcedureExecutionParserRuleCall_12_0() { return cExecutionProcedureExecutionParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class ProcedureExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProcedureExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelOfExecutionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cScheduleKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cScheduleRoutineAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cScheduleRoutineMoeRoutineParserRuleCall_2_0_1_0 = (RuleCall)cScheduleRoutineAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cRunKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRunRoutineAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRunRoutineMoeRoutineParserRuleCall_2_1_1_0 = (RuleCall)cRunRoutineAssignment_2_1_1.eContents().get(0);
		
		//ProcedureExecution fmlInfra::ModelOfExecution:
		//	{fmlInfra::ModelOfExecution} '@moe:'? (('@schedule' scheduleRoutine=moeRoutine)?
		//	& ('@run' runRoutine=moeRoutine)?)
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ModelOfExecution} '@moe:'? (('@schedule' scheduleRoutine=moeRoutine)? & ('@run' runRoutine=moeRoutine)?)
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ModelOfExecution}
		public Action getModelOfExecutionAction_0() { return cModelOfExecutionAction_0; }
		
		//'@moe:'?
		public Keyword getMoeKeyword_1() { return cMoeKeyword_1; }
		
		//(('@schedule' scheduleRoutine=moeRoutine)? & ('@run' runRoutine=moeRoutine)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('@schedule' scheduleRoutine=moeRoutine)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'@schedule'
		public Keyword getScheduleKeyword_2_0_0() { return cScheduleKeyword_2_0_0; }
		
		//scheduleRoutine=moeRoutine
		public Assignment getScheduleRoutineAssignment_2_0_1() { return cScheduleRoutineAssignment_2_0_1; }
		
		//moeRoutine
		public RuleCall getScheduleRoutineMoeRoutineParserRuleCall_2_0_1_0() { return cScheduleRoutineMoeRoutineParserRuleCall_2_0_1_0; }
		
		//('@run' runRoutine=moeRoutine)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'@run'
		public Keyword getRunKeyword_2_1_0() { return cRunKeyword_2_1_0; }
		
		//runRoutine=moeRoutine
		public Assignment getRunRoutineAssignment_2_1_1() { return cRunRoutineAssignment_2_1_1; }
		
		//moeRoutine
		public RuleCall getRunRoutineMoeRoutineParserRuleCall_2_1_1_0() { return cRunRoutineMoeRoutineParserRuleCall_2_1_1_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Behavior");
		private final RuleCall cStatemachineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Behavior View Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Behavior fmlInfra::Behavior:
		//	Statemachine
		@Override public ParserRule getRule() { return rule; }
		
		//Statemachine
		public RuleCall getStatemachineParserRuleCall() { return cStatemachineParserRuleCall; }
	}
	public class MoeBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.MoeBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLocalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cPortAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cPortPortPrivateParserRuleCall_1_1_0_0 = (RuleCall)cPortAssignment_1_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cSignalSignalPrivateParserRuleCall_1_1_1_0 = (RuleCall)cSignalAssignment_1_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cBufferBufferPrivateParserRuleCall_1_1_2_0 = (RuleCall)cBufferAssignment_1_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cChannelChannelPrivateParserRuleCall_1_1_3_0 = (RuleCall)cChannelAssignment_1_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_1_1_4_0 = (RuleCall)cTypedefAssignment_1_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cPropertyVariablePrivateParserRuleCall_1_1_5_0 = (RuleCall)cPropertyAssignment_1_1_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cExecutionAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cExecutionModelOfExecutionParserRuleCall_2_0_0 = (RuleCall)cExecutionAssignment_2_0.eContents().get(0);
		private final Assignment cInteractionAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cInteractionModelOfInteractionParserRuleCall_2_1_0 = (RuleCall)cInteractionAssignment_2_1.eContents().get(0);
		
		//MoeBehavior fmlInfra::Behavior:
		//	{fmlInfra::Behavior} ('@local:' (port+=PortPrivate
		//	| signal+=SignalPrivate
		//	| buffer+=BufferPrivate
		//	| channel+=ChannelPrivate
		//	| typedef+=TypeDefinition
		//	| property+=VariablePrivate)*)? (execution=ModelOfExecution?
		//	//		& ( computation=ModelOfComputation )?
		//	& interaction=ModelOfInteraction?)
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Behavior} ('@local:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate |
		//channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)? (execution=ModelOfExecution? //		& ( computation=ModelOfComputation )?
		//& interaction=ModelOfInteraction?)
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Behavior}
		public Action getBehaviorAction_0() { return cBehaviorAction_0; }
		
		//('@local:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate |
		//typedef+=TypeDefinition | property+=VariablePrivate)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@local:'
		public Keyword getLocalKeyword_1_0() { return cLocalKeyword_1_0; }
		
		//(port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//port+=PortPrivate
		public Assignment getPortAssignment_1_1_0() { return cPortAssignment_1_1_0; }
		
		//PortPrivate
		public RuleCall getPortPortPrivateParserRuleCall_1_1_0_0() { return cPortPortPrivateParserRuleCall_1_1_0_0; }
		
		//signal+=SignalPrivate
		public Assignment getSignalAssignment_1_1_1() { return cSignalAssignment_1_1_1; }
		
		//SignalPrivate
		public RuleCall getSignalSignalPrivateParserRuleCall_1_1_1_0() { return cSignalSignalPrivateParserRuleCall_1_1_1_0; }
		
		//buffer+=BufferPrivate
		public Assignment getBufferAssignment_1_1_2() { return cBufferAssignment_1_1_2; }
		
		//BufferPrivate
		public RuleCall getBufferBufferPrivateParserRuleCall_1_1_2_0() { return cBufferBufferPrivateParserRuleCall_1_1_2_0; }
		
		//channel+=ChannelPrivate
		public Assignment getChannelAssignment_1_1_3() { return cChannelAssignment_1_1_3; }
		
		//ChannelPrivate
		public RuleCall getChannelChannelPrivateParserRuleCall_1_1_3_0() { return cChannelChannelPrivateParserRuleCall_1_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_1_1_4() { return cTypedefAssignment_1_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_1_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_1_1_4_0; }
		
		//property+=VariablePrivate
		public Assignment getPropertyAssignment_1_1_5() { return cPropertyAssignment_1_1_5; }
		
		//VariablePrivate
		public RuleCall getPropertyVariablePrivateParserRuleCall_1_1_5_0() { return cPropertyVariablePrivateParserRuleCall_1_1_5_0; }
		
		//(execution=ModelOfExecution? //		& ( computation=ModelOfComputation )?
		//& interaction=ModelOfInteraction?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//execution=ModelOfExecution?
		public Assignment getExecutionAssignment_2_0() { return cExecutionAssignment_2_0; }
		
		//ModelOfExecution
		public RuleCall getExecutionModelOfExecutionParserRuleCall_2_0_0() { return cExecutionModelOfExecutionParserRuleCall_2_0_0; }
		
		//interaction=ModelOfInteraction?
		public Assignment getInteractionAssignment_2_1() { return cInteractionAssignment_2_1; }
		
		//ModelOfInteraction
		public RuleCall getInteractionModelOfInteractionParserRuleCall_2_1_0() { return cInteractionModelOfInteractionParserRuleCall_2_1_0; }
	}
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatemachineAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cVisibilityAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0_0 = (RuleCall)cVisibilityAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cUnorderedGroup_1.eContents().get(1);
		private final Assignment cTimedAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTimedTimedKeyword_1_1_0_0 = (Keyword)cTimedAssignment_1_1_0.eContents().get(0);
		private final Assignment cInput_enabledAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cInput_enabledInput_enabledKeyword_1_1_1_0 = (Keyword)cInput_enabledAssignment_1_1_1.eContents().get(0);
		private final Assignment cDesignAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cDesignDesignKindEnumRuleCall_1_2_0 = (RuleCall)cDesignAssignment_1_2.eContents().get(0);
		private final Keyword cStatemachineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cMocKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Keyword cOrKeyword_3_2_0 = (Keyword)cAlternatives_3_2.eContents().get(0);
		private final Keyword cAndKeyword_3_2_1 = (Keyword)cAlternatives_3_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0 = (RuleCall)cUnrestrictedNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cParameterKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1 = (Alternatives)cGroup_7_0.eContents().get(1);
		private final Group cGroup_7_0_1_0 = (Group)cAlternatives_7_0_1.eContents().get(0);
		private final Keyword cInputKeyword_7_0_1_0_0 = (Keyword)cGroup_7_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_0_1 = (Alternatives)cGroup_7_0_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_0_1_0 = (Assignment)cAlternatives_7_0_1_0_1.eContents().get(0);
		private final RuleCall cParameterParameterInputParserRuleCall_7_0_1_0_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_0_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_0_1_1 = (Group)cAlternatives_7_0_1_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_0_1_1_0 = (Keyword)cGroup_7_0_1_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_0_1_1_1 = (Assignment)cGroup_7_0_1_0_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_0_1_1_2 = (Keyword)cGroup_7_0_1_0_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_1 = (Group)cAlternatives_7_0_1.eContents().get(1);
		private final Keyword cInoutKeyword_7_0_1_1_0 = (Keyword)cGroup_7_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_1_1 = (Alternatives)cGroup_7_0_1_1.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_1_1_0 = (Assignment)cAlternatives_7_0_1_1_1.eContents().get(0);
		private final RuleCall cParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_1_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_1_1_1 = (Group)cAlternatives_7_0_1_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_1_1_1_0 = (Keyword)cGroup_7_0_1_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_1_1_1_1 = (Assignment)cGroup_7_0_1_1_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_1_1_1_2 = (Keyword)cGroup_7_0_1_1_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_2 = (Group)cAlternatives_7_0_1.eContents().get(2);
		private final Keyword cOutputKeyword_7_0_1_2_0 = (Keyword)cGroup_7_0_1_2.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_2_1 = (Alternatives)cGroup_7_0_1_2.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_2_1_0 = (Assignment)cAlternatives_7_0_1_2_1.eContents().get(0);
		private final RuleCall cParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_2_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_2_1_1 = (Group)cAlternatives_7_0_1_2_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_2_1_1_0 = (Keyword)cGroup_7_0_1_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_2_1_1_1 = (Assignment)cGroup_7_0_1_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_2_1_1_2 = (Keyword)cGroup_7_0_1_2_1_1.eContents().get(2);
		private final Group cGroup_7_0_1_3 = (Group)cAlternatives_7_0_1.eContents().get(3);
		private final Keyword cReturnKeyword_7_0_1_3_0 = (Keyword)cGroup_7_0_1_3.eContents().get(0);
		private final Alternatives cAlternatives_7_0_1_3_1 = (Alternatives)cGroup_7_0_1_3.eContents().get(1);
		private final Assignment cParameterAssignment_7_0_1_3_1_0 = (Assignment)cAlternatives_7_0_1_3_1.eContents().get(0);
		private final RuleCall cParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0 = (RuleCall)cParameterAssignment_7_0_1_3_1_0.eContents().get(0);
		private final Group cGroup_7_0_1_3_1_1 = (Group)cAlternatives_7_0_1_3_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1_3_1_1_0 = (Keyword)cGroup_7_0_1_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_7_0_1_3_1_1_1 = (Assignment)cGroup_7_0_1_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0 = (RuleCall)cParameterAssignment_7_0_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_1_3_1_1_2 = (Keyword)cGroup_7_0_1_3_1_1.eContents().get(2);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cAlternatives_7.eContents().get(1);
		private final Assignment cPortAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_7_1_0_0 = (RuleCall)cPortAssignment_7_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_7_1_1_0 = (RuleCall)cSignalAssignment_7_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_7_1_2 = (Assignment)cAlternatives_7_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_7_1_2_0 = (RuleCall)cBufferAssignment_7_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_7_1_3 = (Assignment)cAlternatives_7_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_7_1_3_0 = (RuleCall)cChannelAssignment_7_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_7_1_4 = (Assignment)cAlternatives_7_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_7_1_4_0 = (RuleCall)cTypedefAssignment_7_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_7_1_5 = (Assignment)cAlternatives_7_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_7_1_5_0 = (RuleCall)cPropertyAssignment_7_1_5.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cInputKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_1 = (Alternatives)cGroup_8_0.eContents().get(1);
		private final Assignment cParameterAssignment_8_0_1_0 = (Assignment)cAlternatives_8_0_1.eContents().get(0);
		private final RuleCall cParameterParameterInputParserRuleCall_8_0_1_0_0 = (RuleCall)cParameterAssignment_8_0_1_0.eContents().get(0);
		private final Group cGroup_8_0_1_1 = (Group)cAlternatives_8_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_0_1_1_0 = (Keyword)cGroup_8_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_0_1_1_1 = (Assignment)cGroup_8_0_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInputParserRuleCall_8_0_1_1_1_0 = (RuleCall)cParameterAssignment_8_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_1_1_2 = (Keyword)cGroup_8_0_1_1.eContents().get(2);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cInoutKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Alternatives cAlternatives_8_1_1 = (Alternatives)cGroup_8_1.eContents().get(1);
		private final Assignment cParameterAssignment_8_1_1_0 = (Assignment)cAlternatives_8_1_1.eContents().get(0);
		private final RuleCall cParameterParameterInoutParserRuleCall_8_1_1_0_0 = (RuleCall)cParameterAssignment_8_1_1_0.eContents().get(0);
		private final Group cGroup_8_1_1_1 = (Group)cAlternatives_8_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_1_1_1_0 = (Keyword)cGroup_8_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_1_1_1_1 = (Assignment)cGroup_8_1_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInoutParserRuleCall_8_1_1_1_1_0 = (RuleCall)cParameterAssignment_8_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_1_1_1_2 = (Keyword)cGroup_8_1_1_1.eContents().get(2);
		private final Group cGroup_8_2 = (Group)cAlternatives_8.eContents().get(2);
		private final Keyword cOutputKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Alternatives cAlternatives_8_2_1 = (Alternatives)cGroup_8_2.eContents().get(1);
		private final Assignment cParameterAssignment_8_2_1_0 = (Assignment)cAlternatives_8_2_1.eContents().get(0);
		private final RuleCall cParameterParameterOutputParserRuleCall_8_2_1_0_0 = (RuleCall)cParameterAssignment_8_2_1_0.eContents().get(0);
		private final Group cGroup_8_2_1_1 = (Group)cAlternatives_8_2_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_2_1_1_0 = (Keyword)cGroup_8_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_2_1_1_1 = (Assignment)cGroup_8_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterOutputParserRuleCall_8_2_1_1_1_0 = (RuleCall)cParameterAssignment_8_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2_1_1_2 = (Keyword)cGroup_8_2_1_1.eContents().get(2);
		private final Group cGroup_8_3 = (Group)cAlternatives_8.eContents().get(3);
		private final Keyword cReturnKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Alternatives cAlternatives_8_3_1 = (Alternatives)cGroup_8_3.eContents().get(1);
		private final Assignment cParameterAssignment_8_3_1_0 = (Assignment)cAlternatives_8_3_1.eContents().get(0);
		private final RuleCall cParameterParameterReturnParserRuleCall_8_3_1_0_0 = (RuleCall)cParameterAssignment_8_3_1_0.eContents().get(0);
		private final Group cGroup_8_3_1_1 = (Group)cAlternatives_8_3_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8_3_1_1_0 = (Keyword)cGroup_8_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_8_3_1_1_1 = (Assignment)cGroup_8_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterReturnParserRuleCall_8_3_1_1_1_0 = (RuleCall)cParameterAssignment_8_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3_1_1_2 = (Keyword)cGroup_8_3_1_1.eContents().get(2);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Keyword cPropertyKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Alternatives cAlternatives_9_0_1 = (Alternatives)cGroup_9_0.eContents().get(1);
		private final Assignment cPortAssignment_9_0_1_0 = (Assignment)cAlternatives_9_0_1.eContents().get(0);
		private final RuleCall cPortPortParserRuleCall_9_0_1_0_0 = (RuleCall)cPortAssignment_9_0_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_0_1_1 = (Assignment)cAlternatives_9_0_1.eContents().get(1);
		private final RuleCall cSignalSignalParserRuleCall_9_0_1_1_0 = (RuleCall)cSignalAssignment_9_0_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_0_1_2 = (Assignment)cAlternatives_9_0_1.eContents().get(2);
		private final RuleCall cBufferBufferParserRuleCall_9_0_1_2_0 = (RuleCall)cBufferAssignment_9_0_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_0_1_3 = (Assignment)cAlternatives_9_0_1.eContents().get(3);
		private final RuleCall cChannelChannelParserRuleCall_9_0_1_3_0 = (RuleCall)cChannelAssignment_9_0_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_0_1_4 = (Assignment)cAlternatives_9_0_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_0_1_4_0 = (RuleCall)cTypedefAssignment_9_0_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_0_1_5 = (Assignment)cAlternatives_9_0_1.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_9_0_1_5_0 = (RuleCall)cPropertyAssignment_9_0_1_5.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cPublicKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Alternatives cAlternatives_9_1_1 = (Alternatives)cGroup_9_1.eContents().get(1);
		private final Assignment cPortAssignment_9_1_1_0 = (Assignment)cAlternatives_9_1_1.eContents().get(0);
		private final RuleCall cPortPortPublicParserRuleCall_9_1_1_0_0 = (RuleCall)cPortAssignment_9_1_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_1_1_1 = (Assignment)cAlternatives_9_1_1.eContents().get(1);
		private final RuleCall cSignalSignalPublicParserRuleCall_9_1_1_1_0 = (RuleCall)cSignalAssignment_9_1_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_1_1_2 = (Assignment)cAlternatives_9_1_1.eContents().get(2);
		private final RuleCall cBufferBufferPublicParserRuleCall_9_1_1_2_0 = (RuleCall)cBufferAssignment_9_1_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_1_1_3 = (Assignment)cAlternatives_9_1_1.eContents().get(3);
		private final RuleCall cChannelChannelPublicParserRuleCall_9_1_1_3_0 = (RuleCall)cChannelAssignment_9_1_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_1_1_4 = (Assignment)cAlternatives_9_1_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_1_1_4_0 = (RuleCall)cTypedefAssignment_9_1_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_1_1_5 = (Assignment)cAlternatives_9_1_1.eContents().get(5);
		private final RuleCall cPropertyVariablePublicParserRuleCall_9_1_1_5_0 = (RuleCall)cPropertyAssignment_9_1_1_5.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cAlternatives_9.eContents().get(2);
		private final Keyword cProtectedKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Alternatives cAlternatives_9_2_1 = (Alternatives)cGroup_9_2.eContents().get(1);
		private final Assignment cPortAssignment_9_2_1_0 = (Assignment)cAlternatives_9_2_1.eContents().get(0);
		private final RuleCall cPortPortProtectedParserRuleCall_9_2_1_0_0 = (RuleCall)cPortAssignment_9_2_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_2_1_1 = (Assignment)cAlternatives_9_2_1.eContents().get(1);
		private final RuleCall cSignalSignalProtectedParserRuleCall_9_2_1_1_0 = (RuleCall)cSignalAssignment_9_2_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_2_1_2 = (Assignment)cAlternatives_9_2_1.eContents().get(2);
		private final RuleCall cBufferBufferProtectedParserRuleCall_9_2_1_2_0 = (RuleCall)cBufferAssignment_9_2_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_2_1_3 = (Assignment)cAlternatives_9_2_1.eContents().get(3);
		private final RuleCall cChannelChannelProtectedParserRuleCall_9_2_1_3_0 = (RuleCall)cChannelAssignment_9_2_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_2_1_4 = (Assignment)cAlternatives_9_2_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_2_1_4_0 = (RuleCall)cTypedefAssignment_9_2_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_2_1_5 = (Assignment)cAlternatives_9_2_1.eContents().get(5);
		private final RuleCall cPropertyVariableProtectedParserRuleCall_9_2_1_5_0 = (RuleCall)cPropertyAssignment_9_2_1_5.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cAlternatives_9.eContents().get(3);
		private final Keyword cPrivateKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Alternatives cAlternatives_9_3_1 = (Alternatives)cGroup_9_3.eContents().get(1);
		private final Assignment cPortAssignment_9_3_1_0 = (Assignment)cAlternatives_9_3_1.eContents().get(0);
		private final RuleCall cPortPortPrivateParserRuleCall_9_3_1_0_0 = (RuleCall)cPortAssignment_9_3_1_0.eContents().get(0);
		private final Assignment cSignalAssignment_9_3_1_1 = (Assignment)cAlternatives_9_3_1.eContents().get(1);
		private final RuleCall cSignalSignalPrivateParserRuleCall_9_3_1_1_0 = (RuleCall)cSignalAssignment_9_3_1_1.eContents().get(0);
		private final Assignment cBufferAssignment_9_3_1_2 = (Assignment)cAlternatives_9_3_1.eContents().get(2);
		private final RuleCall cBufferBufferPrivateParserRuleCall_9_3_1_2_0 = (RuleCall)cBufferAssignment_9_3_1_2.eContents().get(0);
		private final Assignment cChannelAssignment_9_3_1_3 = (Assignment)cAlternatives_9_3_1.eContents().get(3);
		private final RuleCall cChannelChannelPrivateParserRuleCall_9_3_1_3_0 = (RuleCall)cChannelAssignment_9_3_1_3.eContents().get(0);
		private final Assignment cTypedefAssignment_9_3_1_4 = (Assignment)cAlternatives_9_3_1.eContents().get(4);
		private final RuleCall cTypedefTypeDefinitionParserRuleCall_9_3_1_4_0 = (RuleCall)cTypedefAssignment_9_3_1_4.eContents().get(0);
		private final Assignment cPropertyAssignment_9_3_1_5 = (Assignment)cAlternatives_9_3_1.eContents().get(5);
		private final RuleCall cPropertyVariablePrivateParserRuleCall_9_3_1_5_0 = (RuleCall)cPropertyAssignment_9_3_1_5.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Alternatives cAlternatives_10_0 = (Alternatives)cAlternatives_10.eContents().get(0);
		private final Group cGroup_10_0_0 = (Group)cAlternatives_10_0.eContents().get(0);
		private final Alternatives cAlternatives_10_0_0_0 = (Alternatives)cGroup_10_0_0.eContents().get(0);
		private final Keyword cRoutineKeyword_10_0_0_0_0 = (Keyword)cAlternatives_10_0_0_0.eContents().get(0);
		private final Keyword cMacroKeyword_10_0_0_0_1 = (Keyword)cAlternatives_10_0_0_0.eContents().get(1);
		private final Assignment cRoutineAssignment_10_0_0_1 = (Assignment)cGroup_10_0_0.eContents().get(1);
		private final RuleCall cRoutineRoutineParserRuleCall_10_0_0_1_0 = (RuleCall)cRoutineAssignment_10_0_0_1.eContents().get(0);
		private final Group cGroup_10_0_1 = (Group)cAlternatives_10_0.eContents().get(1);
		private final Keyword cProcedureKeyword_10_0_1_0 = (Keyword)cGroup_10_0_1.eContents().get(0);
		private final Assignment cProcedureAssignment_10_0_1_1 = (Assignment)cGroup_10_0_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_10_0_1_1_0 = (RuleCall)cProcedureAssignment_10_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_10_1 = (Alternatives)cAlternatives_10.eContents().get(1);
		private final Assignment cRoutineAssignment_10_1_0 = (Assignment)cAlternatives_10_1.eContents().get(0);
		private final RuleCall cRoutineRoutineParserRuleCall_10_1_0_0 = (RuleCall)cRoutineAssignment_10_1_0.eContents().get(0);
		private final Assignment cProcedureAssignment_10_1_1 = (Assignment)cAlternatives_10_1.eContents().get(1);
		private final RuleCall cProcedureProcedureParserRuleCall_10_1_1_0 = (RuleCall)cProcedureAssignment_10_1_1.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cRegionAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cRegionStatemachineRegionParserRuleCall_11_0_0 = (RuleCall)cRegionAssignment_11_0.eContents().get(0);
		private final Assignment cRegionAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cRegionStatemachineRegionLiteParserRuleCall_11_1_0 = (RuleCall)cRegionAssignment_11_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_12 = (UnorderedGroup)cGroup.eContents().get(12);
		private final Assignment cExecutionAssignment_12_0 = (Assignment)cUnorderedGroup_12.eContents().get(0);
		private final RuleCall cExecutionModelOfExecutionParserRuleCall_12_0_0 = (RuleCall)cExecutionAssignment_12_0.eContents().get(0);
		private final Assignment cInteractionAssignment_12_1 = (Assignment)cUnorderedGroup_12.eContents().get(1);
		private final RuleCall cInteractionModelOfInteractionParserRuleCall_12_1_0 = (RuleCall)cInteractionAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Statemachine Behavior View Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Statemachine fmlStmchn::Statemachine:
		//	{fmlStmchn::Statemachine} (visibility=VisibilityKind?
		//	& (timed?='timed' | input_enabled?='input_enabled')?
		//	& design=DesignKind?)
		//	'statemachine' ('<' 'moc:'? ('or' | 'and') '>')?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' ('@parameter:' ('input' (parameter+=ParameterInput
		//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
		//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
		//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
		//	| '{' parameter+=ParameterReturn+ '}'))*
		//	| (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*) ('@input:' (parameter+=ParameterInput
		//	| '{' parameter+=ParameterInput+ '}')*
		//	| '@inout:' (parameter+=ParameterInout
		//	| '{' parameter+=ParameterInout+ '}')*
		//	| '@output:' (parameter+=ParameterOutput
		//	| '{' parameter+=ParameterOutput+ '}')*
		//	| '@return:' (parameter+=ParameterReturn
		//	| '{' parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port
		//	| signal+=Signal
		//	| buffer+=Buffer
		//	| channel+=Channel
		//	| typedef+=TypeDefinition
		//	| property+=Variable)*
		//	| '@public:' (port+=PortPublic
		//	| signal+=SignalPublic
		//	| buffer+=BufferPublic
		//	| channel+=ChannelPublic
		//	| typedef+=TypeDefinition
		//	| property+=VariablePublic)*
		//	| '@protected:' (port+=PortProtected
		//	| signal+=SignalProtected
		//	| buffer+=BufferProtected
		//	| channel+=ChannelProtected
		//	| typedef+=TypeDefinition
		//	| property+=VariableProtected)*
		//	| '@private:' (port+=PortPrivate
		//	| signal+=SignalPrivate
		//	| buffer+=BufferPrivate
		//	| channel+=ChannelPrivate
		//	| typedef+=TypeDefinition
		//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
		//	| '@procedure:' procedure+=Procedure+)*
		//	| (routine+=Routine | procedure+=Procedure)+) (region+=StatemachineRegion+
		//	| region+=StatemachineRegionLite) (execution=ModelOfExecution?
		//	//		& ( computation=ModelOfComputation )?
		//	& interaction=ModelOfInteraction?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Statemachine} (visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')? &
		//design=DesignKind?) 'statemachine' ('<' 'moc:'? ('or' | 'and') '>')? name=ESIdentifier
		//unrestrictedName=UnrestrictedName? '{' ('@parameter:' ('input' (parameter+=ParameterInput | '{'
		//parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output'
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{'
		//parameter+=ParameterReturn+ '}'))* | (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel |
		//typedef+=TypeDefinition | property+=Variable)*) ('@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+
		//'}')* | '@inout:' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')* | '@output:'
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')* | '@return:' (parameter+=ParameterReturn | '{'
		//parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel |
		//typedef+=TypeDefinition | property+=Variable)* | '@public:' (port+=PortPublic | signal+=SignalPublic |
		//buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition | property+=VariablePublic)* | '@protected:'
		//(port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)* | '@private:' (port+=PortPrivate | signal+=SignalPrivate |
		//buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)*
		//((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* | (routine+=Routine |
		//procedure+=Procedure)+) (region+=StatemachineRegion+ | region+=StatemachineRegionLite) (execution=ModelOfExecution? //		& ( computation=ModelOfComputation )?
		//& interaction=ModelOfInteraction?) '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Statemachine}
		public Action getStatemachineAction_0() { return cStatemachineAction_0; }
		
		//(visibility=VisibilityKind? & (timed?='timed' | input_enabled?='input_enabled')? & design=DesignKind?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1_0() { return cVisibilityAssignment_1_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0_0; }
		
		//(timed?='timed' | input_enabled?='input_enabled')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//timed?='timed'
		public Assignment getTimedAssignment_1_1_0() { return cTimedAssignment_1_1_0; }
		
		//'timed'
		public Keyword getTimedTimedKeyword_1_1_0_0() { return cTimedTimedKeyword_1_1_0_0; }
		
		//input_enabled?='input_enabled'
		public Assignment getInput_enabledAssignment_1_1_1() { return cInput_enabledAssignment_1_1_1; }
		
		//'input_enabled'
		public Keyword getInput_enabledInput_enabledKeyword_1_1_1_0() { return cInput_enabledInput_enabledKeyword_1_1_1_0; }
		
		//design=DesignKind?
		public Assignment getDesignAssignment_1_2() { return cDesignAssignment_1_2; }
		
		//DesignKind
		public RuleCall getDesignDesignKindEnumRuleCall_1_2_0() { return cDesignDesignKindEnumRuleCall_1_2_0; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_2() { return cStatemachineKeyword_2; }
		
		//('<' 'moc:'? ('or' | 'and') '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_3_1() { return cMocKeyword_3_1; }
		
		//('or' | 'and')
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//'or'
		public Keyword getOrKeyword_3_2_0() { return cOrKeyword_3_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_2_1() { return cAndKeyword_3_2_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0() { return cNameESIdentifierParserRuleCall_4_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_5() { return cUnrestrictedNameAssignment_5; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_5_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//('@parameter:' ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))* |
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'@parameter:' ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'@parameter:'
		public Keyword getParameterKeyword_7_0_0() { return cParameterKeyword_7_0_0; }
		
		//('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout | '{'
		//parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}') |
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Alternatives getAlternatives_7_0_1() { return cAlternatives_7_0_1; }
		
		//'input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Group getGroup_7_0_1_0() { return cGroup_7_0_1_0; }
		
		//'input'
		public Keyword getInputKeyword_7_0_1_0_0() { return cInputKeyword_7_0_1_0_0; }
		
		//(parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Alternatives getAlternatives_7_0_1_0_1() { return cAlternatives_7_0_1_0_1; }
		
		//parameter+=ParameterInput
		public Assignment getParameterAssignment_7_0_1_0_1_0() { return cParameterAssignment_7_0_1_0_1_0; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_7_0_1_0_1_0_0() { return cParameterParameterInputParserRuleCall_7_0_1_0_1_0_0; }
		
		//'{' parameter+=ParameterInput+ '}'
		public Group getGroup_7_0_1_0_1_1() { return cGroup_7_0_1_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_0_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_0_1_1_0; }
		
		//parameter+=ParameterInput+
		public Assignment getParameterAssignment_7_0_1_0_1_1_1() { return cParameterAssignment_7_0_1_0_1_1_1; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0() { return cParameterParameterInputParserRuleCall_7_0_1_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_0_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_0_1_1_2; }
		
		//'inout' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Group getGroup_7_0_1_1() { return cGroup_7_0_1_1; }
		
		//'inout'
		public Keyword getInoutKeyword_7_0_1_1_0() { return cInoutKeyword_7_0_1_1_0; }
		
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Alternatives getAlternatives_7_0_1_1_1() { return cAlternatives_7_0_1_1_1; }
		
		//parameter+=ParameterInout
		public Assignment getParameterAssignment_7_0_1_1_1_0() { return cParameterAssignment_7_0_1_1_1_0; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0() { return cParameterParameterInoutParserRuleCall_7_0_1_1_1_0_0; }
		
		//'{' parameter+=ParameterInout+ '}'
		public Group getGroup_7_0_1_1_1_1() { return cGroup_7_0_1_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_1_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_1_1_1_0; }
		
		//parameter+=ParameterInout+
		public Assignment getParameterAssignment_7_0_1_1_1_1_1() { return cParameterAssignment_7_0_1_1_1_1_1; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0() { return cParameterParameterInoutParserRuleCall_7_0_1_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_1_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_1_1_1_2; }
		
		//'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Group getGroup_7_0_1_2() { return cGroup_7_0_1_2; }
		
		//'output'
		public Keyword getOutputKeyword_7_0_1_2_0() { return cOutputKeyword_7_0_1_2_0; }
		
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Alternatives getAlternatives_7_0_1_2_1() { return cAlternatives_7_0_1_2_1; }
		
		//parameter+=ParameterOutput
		public Assignment getParameterAssignment_7_0_1_2_1_0() { return cParameterAssignment_7_0_1_2_1_0; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0() { return cParameterParameterOutputParserRuleCall_7_0_1_2_1_0_0; }
		
		//'{' parameter+=ParameterOutput+ '}'
		public Group getGroup_7_0_1_2_1_1() { return cGroup_7_0_1_2_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_2_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_2_1_1_0; }
		
		//parameter+=ParameterOutput+
		public Assignment getParameterAssignment_7_0_1_2_1_1_1() { return cParameterAssignment_7_0_1_2_1_1_1; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0() { return cParameterParameterOutputParserRuleCall_7_0_1_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_2_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_2_1_1_2; }
		
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Group getGroup_7_0_1_3() { return cGroup_7_0_1_3; }
		
		//'return'
		public Keyword getReturnKeyword_7_0_1_3_0() { return cReturnKeyword_7_0_1_3_0; }
		
		//(parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Alternatives getAlternatives_7_0_1_3_1() { return cAlternatives_7_0_1_3_1; }
		
		//parameter+=ParameterReturn
		public Assignment getParameterAssignment_7_0_1_3_1_0() { return cParameterAssignment_7_0_1_3_1_0; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0() { return cParameterParameterReturnParserRuleCall_7_0_1_3_1_0_0; }
		
		//'{' parameter+=ParameterReturn+ '}'
		public Group getGroup_7_0_1_3_1_1() { return cGroup_7_0_1_3_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_1_3_1_1_0() { return cLeftCurlyBracketKeyword_7_0_1_3_1_1_0; }
		
		//parameter+=ParameterReturn+
		public Assignment getParameterAssignment_7_0_1_3_1_1_1() { return cParameterAssignment_7_0_1_3_1_1_1; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0() { return cParameterParameterReturnParserRuleCall_7_0_1_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_1_3_1_1_2() { return cRightCurlyBracketKeyword_7_0_1_3_1_1_2; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//port+=Port
		public Assignment getPortAssignment_7_1_0() { return cPortAssignment_7_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_7_1_0_0() { return cPortPortParserRuleCall_7_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_7_1_1() { return cSignalAssignment_7_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_7_1_1_0() { return cSignalSignalParserRuleCall_7_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_7_1_2() { return cBufferAssignment_7_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_7_1_2_0() { return cBufferBufferParserRuleCall_7_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_7_1_3() { return cChannelAssignment_7_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_7_1_3_0() { return cChannelChannelParserRuleCall_7_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_7_1_4() { return cTypedefAssignment_7_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_7_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_7_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_7_1_5() { return cPropertyAssignment_7_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_1_5_0() { return cPropertyVariableParserRuleCall_7_1_5_0; }
		
		//('@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')* | '@inout:' (parameter+=ParameterInout |
		//'{' parameter+=ParameterInout+ '}')* | '@output:' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')* |
		//'@return:' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'@input:' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')*
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'@input:'
		public Keyword getInputKeyword_8_0_0() { return cInputKeyword_8_0_0; }
		
		//(parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')*
		public Alternatives getAlternatives_8_0_1() { return cAlternatives_8_0_1; }
		
		//parameter+=ParameterInput
		public Assignment getParameterAssignment_8_0_1_0() { return cParameterAssignment_8_0_1_0; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_8_0_1_0_0() { return cParameterParameterInputParserRuleCall_8_0_1_0_0; }
		
		//'{' parameter+=ParameterInput+ '}'
		public Group getGroup_8_0_1_1() { return cGroup_8_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0_1_1_0() { return cLeftCurlyBracketKeyword_8_0_1_1_0; }
		
		//parameter+=ParameterInput+
		public Assignment getParameterAssignment_8_0_1_1_1() { return cParameterAssignment_8_0_1_1_1; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_8_0_1_1_1_0() { return cParameterParameterInputParserRuleCall_8_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_0_1_1_2() { return cRightCurlyBracketKeyword_8_0_1_1_2; }
		
		//'@inout:' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'@inout:'
		public Keyword getInoutKeyword_8_1_0() { return cInoutKeyword_8_1_0; }
		
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')*
		public Alternatives getAlternatives_8_1_1() { return cAlternatives_8_1_1; }
		
		//parameter+=ParameterInout
		public Assignment getParameterAssignment_8_1_1_0() { return cParameterAssignment_8_1_1_0; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_8_1_1_0_0() { return cParameterParameterInoutParserRuleCall_8_1_1_0_0; }
		
		//'{' parameter+=ParameterInout+ '}'
		public Group getGroup_8_1_1_1() { return cGroup_8_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1_1_1_0() { return cLeftCurlyBracketKeyword_8_1_1_1_0; }
		
		//parameter+=ParameterInout+
		public Assignment getParameterAssignment_8_1_1_1_1() { return cParameterAssignment_8_1_1_1_1; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_8_1_1_1_1_0() { return cParameterParameterInoutParserRuleCall_8_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1_1_1_2() { return cRightCurlyBracketKeyword_8_1_1_1_2; }
		
		//'@output:' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//'@output:'
		public Keyword getOutputKeyword_8_2_0() { return cOutputKeyword_8_2_0; }
		
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')*
		public Alternatives getAlternatives_8_2_1() { return cAlternatives_8_2_1; }
		
		//parameter+=ParameterOutput
		public Assignment getParameterAssignment_8_2_1_0() { return cParameterAssignment_8_2_1_0; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_8_2_1_0_0() { return cParameterParameterOutputParserRuleCall_8_2_1_0_0; }
		
		//'{' parameter+=ParameterOutput+ '}'
		public Group getGroup_8_2_1_1() { return cGroup_8_2_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2_1_1_0() { return cLeftCurlyBracketKeyword_8_2_1_1_0; }
		
		//parameter+=ParameterOutput+
		public Assignment getParameterAssignment_8_2_1_1_1() { return cParameterAssignment_8_2_1_1_1; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_8_2_1_1_1_0() { return cParameterParameterOutputParserRuleCall_8_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2_1_1_2() { return cRightCurlyBracketKeyword_8_2_1_1_2; }
		
		//'@return:' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//'@return:'
		public Keyword getReturnKeyword_8_3_0() { return cReturnKeyword_8_3_0; }
		
		//(parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')*
		public Alternatives getAlternatives_8_3_1() { return cAlternatives_8_3_1; }
		
		//parameter+=ParameterReturn
		public Assignment getParameterAssignment_8_3_1_0() { return cParameterAssignment_8_3_1_0; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_8_3_1_0_0() { return cParameterParameterReturnParserRuleCall_8_3_1_0_0; }
		
		//'{' parameter+=ParameterReturn+ '}'
		public Group getGroup_8_3_1_1() { return cGroup_8_3_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_3_1_1_0() { return cLeftCurlyBracketKeyword_8_3_1_1_0; }
		
		//parameter+=ParameterReturn+
		public Assignment getParameterAssignment_8_3_1_1_1() { return cParameterAssignment_8_3_1_1_1; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_8_3_1_1_1_0() { return cParameterParameterReturnParserRuleCall_8_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3_1_1_2() { return cRightCurlyBracketKeyword_8_3_1_1_2; }
		
		//('@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)* | '@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic |
		//channel+=ChannelPublic | typedef+=TypeDefinition | property+=VariablePublic)* | '@protected:' (port+=PortProtected |
		//signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected | typedef+=TypeDefinition |
		//property+=VariableProtected)* | '@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate |
		//channel+=ChannelPrivate | typedef+=TypeDefinition | property+=VariablePrivate)*)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//'@property:' (port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition |
		//property+=Variable)*
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//'@property:'
		public Keyword getPropertyKeyword_9_0_0() { return cPropertyKeyword_9_0_0; }
		
		//(port+=Port | signal+=Signal | buffer+=Buffer | channel+=Channel | typedef+=TypeDefinition | property+=Variable)*
		public Alternatives getAlternatives_9_0_1() { return cAlternatives_9_0_1; }
		
		//port+=Port
		public Assignment getPortAssignment_9_0_1_0() { return cPortAssignment_9_0_1_0; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_9_0_1_0_0() { return cPortPortParserRuleCall_9_0_1_0_0; }
		
		//signal+=Signal
		public Assignment getSignalAssignment_9_0_1_1() { return cSignalAssignment_9_0_1_1; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_9_0_1_1_0() { return cSignalSignalParserRuleCall_9_0_1_1_0; }
		
		//buffer+=Buffer
		public Assignment getBufferAssignment_9_0_1_2() { return cBufferAssignment_9_0_1_2; }
		
		//Buffer
		public RuleCall getBufferBufferParserRuleCall_9_0_1_2_0() { return cBufferBufferParserRuleCall_9_0_1_2_0; }
		
		//channel+=Channel
		public Assignment getChannelAssignment_9_0_1_3() { return cChannelAssignment_9_0_1_3; }
		
		//Channel
		public RuleCall getChannelChannelParserRuleCall_9_0_1_3_0() { return cChannelChannelParserRuleCall_9_0_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_0_1_4() { return cTypedefAssignment_9_0_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_0_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_0_1_4_0; }
		
		//property+=Variable
		public Assignment getPropertyAssignment_9_0_1_5() { return cPropertyAssignment_9_0_1_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_9_0_1_5_0() { return cPropertyVariableParserRuleCall_9_0_1_5_0; }
		
		//'@public:' (port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic |
		//typedef+=TypeDefinition | property+=VariablePublic)*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//'@public:'
		public Keyword getPublicKeyword_9_1_0() { return cPublicKeyword_9_1_0; }
		
		//(port+=PortPublic | signal+=SignalPublic | buffer+=BufferPublic | channel+=ChannelPublic | typedef+=TypeDefinition |
		//property+=VariablePublic)*
		public Alternatives getAlternatives_9_1_1() { return cAlternatives_9_1_1; }
		
		//port+=PortPublic
		public Assignment getPortAssignment_9_1_1_0() { return cPortAssignment_9_1_1_0; }
		
		//PortPublic
		public RuleCall getPortPortPublicParserRuleCall_9_1_1_0_0() { return cPortPortPublicParserRuleCall_9_1_1_0_0; }
		
		//signal+=SignalPublic
		public Assignment getSignalAssignment_9_1_1_1() { return cSignalAssignment_9_1_1_1; }
		
		//SignalPublic
		public RuleCall getSignalSignalPublicParserRuleCall_9_1_1_1_0() { return cSignalSignalPublicParserRuleCall_9_1_1_1_0; }
		
		//buffer+=BufferPublic
		public Assignment getBufferAssignment_9_1_1_2() { return cBufferAssignment_9_1_1_2; }
		
		//BufferPublic
		public RuleCall getBufferBufferPublicParserRuleCall_9_1_1_2_0() { return cBufferBufferPublicParserRuleCall_9_1_1_2_0; }
		
		//channel+=ChannelPublic
		public Assignment getChannelAssignment_9_1_1_3() { return cChannelAssignment_9_1_1_3; }
		
		//ChannelPublic
		public RuleCall getChannelChannelPublicParserRuleCall_9_1_1_3_0() { return cChannelChannelPublicParserRuleCall_9_1_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_1_1_4() { return cTypedefAssignment_9_1_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_1_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_1_1_4_0; }
		
		//property+=VariablePublic
		public Assignment getPropertyAssignment_9_1_1_5() { return cPropertyAssignment_9_1_1_5; }
		
		//VariablePublic
		public RuleCall getPropertyVariablePublicParserRuleCall_9_1_1_5_0() { return cPropertyVariablePublicParserRuleCall_9_1_1_5_0; }
		
		//'@protected:' (port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'@protected:'
		public Keyword getProtectedKeyword_9_2_0() { return cProtectedKeyword_9_2_0; }
		
		//(port+=PortProtected | signal+=SignalProtected | buffer+=BufferProtected | channel+=ChannelProtected |
		//typedef+=TypeDefinition | property+=VariableProtected)*
		public Alternatives getAlternatives_9_2_1() { return cAlternatives_9_2_1; }
		
		//port+=PortProtected
		public Assignment getPortAssignment_9_2_1_0() { return cPortAssignment_9_2_1_0; }
		
		//PortProtected
		public RuleCall getPortPortProtectedParserRuleCall_9_2_1_0_0() { return cPortPortProtectedParserRuleCall_9_2_1_0_0; }
		
		//signal+=SignalProtected
		public Assignment getSignalAssignment_9_2_1_1() { return cSignalAssignment_9_2_1_1; }
		
		//SignalProtected
		public RuleCall getSignalSignalProtectedParserRuleCall_9_2_1_1_0() { return cSignalSignalProtectedParserRuleCall_9_2_1_1_0; }
		
		//buffer+=BufferProtected
		public Assignment getBufferAssignment_9_2_1_2() { return cBufferAssignment_9_2_1_2; }
		
		//BufferProtected
		public RuleCall getBufferBufferProtectedParserRuleCall_9_2_1_2_0() { return cBufferBufferProtectedParserRuleCall_9_2_1_2_0; }
		
		//channel+=ChannelProtected
		public Assignment getChannelAssignment_9_2_1_3() { return cChannelAssignment_9_2_1_3; }
		
		//ChannelProtected
		public RuleCall getChannelChannelProtectedParserRuleCall_9_2_1_3_0() { return cChannelChannelProtectedParserRuleCall_9_2_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_2_1_4() { return cTypedefAssignment_9_2_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_2_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_2_1_4_0; }
		
		//property+=VariableProtected
		public Assignment getPropertyAssignment_9_2_1_5() { return cPropertyAssignment_9_2_1_5; }
		
		//VariableProtected
		public RuleCall getPropertyVariableProtectedParserRuleCall_9_2_1_5_0() { return cPropertyVariableProtectedParserRuleCall_9_2_1_5_0; }
		
		//'@private:' (port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate |
		//typedef+=TypeDefinition | property+=VariablePrivate)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//'@private:'
		public Keyword getPrivateKeyword_9_3_0() { return cPrivateKeyword_9_3_0; }
		
		//(port+=PortPrivate | signal+=SignalPrivate | buffer+=BufferPrivate | channel+=ChannelPrivate | typedef+=TypeDefinition |
		//property+=VariablePrivate)*
		public Alternatives getAlternatives_9_3_1() { return cAlternatives_9_3_1; }
		
		//port+=PortPrivate
		public Assignment getPortAssignment_9_3_1_0() { return cPortAssignment_9_3_1_0; }
		
		//PortPrivate
		public RuleCall getPortPortPrivateParserRuleCall_9_3_1_0_0() { return cPortPortPrivateParserRuleCall_9_3_1_0_0; }
		
		//signal+=SignalPrivate
		public Assignment getSignalAssignment_9_3_1_1() { return cSignalAssignment_9_3_1_1; }
		
		//SignalPrivate
		public RuleCall getSignalSignalPrivateParserRuleCall_9_3_1_1_0() { return cSignalSignalPrivateParserRuleCall_9_3_1_1_0; }
		
		//buffer+=BufferPrivate
		public Assignment getBufferAssignment_9_3_1_2() { return cBufferAssignment_9_3_1_2; }
		
		//BufferPrivate
		public RuleCall getBufferBufferPrivateParserRuleCall_9_3_1_2_0() { return cBufferBufferPrivateParserRuleCall_9_3_1_2_0; }
		
		//channel+=ChannelPrivate
		public Assignment getChannelAssignment_9_3_1_3() { return cChannelAssignment_9_3_1_3; }
		
		//ChannelPrivate
		public RuleCall getChannelChannelPrivateParserRuleCall_9_3_1_3_0() { return cChannelChannelPrivateParserRuleCall_9_3_1_3_0; }
		
		//typedef+=TypeDefinition
		public Assignment getTypedefAssignment_9_3_1_4() { return cTypedefAssignment_9_3_1_4; }
		
		//TypeDefinition
		public RuleCall getTypedefTypeDefinitionParserRuleCall_9_3_1_4_0() { return cTypedefTypeDefinitionParserRuleCall_9_3_1_4_0; }
		
		//property+=VariablePrivate
		public Assignment getPropertyAssignment_9_3_1_5() { return cPropertyAssignment_9_3_1_5; }
		
		//VariablePrivate
		public RuleCall getPropertyVariablePrivateParserRuleCall_9_3_1_5_0() { return cPropertyVariablePrivateParserRuleCall_9_3_1_5_0; }
		
		//((('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)* | (routine+=Routine |
		//procedure+=Procedure)+)
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//(('@routine:' | '@macro:') routine+=Routine+ | '@procedure:' procedure+=Procedure+)*
		public Alternatives getAlternatives_10_0() { return cAlternatives_10_0; }
		
		//('@routine:' | '@macro:') routine+=Routine+
		public Group getGroup_10_0_0() { return cGroup_10_0_0; }
		
		//('@routine:' | '@macro:')
		public Alternatives getAlternatives_10_0_0_0() { return cAlternatives_10_0_0_0; }
		
		//'@routine:'
		public Keyword getRoutineKeyword_10_0_0_0_0() { return cRoutineKeyword_10_0_0_0_0; }
		
		//'@macro:'
		public Keyword getMacroKeyword_10_0_0_0_1() { return cMacroKeyword_10_0_0_0_1; }
		
		//routine+=Routine+
		public Assignment getRoutineAssignment_10_0_0_1() { return cRoutineAssignment_10_0_0_1; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_10_0_0_1_0() { return cRoutineRoutineParserRuleCall_10_0_0_1_0; }
		
		//'@procedure:' procedure+=Procedure+
		public Group getGroup_10_0_1() { return cGroup_10_0_1; }
		
		//'@procedure:'
		public Keyword getProcedureKeyword_10_0_1_0() { return cProcedureKeyword_10_0_1_0; }
		
		//procedure+=Procedure+
		public Assignment getProcedureAssignment_10_0_1_1() { return cProcedureAssignment_10_0_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_10_0_1_1_0() { return cProcedureProcedureParserRuleCall_10_0_1_1_0; }
		
		//(routine+=Routine | procedure+=Procedure)+
		public Alternatives getAlternatives_10_1() { return cAlternatives_10_1; }
		
		//routine+=Routine
		public Assignment getRoutineAssignment_10_1_0() { return cRoutineAssignment_10_1_0; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_10_1_0_0() { return cRoutineRoutineParserRuleCall_10_1_0_0; }
		
		//procedure+=Procedure
		public Assignment getProcedureAssignment_10_1_1() { return cProcedureAssignment_10_1_1; }
		
		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_10_1_1_0() { return cProcedureProcedureParserRuleCall_10_1_1_0; }
		
		//(region+=StatemachineRegion+ | region+=StatemachineRegionLite)
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//region+=StatemachineRegion+
		public Assignment getRegionAssignment_11_0() { return cRegionAssignment_11_0; }
		
		//StatemachineRegion
		public RuleCall getRegionStatemachineRegionParserRuleCall_11_0_0() { return cRegionStatemachineRegionParserRuleCall_11_0_0; }
		
		//region+=StatemachineRegionLite
		public Assignment getRegionAssignment_11_1() { return cRegionAssignment_11_1; }
		
		//StatemachineRegionLite
		public RuleCall getRegionStatemachineRegionLiteParserRuleCall_11_1_0() { return cRegionStatemachineRegionLiteParserRuleCall_11_1_0; }
		
		//(execution=ModelOfExecution? //		& ( computation=ModelOfComputation )?
		//& interaction=ModelOfInteraction?)
		public UnorderedGroup getUnorderedGroup_12() { return cUnorderedGroup_12; }
		
		//execution=ModelOfExecution?
		public Assignment getExecutionAssignment_12_0() { return cExecutionAssignment_12_0; }
		
		//ModelOfExecution
		public RuleCall getExecutionModelOfExecutionParserRuleCall_12_0_0() { return cExecutionModelOfExecutionParserRuleCall_12_0_0; }
		
		//interaction=ModelOfInteraction?
		public Assignment getInteractionAssignment_12_1() { return cInteractionAssignment_12_1; }
		
		//ModelOfInteraction
		public RuleCall getInteractionModelOfInteractionParserRuleCall_12_1_0() { return cInteractionModelOfInteractionParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class StatemachineRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StatemachineRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Keyword cRegionKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cStatemachineKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cRegionKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cStatemachineKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_1_1_2_0 = (RuleCall)cUnrestrictedNameAssignment_1_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignColonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVertexAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVertexStateParserRuleCall_2_0_0 = (RuleCall)cVertexAssignment_2_0.eContents().get(0);
		private final Assignment cVertexAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVertexPseudostateParserRuleCall_2_1_0 = (RuleCall)cVertexAssignment_2_1.eContents().get(0);
		
		//StatemachineRegion fmlStmchn::Region:
		//	{fmlStmchn::Region} (('@region:' | '@statemachine:') | ('@region<' | '@statemachine<') name=ESIdentifier
		//	unrestrictedName=UnrestrictedName? '>:') (vertex+=State
		//	| vertex+=Pseudostate)+
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Region} (('@region:' | '@statemachine:') | ('@region<' | '@statemachine<') name=ESIdentifier
		//unrestrictedName=UnrestrictedName? '>:') (vertex+=State | vertex+=Pseudostate)+
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }
		
		//(('@region:' | '@statemachine:') | ('@region<' | '@statemachine<') name=ESIdentifier unrestrictedName=UnrestrictedName?
		//'>:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('@region:' | '@statemachine:')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'@region:'
		public Keyword getRegionKeyword_1_0_0() { return cRegionKeyword_1_0_0; }
		
		//'@statemachine:'
		public Keyword getStatemachineKeyword_1_0_1() { return cStatemachineKeyword_1_0_1; }
		
		//('@region<' | '@statemachine<') name=ESIdentifier unrestrictedName=UnrestrictedName? '>:'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('@region<' | '@statemachine<')
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'@region<'
		public Keyword getRegionKeyword_1_1_0_0() { return cRegionKeyword_1_1_0_0; }
		
		//'@statemachine<'
		public Keyword getStatemachineKeyword_1_1_0_1() { return cStatemachineKeyword_1_1_0_1; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_1_1_0() { return cNameESIdentifierParserRuleCall_1_1_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_1_1_2() { return cUnrestrictedNameAssignment_1_1_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_1_1_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_1_1_2_0; }
		
		//'>:'
		public Keyword getGreaterThanSignColonKeyword_1_1_3() { return cGreaterThanSignColonKeyword_1_1_3; }
		
		//(vertex+=State | vertex+=Pseudostate)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//vertex+=State
		public Assignment getVertexAssignment_2_0() { return cVertexAssignment_2_0; }
		
		//State
		public RuleCall getVertexStateParserRuleCall_2_0_0() { return cVertexStateParserRuleCall_2_0_0; }
		
		//vertex+=Pseudostate
		public Assignment getVertexAssignment_2_1() { return cVertexAssignment_2_1; }
		
		//Pseudostate
		public RuleCall getVertexPseudostateParserRuleCall_2_1_0() { return cVertexPseudostateParserRuleCall_2_1_0; }
	}
	public class StatemachineRegionLiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StatemachineRegionLite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVertexAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVertexStateParserRuleCall_0_0 = (RuleCall)cVertexAssignment_0.eContents().get(0);
		private final Assignment cVertexAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVertexPseudostateParserRuleCall_1_0 = (RuleCall)cVertexAssignment_1.eContents().get(0);
		
		//StatemachineRegionLite fmlStmchn::Region:
		//	(vertex+=State | vertex+=Pseudostate)+
		@Override public ParserRule getRule() { return rule; }
		
		//(vertex+=State | vertex+=Pseudostate)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//vertex+=State
		public Assignment getVertexAssignment_0() { return cVertexAssignment_0; }
		
		//State
		public RuleCall getVertexStateParserRuleCall_0_0() { return cVertexStateParserRuleCall_0_0; }
		
		//vertex+=Pseudostate
		public Assignment getVertexAssignment_1() { return cVertexAssignment_1; }
		
		//Pseudostate
		public RuleCall getVertexPseudostateParserRuleCall_1_0() { return cVertexPseudostateParserRuleCall_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFinalStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// State Rules
		//////////////////////////////////////////////////////////////////////////////////
		//State fmlStmchn::State:
		//	CompositeState
		//	| StartState
		//	| SimpleState
		//	| FinalState
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeState | StartState | SimpleState | FinalState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeState
		public RuleCall getCompositeStateParserRuleCall_0() { return cCompositeStateParserRuleCall_0; }
		
		//StartState
		public RuleCall getStartStateParserRuleCall_1() { return cStartStateParserRuleCall_1; }
		
		//SimpleState
		public RuleCall getSimpleStateParserRuleCall_2() { return cSimpleStateParserRuleCall_2; }
		
		//FinalState
		public RuleCall getFinalStateParserRuleCall_3() { return cFinalStateParserRuleCall_3; }
	}
	public class CompositeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CompositeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCompositeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCompositeStateKeyword_1_0 = (Keyword)cCompositeAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMocKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Assignment cOrthogonalAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cOrthogonalAndKeyword_4_1_0 = (Keyword)cOrthogonalAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameESIdentifierParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0 = (RuleCall)cUnrestrictedNameAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_1 = (Alternatives)cGroup_8_0.eContents().get(1);
		private final Alternatives cAlternatives_8_0_1_0 = (Alternatives)cAlternatives_8_0_1.eContents().get(0);
		private final Assignment cRegionAssignment_8_0_1_0_0 = (Assignment)cAlternatives_8_0_1_0.eContents().get(0);
		private final RuleCall cRegionStatemachineRegionParserRuleCall_8_0_1_0_0_0 = (RuleCall)cRegionAssignment_8_0_1_0_0.eContents().get(0);
		private final Group cGroup_8_0_1_0_1 = (Group)cAlternatives_8_0_1_0.eContents().get(1);
		private final Keyword cMoeKeyword_8_0_1_0_1_0 = (Keyword)cGroup_8_0_1_0_1.eContents().get(0);
		private final Assignment cMoeAssignment_8_0_1_0_1_1 = (Assignment)cGroup_8_0_1_0_1.eContents().get(1);
		private final RuleCall cMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_0_1_1_0 = (RuleCall)cMoeAssignment_8_0_1_0_1_1.eContents().get(0);
		private final Group cGroup_8_0_1_0_2 = (Group)cAlternatives_8_0_1_0.eContents().get(2);
		private final Keyword cTransitionKeyword_8_0_1_0_2_0 = (Keyword)cGroup_8_0_1_0_2.eContents().get(0);
		private final Assignment cTransitionAssignment_8_0_1_0_2_1 = (Assignment)cGroup_8_0_1_0_2.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_8_0_1_0_2_1_0 = (RuleCall)cTransitionAssignment_8_0_1_0_2_1.eContents().get(0);
		private final Group cGroup_8_0_1_1 = (Group)cAlternatives_8_0_1.eContents().get(1);
		private final Assignment cRegionAssignment_8_0_1_1_0 = (Assignment)cGroup_8_0_1_1.eContents().get(0);
		private final RuleCall cRegionStatemachineRegionLiteParserRuleCall_8_0_1_1_0_0 = (RuleCall)cRegionAssignment_8_0_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_8_0_1_1_1 = (Alternatives)cGroup_8_0_1_1.eContents().get(1);
		private final Assignment cTransitionAssignment_8_0_1_1_1_0 = (Assignment)cAlternatives_8_0_1_1_1.eContents().get(0);
		private final RuleCall cTransitionTransitionParserRuleCall_8_0_1_1_1_0_0 = (RuleCall)cTransitionAssignment_8_0_1_1_1_0.eContents().get(0);
		private final Assignment cMoeAssignment_8_0_1_1_1_1 = (Assignment)cAlternatives_8_0_1_1_1.eContents().get(1);
		private final RuleCall cMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_1_1_1_0 = (RuleCall)cMoeAssignment_8_0_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// CompositeState Rules
		//////////////////////////////////////////////////////////////////////////////////
		//CompositeState fmlStmchn::State:
		//	{fmlStmchn::State} composite?='state' '<' 'moc:'? ('or' | orthogonal?='and') '>'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' ((region+=StatemachineRegion
		//	| '@moe:' moe+=moeCompositeStateRoutines*
		//	| '@transition:' transition+=Transition*)+
		//	| region+=StatemachineRegionLite (transition+=Transition
		//	| moe+=moeCompositeStateRoutines)*)
		//	'}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::State} composite?='state' '<' 'moc:'? ('or' | orthogonal?='and') '>' name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('{' ((region+=StatemachineRegion | '@moe:' moe+=moeCompositeStateRoutines* |
		//'@transition:' transition+=Transition*)+ | region+=StatemachineRegionLite (transition+=Transition |
		//moe+=moeCompositeStateRoutines)*) '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//composite?='state'
		public Assignment getCompositeAssignment_1() { return cCompositeAssignment_1; }
		
		//'state'
		public Keyword getCompositeStateKeyword_1_0() { return cCompositeStateKeyword_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'moc:'?
		public Keyword getMocKeyword_3() { return cMocKeyword_3; }
		
		//('or' | orthogonal?='and')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'or'
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }
		
		//orthogonal?='and'
		public Assignment getOrthogonalAssignment_4_1() { return cOrthogonalAssignment_4_1; }
		
		//'and'
		public Keyword getOrthogonalAndKeyword_4_1_0() { return cOrthogonalAndKeyword_4_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_6_0() { return cNameESIdentifierParserRuleCall_6_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_7() { return cUnrestrictedNameAssignment_7; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_7_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0; }
		
		//('{' ((region+=StatemachineRegion | '@moe:' moe+=moeCompositeStateRoutines* | '@transition:' transition+=Transition*)+ |
		//region+=StatemachineRegionLite (transition+=Transition | moe+=moeCompositeStateRoutines)*) '}' | ';')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'{' ((region+=StatemachineRegion | '@moe:' moe+=moeCompositeStateRoutines* | '@transition:' transition+=Transition*)+ |
		//region+=StatemachineRegionLite (transition+=Transition | moe+=moeCompositeStateRoutines)*) '}'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }
		
		//((region+=StatemachineRegion | '@moe:' moe+=moeCompositeStateRoutines* | '@transition:' transition+=Transition*)+ |
		//region+=StatemachineRegionLite (transition+=Transition | moe+=moeCompositeStateRoutines)*)
		public Alternatives getAlternatives_8_0_1() { return cAlternatives_8_0_1; }
		
		//(region+=StatemachineRegion | '@moe:' moe+=moeCompositeStateRoutines* | '@transition:' transition+=Transition*)+
		public Alternatives getAlternatives_8_0_1_0() { return cAlternatives_8_0_1_0; }
		
		//region+=StatemachineRegion
		public Assignment getRegionAssignment_8_0_1_0_0() { return cRegionAssignment_8_0_1_0_0; }
		
		//StatemachineRegion
		public RuleCall getRegionStatemachineRegionParserRuleCall_8_0_1_0_0_0() { return cRegionStatemachineRegionParserRuleCall_8_0_1_0_0_0; }
		
		//'@moe:' moe+=moeCompositeStateRoutines*
		public Group getGroup_8_0_1_0_1() { return cGroup_8_0_1_0_1; }
		
		//'@moe:'
		public Keyword getMoeKeyword_8_0_1_0_1_0() { return cMoeKeyword_8_0_1_0_1_0; }
		
		//moe+=moeCompositeStateRoutines*
		public Assignment getMoeAssignment_8_0_1_0_1_1() { return cMoeAssignment_8_0_1_0_1_1; }
		
		//moeCompositeStateRoutines
		public RuleCall getMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_0_1_1_0() { return cMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_0_1_1_0; }
		
		//'@transition:' transition+=Transition*
		public Group getGroup_8_0_1_0_2() { return cGroup_8_0_1_0_2; }
		
		//'@transition:'
		public Keyword getTransitionKeyword_8_0_1_0_2_0() { return cTransitionKeyword_8_0_1_0_2_0; }
		
		//transition+=Transition*
		public Assignment getTransitionAssignment_8_0_1_0_2_1() { return cTransitionAssignment_8_0_1_0_2_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_8_0_1_0_2_1_0() { return cTransitionTransitionParserRuleCall_8_0_1_0_2_1_0; }
		
		//region+=StatemachineRegionLite (transition+=Transition | moe+=moeCompositeStateRoutines)*
		public Group getGroup_8_0_1_1() { return cGroup_8_0_1_1; }
		
		//region+=StatemachineRegionLite
		public Assignment getRegionAssignment_8_0_1_1_0() { return cRegionAssignment_8_0_1_1_0; }
		
		//StatemachineRegionLite
		public RuleCall getRegionStatemachineRegionLiteParserRuleCall_8_0_1_1_0_0() { return cRegionStatemachineRegionLiteParserRuleCall_8_0_1_1_0_0; }
		
		//(transition+=Transition | moe+=moeCompositeStateRoutines)*
		public Alternatives getAlternatives_8_0_1_1_1() { return cAlternatives_8_0_1_1_1; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_8_0_1_1_1_0() { return cTransitionAssignment_8_0_1_1_1_0; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_8_0_1_1_1_0_0() { return cTransitionTransitionParserRuleCall_8_0_1_1_1_0_0; }
		
		//moe+=moeCompositeStateRoutines
		public Assignment getMoeAssignment_8_0_1_1_1_1() { return cMoeAssignment_8_0_1_1_1_1; }
		
		//moeCompositeStateRoutines
		public RuleCall getMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_1_1_1_0() { return cMoeMoeCompositeStateRoutinesParserRuleCall_8_0_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}
	public class MoeCompositeStateRoutinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.moeCompositeStateRoutines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameInitKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameFinalKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameEnableKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameDisableKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameConcurrencyKeyword_1_0_4 = (Keyword)cNameAlternatives_1_0.eContents().get(4);
		private final Keyword cNameScheduleKeyword_1_0_5 = (Keyword)cNameAlternatives_1_0.eContents().get(5);
		private final Keyword cNameIrunKeyword_1_0_6 = (Keyword)cNameAlternatives_1_0.eContents().get(6);
		private final Keyword cNameRunKeyword_1_0_7 = (Keyword)cNameAlternatives_1_0.eContents().get(7);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		//moeCompositeStateRoutines fmlInfra::Routine:
		//	{fmlInfra::Routine} name=('@init' | '@final' | '@enable' | '@disable'
		//	| '@concurrency' | '@schedule' | '@irun' | '@run') bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} name=('@init' | '@final' | '@enable' | '@disable' | '@concurrency' | '@schedule' | '@irun' | '@run')
		//bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//name=('@init' | '@final' | '@enable' | '@disable' | '@concurrency' | '@schedule' | '@irun' | '@run')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('@init' | '@final' | '@enable' | '@disable' | '@concurrency' | '@schedule' | '@irun' | '@run')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'@init'
		public Keyword getNameInitKeyword_1_0_0() { return cNameInitKeyword_1_0_0; }
		
		//'@final'
		public Keyword getNameFinalKeyword_1_0_1() { return cNameFinalKeyword_1_0_1; }
		
		//'@enable'
		public Keyword getNameEnableKeyword_1_0_2() { return cNameEnableKeyword_1_0_2; }
		
		//'@disable'
		public Keyword getNameDisableKeyword_1_0_3() { return cNameDisableKeyword_1_0_3; }
		
		//'@concurrency'
		public Keyword getNameConcurrencyKeyword_1_0_4() { return cNameConcurrencyKeyword_1_0_4; }
		
		//'@schedule'
		public Keyword getNameScheduleKeyword_1_0_5() { return cNameScheduleKeyword_1_0_5; }
		
		//'@irun'
		public Keyword getNameIrunKeyword_1_0_6() { return cNameIrunKeyword_1_0_6; }
		
		//'@run'
		public Keyword getNameRunKeyword_1_0_7() { return cNameRunKeyword_1_0_7; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class SimpleStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SimpleState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSimpleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSimpleStateKeyword_1_0 = (Keyword)cSimpleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMocKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSimpleKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Assignment cTransitionAssignment_5_0_1_0 = (Assignment)cAlternatives_5_0_1.eContents().get(0);
		private final RuleCall cTransitionTransitionParserRuleCall_5_0_1_0_0 = (RuleCall)cTransitionAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cMoeAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cMoeMoeSimpleStateRoutinesParserRuleCall_5_0_1_1_0 = (RuleCall)cMoeAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// SimpleState Rules
		//////////////////////////////////////////////////////////////////////////////////
		//SimpleState fmlStmchn::State:
		//	{fmlStmchn::State} simple?='state' ('<' 'moc:'? 'simple' '>')?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' (transition+=Transition
		//	| moe+=moeSimpleStateRoutines)*
		//	'}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::State} simple?='state' ('<' 'moc:'? 'simple' '>')? name=ESIdentifier unrestrictedName=UnrestrictedName? ('{'
		//(transition+=Transition | moe+=moeSimpleStateRoutines)* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//simple?='state'
		public Assignment getSimpleAssignment_1() { return cSimpleAssignment_1; }
		
		//'state'
		public Keyword getSimpleStateKeyword_1_0() { return cSimpleStateKeyword_1_0; }
		
		//('<' 'moc:'? 'simple' '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_2_1() { return cMocKeyword_2_1; }
		
		//'simple'
		public Keyword getSimpleKeyword_2_2() { return cSimpleKeyword_2_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('{' (transition+=Transition | moe+=moeSimpleStateRoutines)* '}' | ';')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'{' (transition+=Transition | moe+=moeSimpleStateRoutines)* '}'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }
		
		//(transition+=Transition | moe+=moeSimpleStateRoutines)*
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_5_0_1_0() { return cTransitionAssignment_5_0_1_0; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_5_0_1_0_0() { return cTransitionTransitionParserRuleCall_5_0_1_0_0; }
		
		//moe+=moeSimpleStateRoutines
		public Assignment getMoeAssignment_5_0_1_1() { return cMoeAssignment_5_0_1_1; }
		
		//moeSimpleStateRoutines
		public RuleCall getMoeMoeSimpleStateRoutinesParserRuleCall_5_0_1_1_0() { return cMoeMoeSimpleStateRoutinesParserRuleCall_5_0_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}
	public class MoeSimpleStateRoutinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.moeSimpleStateRoutines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameEnableKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameDisableKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameIrunKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		//moeSimpleStateRoutines fmlInfra::Routine:
		//	{fmlInfra::Routine} name=('@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} name=('@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//name=('@enable' | '@disable' | '@irun' / *| '@run'* /)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('@enable' | '@disable' | '@irun' / *| '@run'* /)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'@enable'
		public Keyword getNameEnableKeyword_1_0_0() { return cNameEnableKeyword_1_0_0; }
		
		//'@disable'
		public Keyword getNameDisableKeyword_1_0_1() { return cNameDisableKeyword_1_0_1; }
		
		//'@irun'
		public Keyword getNameIrunKeyword_1_0_2() { return cNameIrunKeyword_1_0_2; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class StartStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StartState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSimpleAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSimpleStateKeyword_1_0_0_0 = (Keyword)cSimpleAssignment_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cMocKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cStartKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cNameAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0_5_0 = (RuleCall)cNameAssignment_1_0_5.eContents().get(0);
		private final Assignment cSimpleAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSimpleStartKeyword_1_1_0 = (Keyword)cSimpleAssignment_1_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cTransitionAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0_1_0_0 = (RuleCall)cTransitionAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cMoeAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cMoeMoeStartStateRoutinesParserRuleCall_3_0_1_1_0 = (RuleCall)cMoeAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// StartState Rules
		//////////////////////////////////////////////////////////////////////////////////
		//StartState fmlStmchn::StartState:
		//	{fmlStmchn::StartState} (simple?='state' '<' 'moc:'? 'start' '>' name=ESIdentifier
		//	| simple?='#start') unrestrictedName=UnrestrictedName? ('{' (transition+=Transition
		//	| moe+=moeStartStateRoutines)*
		//	'}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::StartState} (simple?='state' '<' 'moc:'? 'start' '>' name=ESIdentifier | simple?='#start')
		//unrestrictedName=UnrestrictedName? ('{' (transition+=Transition | moe+=moeStartStateRoutines)* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::StartState}
		public Action getStartStateAction_0() { return cStartStateAction_0; }
		
		//(simple?='state' '<' 'moc:'? 'start' '>' name=ESIdentifier | simple?='#start')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//simple?='state' '<' 'moc:'? 'start' '>' name=ESIdentifier
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//simple?='state'
		public Assignment getSimpleAssignment_1_0_0() { return cSimpleAssignment_1_0_0; }
		
		//'state'
		public Keyword getSimpleStateKeyword_1_0_0_0() { return cSimpleStateKeyword_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }
		
		//'moc:'?
		public Keyword getMocKeyword_1_0_2() { return cMocKeyword_1_0_2; }
		
		//'start'
		public Keyword getStartKeyword_1_0_3() { return cStartKeyword_1_0_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_4() { return cGreaterThanSignKeyword_1_0_4; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1_0_5() { return cNameAssignment_1_0_5; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0_5_0() { return cNameESIdentifierParserRuleCall_1_0_5_0; }
		
		//simple?='#start'
		public Assignment getSimpleAssignment_1_1() { return cSimpleAssignment_1_1; }
		
		//'#start'
		public Keyword getSimpleStartKeyword_1_1_0() { return cSimpleStartKeyword_1_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('{' (transition+=Transition | moe+=moeStartStateRoutines)* '}' | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' (transition+=Transition | moe+=moeStartStateRoutines)* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//(transition+=Transition | moe+=moeStartStateRoutines)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//transition+=Transition
		public Assignment getTransitionAssignment_3_0_1_0() { return cTransitionAssignment_3_0_1_0; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0_1_0_0() { return cTransitionTransitionParserRuleCall_3_0_1_0_0; }
		
		//moe+=moeStartStateRoutines
		public Assignment getMoeAssignment_3_0_1_1() { return cMoeAssignment_3_0_1_1; }
		
		//moeStartStateRoutines
		public RuleCall getMoeMoeStartStateRoutinesParserRuleCall_3_0_1_1_0() { return cMoeMoeStartStateRoutinesParserRuleCall_3_0_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class MoeStartStateRoutinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.moeStartStateRoutines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameInitKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameEnableKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameDisableKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameIrunKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		//moeStartStateRoutines fmlInfra::Routine:
		//	{fmlInfra::Routine} name=('@init' | '@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} name=('@init' | '@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//name=('@init' | '@enable' | '@disable' | '@irun' / *| '@run'* /)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('@init' | '@enable' | '@disable' | '@irun' / *| '@run'* /)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'@init'
		public Keyword getNameInitKeyword_1_0_0() { return cNameInitKeyword_1_0_0; }
		
		//'@enable'
		public Keyword getNameEnableKeyword_1_0_1() { return cNameEnableKeyword_1_0_1; }
		
		//'@disable'
		public Keyword getNameDisableKeyword_1_0_2() { return cNameDisableKeyword_1_0_2; }
		
		//'@irun'
		public Keyword getNameIrunKeyword_1_0_3() { return cNameIrunKeyword_1_0_3; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class FinalStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.FinalState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSimpleAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSimpleStateKeyword_1_0_0_0 = (Keyword)cSimpleAssignment_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cMocKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cFinalKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cNameAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0_5_0 = (RuleCall)cNameAssignment_1_0_5.eContents().get(0);
		private final Assignment cSimpleAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSimpleFinalKeyword_1_1_0 = (Keyword)cSimpleAssignment_1_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cMoeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cMoeMoeFinalStateRoutinesParserRuleCall_3_0_1_0 = (RuleCall)cMoeAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// FinalState Rules
		//////////////////////////////////////////////////////////////////////////////////
		//FinalState fmlStmchn::FinalState:
		//	{fmlStmchn::FinalState} (simple?='state' '<' 'moc:'? 'final' '>' name=ESIdentifier
		//	| simple?='#final') unrestrictedName=UnrestrictedName? ('{'
		//	moe+=moeFinalStateRoutines*
		//	'}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::FinalState} (simple?='state' '<' 'moc:'? 'final' '>' name=ESIdentifier | simple?='#final')
		//unrestrictedName=UnrestrictedName? ('{' moe+=moeFinalStateRoutines* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::FinalState}
		public Action getFinalStateAction_0() { return cFinalStateAction_0; }
		
		//(simple?='state' '<' 'moc:'? 'final' '>' name=ESIdentifier | simple?='#final')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//simple?='state' '<' 'moc:'? 'final' '>' name=ESIdentifier
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//simple?='state'
		public Assignment getSimpleAssignment_1_0_0() { return cSimpleAssignment_1_0_0; }
		
		//'state'
		public Keyword getSimpleStateKeyword_1_0_0_0() { return cSimpleStateKeyword_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }
		
		//'moc:'?
		public Keyword getMocKeyword_1_0_2() { return cMocKeyword_1_0_2; }
		
		//'final'
		public Keyword getFinalKeyword_1_0_3() { return cFinalKeyword_1_0_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_4() { return cGreaterThanSignKeyword_1_0_4; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1_0_5() { return cNameAssignment_1_0_5; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0_5_0() { return cNameESIdentifierParserRuleCall_1_0_5_0; }
		
		//simple?='#final'
		public Assignment getSimpleAssignment_1_1() { return cSimpleAssignment_1_1; }
		
		//'#final'
		public Keyword getSimpleFinalKeyword_1_1_0() { return cSimpleFinalKeyword_1_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('{' moe+=moeFinalStateRoutines* '}' | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' moe+=moeFinalStateRoutines* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//moe+=moeFinalStateRoutines*
		public Assignment getMoeAssignment_3_0_1() { return cMoeAssignment_3_0_1; }
		
		//moeFinalStateRoutines
		public RuleCall getMoeMoeFinalStateRoutinesParserRuleCall_3_0_1_0() { return cMoeMoeFinalStateRoutinesParserRuleCall_3_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class MoeFinalStateRoutinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.moeFinalStateRoutines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameEnableKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameFinalKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		//moeFinalStateRoutines fmlInfra::Routine:
		//	{fmlInfra::Routine} name=('@enable' | '@final' / *| '@run'* /) bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} name=('@enable' | '@final' / *| '@run'* /) bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//name=('@enable' | '@final' / *| '@run'* /)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//('@enable' | '@final' / *| '@run'* /)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//'@enable'
		public Keyword getNameEnableKeyword_1_0_0() { return cNameEnableKeyword_1_0_0; }
		
		//'@final'
		public Keyword getNameFinalKeyword_1_0_1() { return cNameFinalKeyword_1_0_1; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class PseudostateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Pseudostate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPseudostateInitialParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndingPseudostateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOtherPseudostateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Pseudostate Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Pseudostate fmlStmchn::Pseudostate:
		//	PseudostateInitial
		//	| EndingPseudostate
		//	| OtherPseudostate
		@Override public ParserRule getRule() { return rule; }
		
		//PseudostateInitial | EndingPseudostate | OtherPseudostate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PseudostateInitial
		public RuleCall getPseudostateInitialParserRuleCall_0() { return cPseudostateInitialParserRuleCall_0; }
		
		//EndingPseudostate
		public RuleCall getEndingPseudostateParserRuleCall_1() { return cEndingPseudostateParserRuleCall_1; }
		
		//OtherPseudostate
		public RuleCall getOtherPseudostateParserRuleCall_2() { return cOtherPseudostateParserRuleCall_2; }
	}
	public class OtherPseudostateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OtherPseudostate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPseudostateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cStateKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPseudostateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMocKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindPseudostateKindEnumRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameESIdentifierParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0 = (RuleCall)cUnrestrictedNameAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cTransitionAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_8_0_1_0 = (RuleCall)cTransitionAssignment_8_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//OtherPseudostate fmlStmchn::Pseudostate:
		//	{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateKind '>'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' transition+=Transition* '}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateKind '>' name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('{' transition+=Transition* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Pseudostate}
		public Action getPseudostateAction_0() { return cPseudostateAction_0; }
		
		//('state' | 'pseudostate')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'state'
		public Keyword getStateKeyword_1_0() { return cStateKeyword_1_0; }
		
		//'pseudostate'
		public Keyword getPseudostateKeyword_1_1() { return cPseudostateKeyword_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'moc:'?
		public Keyword getMocKeyword_3() { return cMocKeyword_3; }
		
		//kind=PseudostateKind
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }
		
		//PseudostateKind
		public RuleCall getKindPseudostateKindEnumRuleCall_4_0() { return cKindPseudostateKindEnumRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_6_0() { return cNameESIdentifierParserRuleCall_6_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_7() { return cUnrestrictedNameAssignment_7; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_7_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0; }
		
		//('{' transition+=Transition* '}' | ';')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'{' transition+=Transition* '}'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }
		
		//transition+=Transition*
		public Assignment getTransitionAssignment_8_0_1() { return cTransitionAssignment_8_0_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_8_0_1_0() { return cTransitionTransitionParserRuleCall_8_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}
	public class PseudostateInitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PseudostateInitial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPseudostateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cStateKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cPseudostateKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cMocKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cKindAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cKindPseudostateInitialKindEnumRuleCall_1_0_3_0 = (RuleCall)cKindAssignment_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cNameAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final Alternatives cNameAlternatives_1_0_5_0 = (Alternatives)cNameAssignment_1_0_5.eContents().get(0);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0_5_0_0 = (RuleCall)cNameAlternatives_1_0_5_0.eContents().get(0);
		private final Keyword cNameInitialKeyword_1_0_5_0_1 = (Keyword)cNameAlternatives_1_0_5_0.eContents().get(1);
		private final Keyword cNameInitKeyword_1_0_5_0_2 = (Keyword)cNameAlternatives_1_0_5_0.eContents().get(2);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameInitialKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameInitKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTransitionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0_1_0 = (RuleCall)cTransitionAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//PseudostateInitial fmlStmchn::Pseudostate:
		//	{fmlStmchn::Pseudostate} (('state' | 'pseudostate')
		//	'<' 'moc:'? kind=PseudostateInitialKind '>'
		//	name=(ESIdentifier | '#initial' | '#init') | name=('#initial' | '#init')) unrestrictedName=UnrestrictedName? ('{'
		//	transition+=Transition* '}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Pseudostate} (('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateInitialKind '>' name=(ESIdentifier |
		//'#initial' | '#init') | name=('#initial' | '#init')) unrestrictedName=UnrestrictedName? ('{' transition+=Transition*
		//'}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Pseudostate}
		public Action getPseudostateAction_0() { return cPseudostateAction_0; }
		
		//(('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateInitialKind '>' name=(ESIdentifier | '#initial' | '#init') |
		//name=('#initial' | '#init'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateInitialKind '>' name=(ESIdentifier | '#initial' | '#init')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('state' | 'pseudostate')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1_0_0_0() { return cStateKeyword_1_0_0_0; }
		
		//'pseudostate'
		public Keyword getPseudostateKeyword_1_0_0_1() { return cPseudostateKeyword_1_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }
		
		//'moc:'?
		public Keyword getMocKeyword_1_0_2() { return cMocKeyword_1_0_2; }
		
		//kind=PseudostateInitialKind
		public Assignment getKindAssignment_1_0_3() { return cKindAssignment_1_0_3; }
		
		//PseudostateInitialKind
		public RuleCall getKindPseudostateInitialKindEnumRuleCall_1_0_3_0() { return cKindPseudostateInitialKindEnumRuleCall_1_0_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_4() { return cGreaterThanSignKeyword_1_0_4; }
		
		//name=(ESIdentifier | '#initial' | '#init')
		public Assignment getNameAssignment_1_0_5() { return cNameAssignment_1_0_5; }
		
		//(ESIdentifier | '#initial' | '#init')
		public Alternatives getNameAlternatives_1_0_5_0() { return cNameAlternatives_1_0_5_0; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0_5_0_0() { return cNameESIdentifierParserRuleCall_1_0_5_0_0; }
		
		//'#initial'
		public Keyword getNameInitialKeyword_1_0_5_0_1() { return cNameInitialKeyword_1_0_5_0_1; }
		
		//'#init'
		public Keyword getNameInitKeyword_1_0_5_0_2() { return cNameInitKeyword_1_0_5_0_2; }
		
		//name=('#initial' | '#init')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('#initial' | '#init')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'#initial'
		public Keyword getNameInitialKeyword_1_1_0_0() { return cNameInitialKeyword_1_1_0_0; }
		
		//'#init'
		public Keyword getNameInitKeyword_1_1_0_1() { return cNameInitKeyword_1_1_0_1; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('{' transition+=Transition* '}' | ';')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' transition+=Transition* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//transition+=Transition*
		public Assignment getTransitionAssignment_3_0_1() { return cTransitionAssignment_3_0_1; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0_1_0() { return cTransitionTransitionParserRuleCall_3_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class EndingPseudostateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EndingPseudostate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPseudostateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cStateKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPseudostateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMocKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKindEndingPseudostateKindEnumRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameESIdentifierParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0 = (RuleCall)cUnrestrictedNameAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cMoeAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cMoeMoeFinalStateRoutinesParserRuleCall_8_0_1_0 = (RuleCall)cMoeAssignment_8_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//EndingPseudostate fmlStmchn::Pseudostate:
		//	{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=EndingPseudostateKind '>'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{'
		//	moe+=moeFinalStateRoutines*
		//	'}'
		//	| ';')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=EndingPseudostateKind '>' name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('{' moe+=moeFinalStateRoutines* '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Pseudostate}
		public Action getPseudostateAction_0() { return cPseudostateAction_0; }
		
		//('state' | 'pseudostate')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'state'
		public Keyword getStateKeyword_1_0() { return cStateKeyword_1_0; }
		
		//'pseudostate'
		public Keyword getPseudostateKeyword_1_1() { return cPseudostateKeyword_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'moc:'?
		public Keyword getMocKeyword_3() { return cMocKeyword_3; }
		
		//kind=EndingPseudostateKind
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }
		
		//EndingPseudostateKind
		public RuleCall getKindEndingPseudostateKindEnumRuleCall_4_0() { return cKindEndingPseudostateKindEnumRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_6_0() { return cNameESIdentifierParserRuleCall_6_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_7() { return cUnrestrictedNameAssignment_7; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_7_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_7_0; }
		
		//('{' moe+=moeFinalStateRoutines* '}' | ';')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'{' moe+=moeFinalStateRoutines* '}'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }
		
		//moe+=moeFinalStateRoutines*
		public Assignment getMoeAssignment_8_0_1() { return cMoeAssignment_8_0_1; }
		
		//moeFinalStateRoutines
		public RuleCall getMoeMoeFinalStateRoutinesParserRuleCall_8_0_1_0() { return cMoeMoeFinalStateRoutinesParserRuleCall_8_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}
	public class ModelOfComputationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ModelOfComputation");
		private final Action cModelOfComputationAction = (Action)rule.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Section Model Of Computation Rules
		//////////////////////////////////////////////////////////////////////////////////
		//ModelOfComputation fmlInfra::ModelOfComputation:
		//	{fmlInfra::ModelOfComputation}
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ModelOfComputation}
		public Action getModelOfComputationAction() { return cModelOfComputationAction; }
	}
	public class ModelOfExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ModelOfExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelOfExecutionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoutineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoutineRoutineParserRuleCall_2_0 = (RuleCall)cRoutineAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cInitKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cInitRoutineAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInitRoutineMoeRoutineParserRuleCall_3_0_1_0 = (RuleCall)cInitRoutineAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cFinalKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinalRoutineAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinalRoutineMoeRoutineParserRuleCall_3_1_1_0 = (RuleCall)cFinalRoutineAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cEnableKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEnableRoutineAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEnableRoutineMoeRoutineParserRuleCall_3_2_1_0 = (RuleCall)cEnableRoutineAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cDisableKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDisableRoutineAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cDisableRoutineMoeRoutineParserRuleCall_3_3_1_0 = (RuleCall)cDisableRoutineAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cConcurrencyKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cConcurrencyRoutineAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cConcurrencyRoutineMoeRoutineParserRuleCall_3_4_1_0 = (RuleCall)cConcurrencyRoutineAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cScheduleKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cScheduleRoutineAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cScheduleRoutineMoeRoutineParserRuleCall_3_5_1_0 = (RuleCall)cScheduleRoutineAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cIrunKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cIrunRoutineAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cIrunRoutineMoeRoutineParserRuleCall_3_6_1_0 = (RuleCall)cIrunRoutineAssignment_3_6_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cRunKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cRunRoutineAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cRunRoutineMoeRoutineParserRuleCall_3_7_1_0 = (RuleCall)cRunRoutineAssignment_3_7_1.eContents().get(0);
		private final Assignment cRoutineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRoutineRoutineParserRuleCall_4_0 = (RuleCall)cRoutineAssignment_4.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Section Model Of Execution Rules
		//////////////////////////////////////////////////////////////////////////////////
		//ModelOfExecution fmlInfra::ModelOfExecution:
		//	{fmlInfra::ModelOfExecution}
		//	'@moe:'
		//	routine+=Routine* (('@init' initRoutine=moeRoutine)?
		//	& ('@final' finalRoutine=moeRoutine)?
		//	& ('@enable' enableRoutine=moeRoutine)?
		//	& ('@disable' disableRoutine=moeRoutine)?
		//	& ('@concurrency' concurrencyRoutine=moeRoutine)?
		//	& ('@schedule' scheduleRoutine=moeRoutine)?
		//	& ('@irun' irunRoutine=moeRoutine)?
		//	& ('@run' runRoutine=moeRoutine)?) routine+=Routine*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ModelOfExecution} '@moe:' routine+=Routine* (('@init' initRoutine=moeRoutine)? & ('@final'
		//finalRoutine=moeRoutine)? & ('@enable' enableRoutine=moeRoutine)? & ('@disable' disableRoutine=moeRoutine)? &
		//('@concurrency' concurrencyRoutine=moeRoutine)? & ('@schedule' scheduleRoutine=moeRoutine)? & ('@irun'
		//irunRoutine=moeRoutine)? & ('@run' runRoutine=moeRoutine)?) routine+=Routine*
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ModelOfExecution}
		public Action getModelOfExecutionAction_0() { return cModelOfExecutionAction_0; }
		
		//'@moe:'
		public Keyword getMoeKeyword_1() { return cMoeKeyword_1; }
		
		//routine+=Routine*
		public Assignment getRoutineAssignment_2() { return cRoutineAssignment_2; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_2_0() { return cRoutineRoutineParserRuleCall_2_0; }
		
		//(('@init' initRoutine=moeRoutine)? & ('@final' finalRoutine=moeRoutine)? & ('@enable' enableRoutine=moeRoutine)? &
		//('@disable' disableRoutine=moeRoutine)? & ('@concurrency' concurrencyRoutine=moeRoutine)? & ('@schedule'
		//scheduleRoutine=moeRoutine)? & ('@irun' irunRoutine=moeRoutine)? & ('@run' runRoutine=moeRoutine)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('@init' initRoutine=moeRoutine)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'@init'
		public Keyword getInitKeyword_3_0_0() { return cInitKeyword_3_0_0; }
		
		//initRoutine=moeRoutine
		public Assignment getInitRoutineAssignment_3_0_1() { return cInitRoutineAssignment_3_0_1; }
		
		//moeRoutine
		public RuleCall getInitRoutineMoeRoutineParserRuleCall_3_0_1_0() { return cInitRoutineMoeRoutineParserRuleCall_3_0_1_0; }
		
		//('@final' finalRoutine=moeRoutine)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'@final'
		public Keyword getFinalKeyword_3_1_0() { return cFinalKeyword_3_1_0; }
		
		//finalRoutine=moeRoutine
		public Assignment getFinalRoutineAssignment_3_1_1() { return cFinalRoutineAssignment_3_1_1; }
		
		//moeRoutine
		public RuleCall getFinalRoutineMoeRoutineParserRuleCall_3_1_1_0() { return cFinalRoutineMoeRoutineParserRuleCall_3_1_1_0; }
		
		//('@enable' enableRoutine=moeRoutine)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'@enable'
		public Keyword getEnableKeyword_3_2_0() { return cEnableKeyword_3_2_0; }
		
		//enableRoutine=moeRoutine
		public Assignment getEnableRoutineAssignment_3_2_1() { return cEnableRoutineAssignment_3_2_1; }
		
		//moeRoutine
		public RuleCall getEnableRoutineMoeRoutineParserRuleCall_3_2_1_0() { return cEnableRoutineMoeRoutineParserRuleCall_3_2_1_0; }
		
		//('@disable' disableRoutine=moeRoutine)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'@disable'
		public Keyword getDisableKeyword_3_3_0() { return cDisableKeyword_3_3_0; }
		
		//disableRoutine=moeRoutine
		public Assignment getDisableRoutineAssignment_3_3_1() { return cDisableRoutineAssignment_3_3_1; }
		
		//moeRoutine
		public RuleCall getDisableRoutineMoeRoutineParserRuleCall_3_3_1_0() { return cDisableRoutineMoeRoutineParserRuleCall_3_3_1_0; }
		
		//('@concurrency' concurrencyRoutine=moeRoutine)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'@concurrency'
		public Keyword getConcurrencyKeyword_3_4_0() { return cConcurrencyKeyword_3_4_0; }
		
		//concurrencyRoutine=moeRoutine
		public Assignment getConcurrencyRoutineAssignment_3_4_1() { return cConcurrencyRoutineAssignment_3_4_1; }
		
		//moeRoutine
		public RuleCall getConcurrencyRoutineMoeRoutineParserRuleCall_3_4_1_0() { return cConcurrencyRoutineMoeRoutineParserRuleCall_3_4_1_0; }
		
		//('@schedule' scheduleRoutine=moeRoutine)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'@schedule'
		public Keyword getScheduleKeyword_3_5_0() { return cScheduleKeyword_3_5_0; }
		
		//scheduleRoutine=moeRoutine
		public Assignment getScheduleRoutineAssignment_3_5_1() { return cScheduleRoutineAssignment_3_5_1; }
		
		//moeRoutine
		public RuleCall getScheduleRoutineMoeRoutineParserRuleCall_3_5_1_0() { return cScheduleRoutineMoeRoutineParserRuleCall_3_5_1_0; }
		
		//('@irun' irunRoutine=moeRoutine)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'@irun'
		public Keyword getIrunKeyword_3_6_0() { return cIrunKeyword_3_6_0; }
		
		//irunRoutine=moeRoutine
		public Assignment getIrunRoutineAssignment_3_6_1() { return cIrunRoutineAssignment_3_6_1; }
		
		//moeRoutine
		public RuleCall getIrunRoutineMoeRoutineParserRuleCall_3_6_1_0() { return cIrunRoutineMoeRoutineParserRuleCall_3_6_1_0; }
		
		//('@run' runRoutine=moeRoutine)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'@run'
		public Keyword getRunKeyword_3_7_0() { return cRunKeyword_3_7_0; }
		
		//runRoutine=moeRoutine
		public Assignment getRunRoutineAssignment_3_7_1() { return cRunRoutineAssignment_3_7_1; }
		
		//moeRoutine
		public RuleCall getRunRoutineMoeRoutineParserRuleCall_3_7_1_0() { return cRunRoutineMoeRoutineParserRuleCall_3_7_1_0; }
		
		//routine+=Routine*
		public Assignment getRoutineAssignment_4() { return cRoutineAssignment_4; }
		
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_4_0() { return cRoutineRoutineParserRuleCall_4_0; }
	}
	public class MoeRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.moeRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDomainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDomainFunctionalParameterSetParserRuleCall_1_1_0 = (RuleCall)cDomainAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cCodomainAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cCodomainFunctionalParameterSetParserRuleCall_2_1_0_1_0 = (RuleCall)cCodomainAssignment_2_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Assignment cCodomainAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cCodomainFunctionalParameterSetParserRuleCall_2_1_1_0 = (RuleCall)cCodomainAssignment_2_1_1.eContents().get(0);
		private final Assignment cBodyBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_3_0 = (RuleCall)cBodyBlockAssignment_3.eContents().get(0);
		
		//moeRoutine fmlInfra::Routine:
		//	{fmlInfra::Routine} ('(' domain=FunctionalParameterSet? ')')? ('->' ('(' codomain=FunctionalParameterSet ')'
		//	| codomain=FunctionalParameterSet))?
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} ('(' domain=FunctionalParameterSet? ')')? ('->' ('(' codomain=FunctionalParameterSet ')' |
		//codomain=FunctionalParameterSet))? bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//('(' domain=FunctionalParameterSet? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//domain=FunctionalParameterSet?
		public Assignment getDomainAssignment_1_1() { return cDomainAssignment_1_1; }
		
		//FunctionalParameterSet
		public RuleCall getDomainFunctionalParameterSetParserRuleCall_1_1_0() { return cDomainFunctionalParameterSetParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//('->' ('(' codomain=FunctionalParameterSet ')' | codomain=FunctionalParameterSet))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//('(' codomain=FunctionalParameterSet ')' | codomain=FunctionalParameterSet)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'(' codomain=FunctionalParameterSet ')'
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0_0() { return cLeftParenthesisKeyword_2_1_0_0; }
		
		//codomain=FunctionalParameterSet
		public Assignment getCodomainAssignment_2_1_0_1() { return cCodomainAssignment_2_1_0_1; }
		
		//FunctionalParameterSet
		public RuleCall getCodomainFunctionalParameterSetParserRuleCall_2_1_0_1_0() { return cCodomainFunctionalParameterSetParserRuleCall_2_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_0_2() { return cRightParenthesisKeyword_2_1_0_2; }
		
		//codomain=FunctionalParameterSet
		public Assignment getCodomainAssignment_2_1_1() { return cCodomainAssignment_2_1_1; }
		
		//FunctionalParameterSet
		public RuleCall getCodomainFunctionalParameterSetParserRuleCall_2_1_1_0() { return cCodomainFunctionalParameterSetParserRuleCall_2_1_1_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_3() { return cBodyBlockAssignment_3; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_3_0() { return cBodyBlockBlockStatementParserRuleCall_3_0; }
	}
	public class RoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Routine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cMacroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRoutineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDomainAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDomainFunctionalParameterSetParserRuleCall_5_1_0 = (RuleCall)cDomainAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Assignment cCodomainAssignment_6_1_0_1 = (Assignment)cGroup_6_1_0.eContents().get(1);
		private final RuleCall cCodomainFunctionalParameterSetParserRuleCall_6_1_0_1_0 = (RuleCall)cCodomainAssignment_6_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_1_0_2 = (Keyword)cGroup_6_1_0.eContents().get(2);
		private final Assignment cCodomainAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cCodomainFormalParameterSetParserRuleCall_6_1_1_0 = (RuleCall)cCodomainAssignment_6_1_1.eContents().get(0);
		private final Assignment cBodyBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_7_0 = (RuleCall)cBodyBlockAssignment_7.eContents().get(0);
		
		//Routine fmlInfra::Routine:
		//	visibility=VisibilityKind? 'macro'? 'routine'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('(' domain=FunctionalParameterSet? ')')? ('-->' ('('
		//	codomain=FunctionalParameterSet ')'
		//	| codomain=FormalParameterSet))?
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityKind? 'macro'? 'routine' name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//domain=FunctionalParameterSet? ')')? ('-->' ('(' codomain=FunctionalParameterSet ')' | codomain=FormalParameterSet))?
		//bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }
		
		//'macro'?
		public Keyword getMacroKeyword_1() { return cMacroKeyword_1; }
		
		//'routine'
		public Keyword getRoutineKeyword_2() { return cRoutineKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('(' domain=FunctionalParameterSet? ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//domain=FunctionalParameterSet?
		public Assignment getDomainAssignment_5_1() { return cDomainAssignment_5_1; }
		
		//FunctionalParameterSet
		public RuleCall getDomainFunctionalParameterSetParserRuleCall_5_1_0() { return cDomainFunctionalParameterSetParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//('-->' ('(' codomain=FunctionalParameterSet ')' | codomain=FormalParameterSet))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_6_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_6_0; }
		
		//('(' codomain=FunctionalParameterSet ')' | codomain=FormalParameterSet)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//'(' codomain=FunctionalParameterSet ')'
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1_0_0() { return cLeftParenthesisKeyword_6_1_0_0; }
		
		//codomain=FunctionalParameterSet
		public Assignment getCodomainAssignment_6_1_0_1() { return cCodomainAssignment_6_1_0_1; }
		
		//FunctionalParameterSet
		public RuleCall getCodomainFunctionalParameterSetParserRuleCall_6_1_0_1_0() { return cCodomainFunctionalParameterSetParserRuleCall_6_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_1_0_2() { return cRightParenthesisKeyword_6_1_0_2; }
		
		//codomain=FormalParameterSet
		public Assignment getCodomainAssignment_6_1_1() { return cCodomainAssignment_6_1_1; }
		
		//FormalParameterSet
		public RuleCall getCodomainFormalParameterSetParserRuleCall_6_1_1_0() { return cCodomainFormalParameterSetParserRuleCall_6_1_1_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_7() { return cBodyBlockAssignment_7; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_7_0() { return cBodyBlockBlockStatementParserRuleCall_7_0; }
	}
	public class ModelOfInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ModelOfInteraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelOfInteractionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRoutesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRoutesRouteParserRuleCall_2_0_0 = (RuleCall)cRoutesAssignment_2_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConnectionsConnectionParserRuleCall_2_1_0 = (RuleCall)cConnectionsAssignment_2_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Section Model Of Interaction / Communication Rules
		//////////////////////////////////////////////////////////////////////////////////
		//ModelOfInteraction fmlInfra::ModelOfInteraction:
		//	{fmlInfra::ModelOfInteraction}
		//	'@com:' (routes+=Route
		//	| connections+=Connection)*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ModelOfInteraction} '@com:' (routes+=Route | connections+=Connection)*
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ModelOfInteraction}
		public Action getModelOfInteractionAction_0() { return cModelOfInteractionAction_0; }
		
		//'@com:'
		public Keyword getComKeyword_1() { return cComKeyword_1; }
		
		//(routes+=Route | connections+=Connection)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//routes+=Route
		public Assignment getRoutesAssignment_2_0() { return cRoutesAssignment_2_0; }
		
		//Route
		public RuleCall getRoutesRouteParserRuleCall_2_0_0() { return cRoutesRouteParserRuleCall_2_0_0; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_2_1() { return cConnectionsAssignment_2_1; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_2_1_0() { return cConnectionsConnectionParserRuleCall_2_1_0; }
	}
	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRouteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRouteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProtocolComRouteProtocolParserRuleCall_3_0 = (RuleCall)cProtocolAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNameESIdentifierParserRuleCall_5_0_0 = (RuleCall)cNameAssignment_5_0.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_5_1_0 = (RuleCall)cUnrestrictedNameAssignment_5_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cAsteriskKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Assignment cSignalsAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final CrossReference cSignalsSignalCrossReference_7_1_0_0 = (CrossReference)cSignalsAssignment_7_1_0.eContents().get(0);
		private final RuleCall cSignalsSignalESUfidParserRuleCall_7_1_0_0_1 = (RuleCall)cSignalsSignalCrossReference_7_1_0_0.eContents().get(1);
		private final Group cGroup_7_1_1 = (Group)cGroup_7_1.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_1_0 = (Keyword)cGroup_7_1_1.eContents().get(0);
		private final Assignment cSignalsAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final CrossReference cSignalsSignalCrossReference_7_1_1_1_0 = (CrossReference)cSignalsAssignment_7_1_1_1.eContents().get(0);
		private final RuleCall cSignalsSignalESUfidParserRuleCall_7_1_1_1_0_1 = (RuleCall)cSignalsSignalCrossReference_7_1_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Route fmlInfra::Route:
		//	{fmlInfra::Route}
		//	'route' '<' protocol=ComRouteProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)?
		//	'[' ('*'
		//	| signals+=[fmlInfra::Signal|ESUfid] (',' signals+=[fmlInfra::Signal|ESUfid])*)
		//	']' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Route} 'route' '<' protocol=ComRouteProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)? '['
		//('*' | signals+=[fmlInfra::Signal|ESUfid] (',' signals+=[fmlInfra::Signal|ESUfid])*) ']' ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Route}
		public Action getRouteAction_0() { return cRouteAction_0; }
		
		//'route'
		public Keyword getRouteKeyword_1() { return cRouteKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//protocol=ComRouteProtocol
		public Assignment getProtocolAssignment_3() { return cProtocolAssignment_3; }
		
		//ComRouteProtocol
		public RuleCall getProtocolComRouteProtocolParserRuleCall_3_0() { return cProtocolComRouteProtocolParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//(name=ESIdentifier unrestrictedName=UnrestrictedName?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_5_0_0() { return cNameESIdentifierParserRuleCall_5_0_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_5_1() { return cUnrestrictedNameAssignment_5_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_5_1_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_5_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//('*' | signals+=[fmlInfra::Signal|ESUfid] (',' signals+=[fmlInfra::Signal|ESUfid])*)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'*'
		public Keyword getAsteriskKeyword_7_0() { return cAsteriskKeyword_7_0; }
		
		//signals+=[fmlInfra::Signal|ESUfid] (',' signals+=[fmlInfra::Signal|ESUfid])*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//signals+=[fmlInfra::Signal|ESUfid]
		public Assignment getSignalsAssignment_7_1_0() { return cSignalsAssignment_7_1_0; }
		
		//[fmlInfra::Signal|ESUfid]
		public CrossReference getSignalsSignalCrossReference_7_1_0_0() { return cSignalsSignalCrossReference_7_1_0_0; }
		
		//ESUfid
		public RuleCall getSignalsSignalESUfidParserRuleCall_7_1_0_0_1() { return cSignalsSignalESUfidParserRuleCall_7_1_0_0_1; }
		
		//(',' signals+=[fmlInfra::Signal|ESUfid])*
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_1_0() { return cCommaKeyword_7_1_1_0; }
		
		//signals+=[fmlInfra::Signal|ESUfid]
		public Assignment getSignalsAssignment_7_1_1_1() { return cSignalsAssignment_7_1_1_1; }
		
		//[fmlInfra::Signal|ESUfid]
		public CrossReference getSignalsSignalCrossReference_7_1_1_1_0() { return cSignalsSignalCrossReference_7_1_1_1_0; }
		
		//ESUfid
		public RuleCall getSignalsSignalESUfidParserRuleCall_7_1_1_1_0_1() { return cSignalsSignalESUfidParserRuleCall_7_1_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ComRouteProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComRouteProtocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProtocolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProtocolComProtocolKindEnumRuleCall_0_0 = (RuleCall)cProtocolAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cProtocolAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cProtocolBufferProtocolKindEnumRuleCall_1_0_0 = (RuleCall)cProtocolAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Assignment cInner_bufferAssignment_1_1_0_1_0 = (Assignment)cAlternatives_1_1_0_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_1_1_0_1_0_0 = (RuleCall)cInner_bufferAssignment_1_1_0_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_1_1_0_1_1_0 = (CrossReference)cRef_bufferAssignment_1_1_0_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_1_1_0_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_1_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Assignment cInner_bufferAssignment_1_1_1_1_0 = (Assignment)cAlternatives_1_1_1_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_1_1_1_1_0_0 = (RuleCall)cInner_bufferAssignment_1_1_1_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_1_1_1_1_1 = (Assignment)cAlternatives_1_1_1_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_1_1_1_1_1_0 = (CrossReference)cRef_bufferAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_1_1_1_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_1_1_1_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Assignment cInner_bufferAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_2_0 = (RuleCall)cInner_bufferAssignment_2.eContents().get(0);
		private final Assignment cRef_bufferAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cRef_bufferBufferCrossReference_3_0 = (CrossReference)cRef_bufferAssignment_3.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_3_0_1 = (RuleCall)cRef_bufferBufferCrossReference_3_0.eContents().get(1);
		
		//ComRouteProtocol fmlInfra::ComProtocol:
		//	protocol=ComProtocolKind
		//	| protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		//	| inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]
		@Override public ParserRule getRule() { return rule; }
		
		//protocol=ComProtocolKind | protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		//'>')? | inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//protocol=ComProtocolKind
		public Assignment getProtocolAssignment_0() { return cProtocolAssignment_0; }
		
		//ComProtocolKind
		public RuleCall getProtocolComProtocolKindEnumRuleCall_0_0() { return cProtocolComProtocolKindEnumRuleCall_0_0; }
		
		//protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<'
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//protocol=BufferProtocolKind
		public Assignment getProtocolAssignment_1_0() { return cProtocolAssignment_1_0; }
		
		//BufferProtocolKind
		public RuleCall getProtocolBufferProtocolKindEnumRuleCall_1_0_0() { return cProtocolBufferProtocolKindEnumRuleCall_1_0_0; }
		
		//(':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_0_0() { return cColonKeyword_1_1_0_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_1_1_0_1_0() { return cInner_bufferAssignment_1_1_0_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_1_1_0_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_1_1_0_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_1_1_0_1_1() { return cRef_bufferAssignment_1_1_0_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_1_1_0_1_1_0() { return cRef_bufferBufferCrossReference_1_1_0_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_1_1_0_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_1_1_0_1_1_0_1; }
		
		//'<' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1_0() { return cLessThanSignKeyword_1_1_1_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_1_1_1_1_0() { return cInner_bufferAssignment_1_1_1_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_1_1_1_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_1_1_1_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_1_1_1_1_1() { return cRef_bufferAssignment_1_1_1_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_1_1_1_1_1_0() { return cRef_bufferBufferCrossReference_1_1_1_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_1_1_1_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_1_1_1_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_1_2() { return cGreaterThanSignKeyword_1_1_1_2; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_2() { return cInner_bufferAssignment_2; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_2_0() { return cInner_bufferBufferContainerTypeParserRuleCall_2_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_3() { return cRef_bufferAssignment_3; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_3_0() { return cRef_bufferBufferCrossReference_3_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_3_0_1() { return cRef_bufferBufferESUfidParserRuleCall_3_0_1; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolComProtocolParserRuleCall_2_0 = (RuleCall)cProtocolAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0 = (RuleCall)cUnrestrictedNameAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComPointsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComPointsComPointParserRuleCall_6_0 = (RuleCall)cComPointsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Connection fmlInfra::Connection:
		//	'connect' '<' protocol=ComProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)?
		//	'{' comPoints+=ComPoint+ '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'connect' '<' protocol=ComProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)? '{' comPoints+=ComPoint+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'connect'
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//protocol=ComProtocol
		public Assignment getProtocolAssignment_2() { return cProtocolAssignment_2; }
		
		//ComProtocol
		public RuleCall getProtocolComProtocolParserRuleCall_2_0() { return cProtocolComProtocolParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//(name=ESIdentifier unrestrictedName=UnrestrictedName?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0_0() { return cNameESIdentifierParserRuleCall_4_0_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4_1() { return cUnrestrictedNameAssignment_4_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//comPoints+=ComPoint+
		public Assignment getComPointsAssignment_6() { return cComPointsAssignment_6; }
		
		//ComPoint
		public RuleCall getComPointsComPointParserRuleCall_6_0() { return cComPointsComPointParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ComProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComProtocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProtocolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProtocolComEnvRdvProtocolKindEnumRuleCall_0_0 = (RuleCall)cProtocolAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cProtocolAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cProtocolComMultiRdvProtocolKindEnumRuleCall_1_0_0 = (RuleCall)cProtocolAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cCastAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCastComCastKingEnumRuleCall_1_1_1_0 = (RuleCall)cCastAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cProtocolAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cProtocolBufferProtocolKindEnumRuleCall_2_0_0 = (RuleCall)cProtocolAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_0_1 = (Alternatives)cGroup_2_1_0.eContents().get(1);
		private final Assignment cInner_bufferAssignment_2_1_0_1_0 = (Assignment)cAlternatives_2_1_0_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_2_1_0_1_0_0 = (RuleCall)cInner_bufferAssignment_2_1_0_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_2_1_0_1_1 = (Assignment)cAlternatives_2_1_0_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_2_1_0_1_1_0 = (CrossReference)cRef_bufferAssignment_2_1_0_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_2_1_0_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_2_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1_1 = (Alternatives)cGroup_2_1_1.eContents().get(1);
		private final Assignment cInner_bufferAssignment_2_1_1_1_0 = (Assignment)cAlternatives_2_1_1_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_2_1_1_1_0_0 = (RuleCall)cInner_bufferAssignment_2_1_1_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_2_1_1_1_1 = (Assignment)cAlternatives_2_1_1_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_2_1_1_1_1_0 = (CrossReference)cRef_bufferAssignment_2_1_1_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_2_1_1_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_2_1_1_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_1_1_2 = (Keyword)cGroup_2_1_1.eContents().get(2);
		private final Assignment cInner_bufferAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_3_0 = (RuleCall)cInner_bufferAssignment_3.eContents().get(0);
		private final Assignment cRef_bufferAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final CrossReference cRef_bufferBufferCrossReference_4_0 = (CrossReference)cRef_bufferAssignment_4.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_4_0_1 = (RuleCall)cRef_bufferBufferCrossReference_4_0.eContents().get(1);
		private final Assignment cCastAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCastComCastKingEnumRuleCall_5_0 = (RuleCall)cCastAssignment_5.eContents().get(0);
		
		//ComProtocol fmlInfra::ComProtocol:
		//	protocol=ComEnvRdvProtocolKind
		//	| protocol=ComMultiRdvProtocolKind ('<' cast=ComCastKing '>')?
		//	| protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		//	| inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid] | cast=ComCastKing
		@Override public ParserRule getRule() { return rule; }
		
		//protocol=ComEnvRdvProtocolKind | protocol=ComMultiRdvProtocolKind ('<' cast=ComCastKing '>')? |
		//protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<'
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')? | inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid] | cast=ComCastKing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//protocol=ComEnvRdvProtocolKind
		public Assignment getProtocolAssignment_0() { return cProtocolAssignment_0; }
		
		//ComEnvRdvProtocolKind
		public RuleCall getProtocolComEnvRdvProtocolKindEnumRuleCall_0_0() { return cProtocolComEnvRdvProtocolKindEnumRuleCall_0_0; }
		
		//protocol=ComMultiRdvProtocolKind ('<' cast=ComCastKing '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//protocol=ComMultiRdvProtocolKind
		public Assignment getProtocolAssignment_1_0() { return cProtocolAssignment_1_0; }
		
		//ComMultiRdvProtocolKind
		public RuleCall getProtocolComMultiRdvProtocolKindEnumRuleCall_1_0_0() { return cProtocolComMultiRdvProtocolKindEnumRuleCall_1_0_0; }
		
		//('<' cast=ComCastKing '>')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0() { return cLessThanSignKeyword_1_1_0; }
		
		//cast=ComCastKing
		public Assignment getCastAssignment_1_1_1() { return cCastAssignment_1_1_1; }
		
		//ComCastKing
		public RuleCall getCastComCastKingEnumRuleCall_1_1_1_0() { return cCastComCastKingEnumRuleCall_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }
		
		//protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<'
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//protocol=BufferProtocolKind
		public Assignment getProtocolAssignment_2_0() { return cProtocolAssignment_2_0; }
		
		//BufferProtocolKind
		public RuleCall getProtocolBufferProtocolKindEnumRuleCall_2_0_0() { return cProtocolBufferProtocolKindEnumRuleCall_2_0_0; }
		
		//(':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_0_0() { return cColonKeyword_2_1_0_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_2_1_0_1() { return cAlternatives_2_1_0_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_2_1_0_1_0() { return cInner_bufferAssignment_2_1_0_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_2_1_0_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_2_1_0_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_2_1_0_1_1() { return cRef_bufferAssignment_2_1_0_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_2_1_0_1_1_0() { return cRef_bufferBufferCrossReference_2_1_0_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_2_1_0_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_2_1_0_1_1_0_1; }
		
		//'<' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>'
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_1_1_0() { return cLessThanSignKeyword_2_1_1_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_2_1_1_1() { return cAlternatives_2_1_1_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_2_1_1_1_0() { return cInner_bufferAssignment_2_1_1_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_2_1_1_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_2_1_1_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_2_1_1_1_1() { return cRef_bufferAssignment_2_1_1_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_2_1_1_1_1_0() { return cRef_bufferBufferCrossReference_2_1_1_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_2_1_1_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_2_1_1_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_1_1_2() { return cGreaterThanSignKeyword_2_1_1_2; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_3() { return cInner_bufferAssignment_3; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_3_0() { return cInner_bufferBufferContainerTypeParserRuleCall_3_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_4() { return cRef_bufferAssignment_4; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_4_0() { return cRef_bufferBufferCrossReference_4_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_4_0_1() { return cRef_bufferBufferESUfidParserRuleCall_4_0_1; }
		
		//cast=ComCastKing
		public Assignment getCastAssignment_5() { return cCastAssignment_5; }
		
		//ComCastKing
		public RuleCall getCastComCastKingEnumRuleCall_5_0() { return cCastComCastKingEnumRuleCall_5_0; }
	}
	public class ComPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProtocolAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProtocolComPointProtocolParserRuleCall_2_1_0 = (RuleCall)cProtocolAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cPointAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cPointComElementParserRuleCall_3_0_0_0 = (RuleCall)cPointAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPointsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPointsComElementParserRuleCall_3_1_1_0 = (RuleCall)cPointsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//ComPoint fmlInfra::ComPoint:
		//	{fmlInfra::ComPoint} direction=ChannelDirection ('<' protocol=ComPointProtocol '>')? (point=ComElement ';'
		//	| '{' points+=ComElement '}')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ComPoint} direction=ChannelDirection ('<' protocol=ComPointProtocol '>')? (point=ComElement ';' | '{'
		//points+=ComElement '}')
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ComPoint}
		public Action getComPointAction_0() { return cComPointAction_0; }
		
		//direction=ChannelDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//('<' protocol=ComPointProtocol '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//protocol=ComPointProtocol
		public Assignment getProtocolAssignment_2_1() { return cProtocolAssignment_2_1; }
		
		//ComPointProtocol
		public RuleCall getProtocolComPointProtocolParserRuleCall_2_1_0() { return cProtocolComPointProtocolParserRuleCall_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
		
		//(point=ComElement ';' | '{' points+=ComElement '}')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//point=ComElement ';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//point=ComElement
		public Assignment getPointAssignment_3_0_0() { return cPointAssignment_3_0_0; }
		
		//ComElement
		public RuleCall getPointComElementParserRuleCall_3_0_0_0() { return cPointComElementParserRuleCall_3_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }
		
		//'{' points+=ComElement '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//points+=ComElement
		public Assignment getPointsAssignment_3_1_1() { return cPointsAssignment_3_1_1; }
		
		//ComElement
		public RuleCall getPointsComElementParserRuleCall_3_1_1_0() { return cPointsComElementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class ComPointProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComPointProtocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cProtocolAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cProtocolBufferProtocolKindEnumRuleCall_0_0_0 = (RuleCall)cProtocolAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_1 = (Alternatives)cGroup_0_1_0.eContents().get(1);
		private final Assignment cInner_bufferAssignment_0_1_0_1_0 = (Assignment)cAlternatives_0_1_0_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_0_1_0_1_0_0 = (RuleCall)cInner_bufferAssignment_0_1_0_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_0_1_0_1_1 = (Assignment)cAlternatives_0_1_0_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_0_1_0_1_1_0 = (CrossReference)cRef_bufferAssignment_0_1_0_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_0_1_0_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_0_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1_1 = (Alternatives)cGroup_0_1_1.eContents().get(1);
		private final Assignment cInner_bufferAssignment_0_1_1_1_0 = (Assignment)cAlternatives_0_1_1_1.eContents().get(0);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_0_1_1_1_0_0 = (RuleCall)cInner_bufferAssignment_0_1_1_1_0.eContents().get(0);
		private final Assignment cRef_bufferAssignment_0_1_1_1_1 = (Assignment)cAlternatives_0_1_1_1.eContents().get(1);
		private final CrossReference cRef_bufferBufferCrossReference_0_1_1_1_1_0 = (CrossReference)cRef_bufferAssignment_0_1_1_1_1.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_0_1_1_1_1_0_1 = (RuleCall)cRef_bufferBufferCrossReference_0_1_1_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_1_1_2 = (Keyword)cGroup_0_1_1.eContents().get(2);
		private final Assignment cInner_bufferAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInner_bufferBufferContainerTypeParserRuleCall_1_0 = (RuleCall)cInner_bufferAssignment_1.eContents().get(0);
		private final Assignment cRef_bufferAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cRef_bufferBufferCrossReference_2_0 = (CrossReference)cRef_bufferAssignment_2.eContents().get(0);
		private final RuleCall cRef_bufferBufferESUfidParserRuleCall_2_0_1 = (RuleCall)cRef_bufferBufferCrossReference_2_0.eContents().get(1);
		
		//ComPointProtocol fmlInfra::ComProtocol:
		//	protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		//	| inner_buffer=BufferContainerType
		//	| ref_buffer=[fmlInfra::Buffer|ESUfid]
		@Override public ParserRule getRule() { return rule; }
		
		//protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<'
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')? | inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<'
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Group getGroup_0() { return cGroup_0; }
		
		//protocol=BufferProtocolKind
		public Assignment getProtocolAssignment_0_0() { return cProtocolAssignment_0_0; }
		
		//BufferProtocolKind
		public RuleCall getProtocolBufferProtocolKindEnumRuleCall_0_0_0() { return cProtocolBufferProtocolKindEnumRuleCall_0_0_0; }
		
		//(':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType |
		//ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//':' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_0_0() { return cColonKeyword_0_1_0_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_0_1_0_1() { return cAlternatives_0_1_0_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_0_1_0_1_0() { return cInner_bufferAssignment_0_1_0_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_0_1_0_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_0_1_0_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_0_1_0_1_1() { return cRef_bufferAssignment_0_1_0_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_0_1_0_1_1_0() { return cRef_bufferBufferCrossReference_0_1_0_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_0_1_0_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_0_1_0_1_1_0_1; }
		
		//'<' (inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid]) '>'
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1_1_0() { return cLessThanSignKeyword_0_1_1_0; }
		
		//(inner_buffer=BufferContainerType | ref_buffer=[fmlInfra::Buffer|ESUfid])
		public Alternatives getAlternatives_0_1_1_1() { return cAlternatives_0_1_1_1; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_0_1_1_1_0() { return cInner_bufferAssignment_0_1_1_1_0; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_0_1_1_1_0_0() { return cInner_bufferBufferContainerTypeParserRuleCall_0_1_1_1_0_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_0_1_1_1_1() { return cRef_bufferAssignment_0_1_1_1_1; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_0_1_1_1_1_0() { return cRef_bufferBufferCrossReference_0_1_1_1_1_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_0_1_1_1_1_0_1() { return cRef_bufferBufferESUfidParserRuleCall_0_1_1_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1_1_2() { return cGreaterThanSignKeyword_0_1_1_2; }
		
		//inner_buffer=BufferContainerType
		public Assignment getInner_bufferAssignment_1() { return cInner_bufferAssignment_1; }
		
		//BufferContainerType
		public RuleCall getInner_bufferBufferContainerTypeParserRuleCall_1_0() { return cInner_bufferBufferContainerTypeParserRuleCall_1_0; }
		
		//ref_buffer=[fmlInfra::Buffer|ESUfid]
		public Assignment getRef_bufferAssignment_2() { return cRef_bufferAssignment_2; }
		
		//[fmlInfra::Buffer|ESUfid]
		public CrossReference getRef_bufferBufferCrossReference_2_0() { return cRef_bufferBufferCrossReference_2_0; }
		
		//ESUfid
		public RuleCall getRef_bufferBufferESUfidParserRuleCall_2_0_1() { return cRef_bufferBufferESUfidParserRuleCall_2_0_1; }
	}
	public class ComElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralPureReferenceElementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cValueElementSpecificationTargetAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cKindAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cKindAlternatives_0_1_1_0 = (Alternatives)cKindAssignment_0_1_1.eContents().get(0);
		private final RuleCall cKindValueDotFieldExpressionKindEnumRuleCall_0_1_1_0_0 = (RuleCall)cKindAlternatives_0_1_1_0.eContents().get(0);
		private final RuleCall cKindValueArrowFieldExpressionKindEnumRuleCall_0_1_1_0_1 = (RuleCall)cKindAlternatives_0_1_1_0.eContents().get(1);
		private final Assignment cElementAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_0_1_2_0 = (CrossReference)cElementAssignment_0_1_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_0_1_2_0_1 = (RuleCall)cElementNamedElementCrossReference_0_1_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValueElementSpecificationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetLiteralReferenceMachineContextParserRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		private final Assignment cKindAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cKindAlternatives_1_2_0 = (Alternatives)cKindAssignment_1_2.eContents().get(0);
		private final RuleCall cKindValueDotFieldExpressionKindEnumRuleCall_1_2_0_0 = (RuleCall)cKindAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cKindValueArrowFieldExpressionKindEnumRuleCall_1_2_0_1 = (RuleCall)cKindAlternatives_1_2_0.eContents().get(1);
		private final Assignment cElementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cElementNamedElementCrossReference_1_3_0 = (CrossReference)cElementAssignment_1_3.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_1_3_0_1 = (RuleCall)cElementNamedElementCrossReference_1_3_0.eContents().get(1);
		
		//ComElement fmlExpr::Expression:
		//	LiteralPureReferenceElement ({fmlExpr::ValueElementSpecification.target=current} kind=(ValueDotFieldExpressionKind |
		//	ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier])?
		//	| {fmlExpr::ValueElementSpecification} target=LiteralReferenceMachineContext
		//	// ( '.' | '->' ) element
		//	kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier]
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralPureReferenceElement ({fmlExpr::ValueElementSpecification.target=current} kind=(ValueDotFieldExpressionKind |
		//ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier])? | {fmlExpr::ValueElementSpecification}
		//target=LiteralReferenceMachineContext // ( '.' | '->' ) element
		//kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralPureReferenceElement ({fmlExpr::ValueElementSpecification.target=current} kind=(ValueDotFieldExpressionKind |
		//ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier])?
		public Group getGroup_0() { return cGroup_0; }
		
		//LiteralPureReferenceElement
		public RuleCall getLiteralPureReferenceElementParserRuleCall_0_0() { return cLiteralPureReferenceElementParserRuleCall_0_0; }
		
		//({fmlExpr::ValueElementSpecification.target=current} kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind)
		//element=[fmlCommon::NamedElement|ESIdentifier])?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_0_1_0() { return cValueElementSpecificationTargetAction_0_1_0; }
		
		//kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind)
		public Assignment getKindAssignment_0_1_1() { return cKindAssignment_0_1_1; }
		
		//(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind)
		public Alternatives getKindAlternatives_0_1_1_0() { return cKindAlternatives_0_1_1_0; }
		
		//ValueDotFieldExpressionKind
		public RuleCall getKindValueDotFieldExpressionKindEnumRuleCall_0_1_1_0_0() { return cKindValueDotFieldExpressionKindEnumRuleCall_0_1_1_0_0; }
		
		//ValueArrowFieldExpressionKind
		public RuleCall getKindValueArrowFieldExpressionKindEnumRuleCall_0_1_1_0_1() { return cKindValueArrowFieldExpressionKindEnumRuleCall_0_1_1_0_1; }
		
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_0_1_2() { return cElementAssignment_0_1_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_0_1_2_0() { return cElementNamedElementCrossReference_0_1_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_0_1_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_0_1_2_0_1; }
		
		//{fmlExpr::ValueElementSpecification} target=LiteralReferenceMachineContext // ( '.' | '->' ) element
		//kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier]
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::ValueElementSpecification}
		public Action getValueElementSpecificationAction_1_0() { return cValueElementSpecificationAction_1_0; }
		
		//target=LiteralReferenceMachineContext
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//LiteralReferenceMachineContext
		public RuleCall getTargetLiteralReferenceMachineContextParserRuleCall_1_1_0() { return cTargetLiteralReferenceMachineContextParserRuleCall_1_1_0; }
		
		//// ( '.' | '->' ) element
		//kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind)
		public Assignment getKindAssignment_1_2() { return cKindAssignment_1_2; }
		
		//(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind)
		public Alternatives getKindAlternatives_1_2_0() { return cKindAlternatives_1_2_0; }
		
		//ValueDotFieldExpressionKind
		public RuleCall getKindValueDotFieldExpressionKindEnumRuleCall_1_2_0_0() { return cKindValueDotFieldExpressionKindEnumRuleCall_1_2_0_0; }
		
		//ValueArrowFieldExpressionKind
		public RuleCall getKindValueArrowFieldExpressionKindEnumRuleCall_1_2_0_1() { return cKindValueArrowFieldExpressionKindEnumRuleCall_1_2_0_1; }
		
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_1_3() { return cElementAssignment_1_3; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_1_3_0() { return cElementNamedElementCrossReference_1_3_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_1_3_0_1() { return cElementNamedElementESIdentifierParserRuleCall_1_3_0_1; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructureTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntervalTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCollectionTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOtherDataTypeDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Sections Declarations Data Rules
		//////////////////////////////////////////////////////////////////////////////////
		////TypeDefinition returns fmlType::DataType
		////	: typedef?='type' name=ESIdentifier
		////		( support=DataTypeReference ';'
		////		| support=StructuredDataType
		////		)
		////	;
		//TypeDefinition fmlType::DataType:
		//	EnumerationTypeDefinition
		//	| StructureTypeDefinition
		//	| UnionTypeDefinition
		//	| ChoiceTypeDefinition
		//	| IntervalTypeDefinition
		//	| CollectionTypeDefinition
		//	| OtherDataTypeDefinition
		@Override public ParserRule getRule() { return rule; }
		
		//EnumerationTypeDefinition | StructureTypeDefinition | UnionTypeDefinition | ChoiceTypeDefinition |
		//IntervalTypeDefinition | CollectionTypeDefinition | OtherDataTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumerationTypeDefinition
		public RuleCall getEnumerationTypeDefinitionParserRuleCall_0() { return cEnumerationTypeDefinitionParserRuleCall_0; }
		
		//StructureTypeDefinition
		public RuleCall getStructureTypeDefinitionParserRuleCall_1() { return cStructureTypeDefinitionParserRuleCall_1; }
		
		//UnionTypeDefinition
		public RuleCall getUnionTypeDefinitionParserRuleCall_2() { return cUnionTypeDefinitionParserRuleCall_2; }
		
		//ChoiceTypeDefinition
		public RuleCall getChoiceTypeDefinitionParserRuleCall_3() { return cChoiceTypeDefinitionParserRuleCall_3; }
		
		//IntervalTypeDefinition
		public RuleCall getIntervalTypeDefinitionParserRuleCall_4() { return cIntervalTypeDefinitionParserRuleCall_4; }
		
		//CollectionTypeDefinition
		public RuleCall getCollectionTypeDefinitionParserRuleCall_5() { return cCollectionTypeDefinitionParserRuleCall_5; }
		
		//OtherDataTypeDefinition
		public RuleCall getOtherDataTypeDefinitionParserRuleCall_6() { return cOtherDataTypeDefinitionParserRuleCall_6; }
	}
	public class TypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TypeDefinitionImpl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationTypeDefinitionImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructureTypeDefinitionImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionTypeDefinitionImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceTypeDefinitionImplParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntervalTypeDefinitionImplParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCollectionTypeDefinitionImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOtherDataTypeDefinitionImplParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////TypeDefinitionImpl returns fmlType::DataTypeReference
		////	: name=ESIdentifier
		////		( support=DataTypeReference ';'
		////		| support=StructuredDataType
		////		)
		////	;
		//TypeDefinitionImpl fmlType::DataType:
		//	EnumerationTypeDefinitionImpl
		//	| StructureTypeDefinitionImpl
		//	| UnionTypeDefinitionImpl
		//	| ChoiceTypeDefinitionImpl
		//	| IntervalTypeDefinitionImpl
		//	| CollectionTypeDefinitionImpl
		//	| OtherDataTypeDefinitionImpl
		@Override public ParserRule getRule() { return rule; }
		
		//EnumerationTypeDefinitionImpl | StructureTypeDefinitionImpl | UnionTypeDefinitionImpl | ChoiceTypeDefinitionImpl |
		//IntervalTypeDefinitionImpl | CollectionTypeDefinitionImpl | OtherDataTypeDefinitionImpl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumerationTypeDefinitionImpl
		public RuleCall getEnumerationTypeDefinitionImplParserRuleCall_0() { return cEnumerationTypeDefinitionImplParserRuleCall_0; }
		
		//StructureTypeDefinitionImpl
		public RuleCall getStructureTypeDefinitionImplParserRuleCall_1() { return cStructureTypeDefinitionImplParserRuleCall_1; }
		
		//UnionTypeDefinitionImpl
		public RuleCall getUnionTypeDefinitionImplParserRuleCall_2() { return cUnionTypeDefinitionImplParserRuleCall_2; }
		
		//ChoiceTypeDefinitionImpl
		public RuleCall getChoiceTypeDefinitionImplParserRuleCall_3() { return cChoiceTypeDefinitionImplParserRuleCall_3; }
		
		//IntervalTypeDefinitionImpl
		public RuleCall getIntervalTypeDefinitionImplParserRuleCall_4() { return cIntervalTypeDefinitionImplParserRuleCall_4; }
		
		//CollectionTypeDefinitionImpl
		public RuleCall getCollectionTypeDefinitionImplParserRuleCall_5() { return cCollectionTypeDefinitionImplParserRuleCall_5; }
		
		//OtherDataTypeDefinitionImpl
		public RuleCall getOtherDataTypeDefinitionImplParserRuleCall_6() { return cOtherDataTypeDefinitionImplParserRuleCall_6; }
	}
	public class DataTypeMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DataTypeMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralIntegerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralReferenceElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataTypeMultiplicity fmlExpr::Expression:
		//	LiteralIntegerExpression
		//	| LiteralReferenceElement
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralIntegerExpression | LiteralReferenceElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralIntegerExpression
		public RuleCall getLiteralIntegerExpressionParserRuleCall_0() { return cLiteralIntegerExpressionParserRuleCall_0; }
		
		//LiteralReferenceElement
		public RuleCall getLiteralReferenceElementParserRuleCall_1() { return cLiteralReferenceElementParserRuleCall_1; }
	}
	public class DataTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DataTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleDataTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cDataTypeReferenceSupportAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cMultiplicityAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_0_1_2_0 = (RuleCall)cMultiplicityAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTyperefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTyperefDataTypeCrossReference_1_1_0 = (CrossReference)cTyperefAssignment_1_1.eContents().get(0);
		private final RuleCall cTyperefDataTypeESUfidParserRuleCall_1_1_0_1 = (RuleCall)cTyperefDataTypeCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_1_2_1_0 = (RuleCall)cMultiplicityAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//DataTypeReference fmlType::DataType:
		//	SimpleDataType ({fmlType::DataTypeReference.support=current}
		//	'[' multiplicity=DataTypeMultiplicity ']')?
		//	| {fmlType::DataTypeReference} typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleDataType ({fmlType::DataTypeReference.support=current} '[' multiplicity=DataTypeMultiplicity ']')? |
		//{fmlType::DataTypeReference} typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleDataType ({fmlType::DataTypeReference.support=current} '[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_0() { return cGroup_0; }
		
		//SimpleDataType
		public RuleCall getSimpleDataTypeParserRuleCall_0_0() { return cSimpleDataTypeParserRuleCall_0_0; }
		
		//({fmlType::DataTypeReference.support=current} '[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{fmlType::DataTypeReference.support=current}
		public Action getDataTypeReferenceSupportAction_0_1_0() { return cDataTypeReferenceSupportAction_0_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_0_1_2() { return cMultiplicityAssignment_0_1_2; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_0_1_2_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_0_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }
		
		//{fmlType::DataTypeReference} typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlType::DataTypeReference}
		public Action getDataTypeReferenceAction_1_0() { return cDataTypeReferenceAction_1_0; }
		
		//typeref=[fmlType::DataType|ESUfid]
		public Assignment getTyperefAssignment_1_1() { return cTyperefAssignment_1_1; }
		
		//[fmlType::DataType|ESUfid]
		public CrossReference getTyperefDataTypeCrossReference_1_1_0() { return cTyperefDataTypeCrossReference_1_1_0; }
		
		//ESUfid
		public RuleCall getTyperefDataTypeESUfidParserRuleCall_1_1_0_1() { return cTyperefDataTypeESUfidParserRuleCall_1_1_0_1; }
		
		//('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_1_2_1() { return cMultiplicityAssignment_1_2_1; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_1_2_1_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}
	public class OtherDataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OtherDataTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cSupportAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cSupportPrimitiveTypeParserRuleCall_5_0_0_0 = (RuleCall)cSupportAssignment_5_0_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_0_1_0 = (Keyword)cGroup_5_0_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_5_0_1_1_0 = (RuleCall)cMultiplicityAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_0_1_2 = (Keyword)cGroup_5_0_1.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cTyperefAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final CrossReference cTyperefDataTypeCrossReference_5_1_0_0 = (CrossReference)cTyperefAssignment_5_1_0.eContents().get(0);
		private final RuleCall cTyperefDataTypeESUfidParserRuleCall_5_1_0_0_1 = (RuleCall)cTyperefDataTypeCrossReference_5_1_0_0.eContents().get(1);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_5_1_1_1_0 = (RuleCall)cMultiplicityAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_1_1_2 = (Keyword)cGroup_5_1_1.eContents().get(2);
		private final Assignment cTypedefAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cTypedefSemicolonKeyword_6_0 = (Keyword)cTypedefAssignment_6.eContents().get(0);
		
		//OtherDataTypeDefinition fmlType::DataTypeReference:
		//	{fmlType::DataTypeReference} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? (support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity
		//	']')?
		//	| typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?) typedef?=';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::DataTypeReference} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//(support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity ']')? | typeref=[fmlType::DataType|ESUfid] ('['
		//multiplicity=DataTypeMultiplicity ']')?) typedef?=';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::DataTypeReference}
		public Action getDataTypeReferenceAction_0() { return cDataTypeReferenceAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//(support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity ']')? | typeref=[fmlType::DataType|ESUfid] ('['
		//multiplicity=DataTypeMultiplicity ']')?)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//support=PrimitiveType
		public Assignment getSupportAssignment_5_0_0() { return cSupportAssignment_5_0_0; }
		
		//PrimitiveType
		public RuleCall getSupportPrimitiveTypeParserRuleCall_5_0_0_0() { return cSupportPrimitiveTypeParserRuleCall_5_0_0_0; }
		
		//('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0_1_0() { return cLeftSquareBracketKeyword_5_0_1_0; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_5_0_1_1() { return cMultiplicityAssignment_5_0_1_1; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_5_0_1_1_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_5_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_0_1_2() { return cRightSquareBracketKeyword_5_0_1_2; }
		
		//typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//typeref=[fmlType::DataType|ESUfid]
		public Assignment getTyperefAssignment_5_1_0() { return cTyperefAssignment_5_1_0; }
		
		//[fmlType::DataType|ESUfid]
		public CrossReference getTyperefDataTypeCrossReference_5_1_0_0() { return cTyperefDataTypeCrossReference_5_1_0_0; }
		
		//ESUfid
		public RuleCall getTyperefDataTypeESUfidParserRuleCall_5_1_0_0_1() { return cTyperefDataTypeESUfidParserRuleCall_5_1_0_0_1; }
		
		//('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_1_1_0() { return cLeftSquareBracketKeyword_5_1_1_0; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_5_1_1_1() { return cMultiplicityAssignment_5_1_1_1; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_5_1_1_1_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_5_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_1_1_2() { return cRightSquareBracketKeyword_5_1_1_2; }
		
		//typedef?=';'
		public Assignment getTypedefAssignment_6() { return cTypedefAssignment_6; }
		
		//';'
		public Keyword getTypedefSemicolonKeyword_6_0() { return cTypedefSemicolonKeyword_6_0; }
	}
	public class OtherDataTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OtherDataTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSupportAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSupportPrimitiveTypeParserRuleCall_3_0_0_0 = (RuleCall)cSupportAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_3_0_1_1_0 = (RuleCall)cMultiplicityAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_0_1_2 = (Keyword)cGroup_3_0_1.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTyperefAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cTyperefDataTypeCrossReference_3_1_0_0 = (CrossReference)cTyperefAssignment_3_1_0.eContents().get(0);
		private final RuleCall cTyperefDataTypeESUfidParserRuleCall_3_1_0_0_1 = (RuleCall)cTyperefDataTypeCrossReference_3_1_0_0.eContents().get(1);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cMultiplicityDataTypeMultiplicityParserRuleCall_3_1_1_1_0 = (RuleCall)cMultiplicityAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_1_2 = (Keyword)cGroup_3_1_1.eContents().get(2);
		private final Assignment cTypedefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTypedefSemicolonKeyword_4_0 = (Keyword)cTypedefAssignment_4.eContents().get(0);
		
		//OtherDataTypeDefinitionImpl fmlType::DataTypeReference:
		//	{fmlType::DataTypeReference} name=ESIdentifier unrestrictedName=UnrestrictedName? (support=PrimitiveType ('['
		//	multiplicity=DataTypeMultiplicity ']')?
		//	| typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?) typedef?=';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::DataTypeReference} name=ESIdentifier unrestrictedName=UnrestrictedName? (support=PrimitiveType ('['
		//multiplicity=DataTypeMultiplicity ']')? | typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity
		//']')?) typedef?=';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::DataTypeReference}
		public Action getDataTypeReferenceAction_0() { return cDataTypeReferenceAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//(support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity ']')? | typeref=[fmlType::DataType|ESUfid] ('['
		//multiplicity=DataTypeMultiplicity ']')?)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//support=PrimitiveType
		public Assignment getSupportAssignment_3_0_0() { return cSupportAssignment_3_0_0; }
		
		//PrimitiveType
		public RuleCall getSupportPrimitiveTypeParserRuleCall_3_0_0_0() { return cSupportPrimitiveTypeParserRuleCall_3_0_0_0; }
		
		//('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0_1_0() { return cLeftSquareBracketKeyword_3_0_1_0; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_3_0_1_1() { return cMultiplicityAssignment_3_0_1_1; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_3_0_1_1_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_3_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_0_1_2() { return cRightSquareBracketKeyword_3_0_1_2; }
		
		//typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//typeref=[fmlType::DataType|ESUfid]
		public Assignment getTyperefAssignment_3_1_0() { return cTyperefAssignment_3_1_0; }
		
		//[fmlType::DataType|ESUfid]
		public CrossReference getTyperefDataTypeCrossReference_3_1_0_0() { return cTyperefDataTypeCrossReference_3_1_0_0; }
		
		//ESUfid
		public RuleCall getTyperefDataTypeESUfidParserRuleCall_3_1_0_0_1() { return cTyperefDataTypeESUfidParserRuleCall_3_1_0_0_1; }
		
		//('[' multiplicity=DataTypeMultiplicity ']')?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_1_0() { return cLeftSquareBracketKeyword_3_1_1_0; }
		
		//multiplicity=DataTypeMultiplicity
		public Assignment getMultiplicityAssignment_3_1_1_1() { return cMultiplicityAssignment_3_1_1_1; }
		
		//DataTypeMultiplicity
		public RuleCall getMultiplicityDataTypeMultiplicityParserRuleCall_3_1_1_1_0() { return cMultiplicityDataTypeMultiplicityParserRuleCall_3_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_1_2() { return cRightSquareBracketKeyword_3_1_1_2; }
		
		//typedef?=';'
		public Assignment getTypedefAssignment_4() { return cTypedefAssignment_4; }
		
		//';'
		public Keyword getTypedefSemicolonKeyword_4_0() { return cTypedefSemicolonKeyword_4_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructuredDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataType fmlType::DataType:
		//	DataTypeReference
		//	| StructuredDataType
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeReference | StructuredDataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeReference
		public RuleCall getDataTypeReferenceParserRuleCall_0() { return cDataTypeReferenceParserRuleCall_0; }
		
		//StructuredDataType
		public RuleCall getStructuredDataTypeParserRuleCall_1() { return cStructuredDataTypeParserRuleCall_1; }
	}
	public class SimpleDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SimpleDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntervalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleDataType fmlType::DataType:
		//	PrimitiveType
		//	| IntervalType
		//	| CollectionType
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | IntervalType | CollectionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//IntervalType
		public RuleCall getIntervalTypeParserRuleCall_1() { return cIntervalTypeParserRuleCall_1; }
		
		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_2() { return cCollectionTypeParserRuleCall_2; }
	}
	public class StructuredDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StructuredDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructureTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StructuredDataType fmlType::DataType:
		//	EnumerationType
		//	| StructureType
		//	| UnionType
		//	| ChoiceType
		@Override public ParserRule getRule() { return rule; }
		
		//EnumerationType | StructureType | UnionType | ChoiceType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumerationType
		public RuleCall getEnumerationTypeParserRuleCall_0() { return cEnumerationTypeParserRuleCall_0; }
		
		//StructureType
		public RuleCall getStructureTypeParserRuleCall_1() { return cStructureTypeParserRuleCall_1; }
		
		//UnionType
		public RuleCall getUnionTypeParserRuleCall_2() { return cUnionTypeParserRuleCall_2; }
		
		//ChoiceType
		public RuleCall getChoiceTypeParserRuleCall_3() { return cChoiceTypeParserRuleCall_3; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveNumberTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherPrimitiveTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////PrimitiveType returns fmlType::PrimitiveType
		////	: kind=NumberPrimitiveTypeKind ( '<' ( 'bit:' )? bitSize = EInt '>' )?
		////	| kind=OtherPrimitiveKind
		////	;
		////
		////enum OtherPrimitiveKind returns fmlType::PrimitiveTypeKind
		////	: BOOLEAN   = 'boolean'
		////	| BOOLEAN   = 'bool'
		////	| CHAR      = 'char'
		////	| STRING    = 'string'
		////	| BUFFER    = 'buffer'
		////	| MESSAGE   = 'message'
		////	| PORT      = 'port'
		////	| MACHINE   = 'machine'
		////	;
		////
		////
		////enum NumberPrimitiveTypeKind returns fmlType::PrimitiveTypeKind
		////	: INTEGER   = 'integer'
		////	| RATIONAL  = 'rational'
		////	| FLOAT     = 'float'
		////	| DOUBLE    = 'double'
		////	| REAL      = 'real'
		////
		////	| TIME      = 'time'
		////
		////	| UINTEGER  = 'uinteger'
		////	| URATIONAL = 'urational'
		////	| UFLOAT    = 'ufloat'
		////	| UDOUBLE   = 'udouble'
		////	| UREAL     = 'ureal'
		////
		////	| INT       = 'int'
		////	| RAT       = 'rat'
		////
		////	| UINT      = 'uint'
		////	| URAT      = 'urat'
		////	;
		//PrimitiveType fmlType::PrimitiveType:
		//	PrimitiveNumberType
		//	| OtherPrimitiveType
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveNumberType | OtherPrimitiveType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveNumberType
		public RuleCall getPrimitiveNumberTypeParserRuleCall_0() { return cPrimitiveNumberTypeParserRuleCall_0; }
		
		//OtherPrimitiveType
		public RuleCall getOtherPrimitiveTypeParserRuleCall_1() { return cOtherPrimitiveTypeParserRuleCall_1; }
	}
	public class PrimitiveNumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveNumberType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveRationalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveFloatTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveRealTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimitiveTimeTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimitiveNumberType fmlType::PrimitiveNumberType:
		//	PrimitiveIntegerType
		//	| PrimitiveRationalType
		//	| PrimitiveFloatType
		//	| PrimitiveRealType
		//	| PrimitiveTimeType
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveIntegerType | PrimitiveRationalType | PrimitiveFloatType | PrimitiveRealType | PrimitiveTimeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveIntegerType
		public RuleCall getPrimitiveIntegerTypeParserRuleCall_0() { return cPrimitiveIntegerTypeParserRuleCall_0; }
		
		//PrimitiveRationalType
		public RuleCall getPrimitiveRationalTypeParserRuleCall_1() { return cPrimitiveRationalTypeParserRuleCall_1; }
		
		//PrimitiveFloatType
		public RuleCall getPrimitiveFloatTypeParserRuleCall_2() { return cPrimitiveFloatTypeParserRuleCall_2; }
		
		//PrimitiveRealType
		public RuleCall getPrimitiveRealTypeParserRuleCall_3() { return cPrimitiveRealTypeParserRuleCall_3; }
		
		//PrimitiveTimeType
		public RuleCall getPrimitiveTimeTypeParserRuleCall_4() { return cPrimitiveTimeTypeParserRuleCall_4; }
	}
	public class PrimitiveIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignPrimitiveNumberSignEnumRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cIntegerKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cUintegerKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cIntKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cUintKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeEIntParserRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cSizeKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSizeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSizeEIntParserRuleCall_3_1_2_0 = (RuleCall)cSizeAssignment_3_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//PrimitiveIntegerType fmlType::PrimitiveIntegerType:
		//	{fmlType::PrimitiveIntegerType} sign=PrimitiveNumberSign? ('integer'
		//	| 'uinteger'
		//	| 'int'
		//	| 'uint') (':' size=EInt
		//	| '<' 'size:'? size=EInt '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveIntegerType} sign=PrimitiveNumberSign? ('integer' | 'uinteger' | 'int' | 'uint') (':' size=EInt | '<'
		//'size:'? size=EInt '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveIntegerType}
		public Action getPrimitiveIntegerTypeAction_0() { return cPrimitiveIntegerTypeAction_0; }
		
		//sign=PrimitiveNumberSign?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//PrimitiveNumberSign
		public RuleCall getSignPrimitiveNumberSignEnumRuleCall_1_0() { return cSignPrimitiveNumberSignEnumRuleCall_1_0; }
		
		//('integer' | 'uinteger' | 'int' | 'uint')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'integer'
		public Keyword getIntegerKeyword_2_0() { return cIntegerKeyword_2_0; }
		
		//'uinteger'
		public Keyword getUintegerKeyword_2_1() { return cUintegerKeyword_2_1; }
		
		//'int'
		public Keyword getIntKeyword_2_2() { return cIntKeyword_2_2; }
		
		//'uint'
		public Keyword getUintKeyword_2_3() { return cUintKeyword_2_3; }
		
		//(':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':' size=EInt
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0_1_0() { return cSizeEIntParserRuleCall_3_0_1_0; }
		
		//'<' 'size:'? size=EInt '>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1_0() { return cLessThanSignKeyword_3_1_0; }
		
		//'size:'?
		public Keyword getSizeKeyword_3_1_1() { return cSizeKeyword_3_1_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_1_2() { return cSizeAssignment_3_1_2; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_1_2_0() { return cSizeEIntParserRuleCall_3_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_3() { return cGreaterThanSignKeyword_3_1_3; }
	}
	public class PrimitiveRationalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveRationalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveRationalTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignPrimitiveNumberSignEnumRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cRationalKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cUrationalKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cRatKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cUratKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeEIntParserRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cSizeKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSizeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSizeEIntParserRuleCall_3_1_2_0 = (RuleCall)cSizeAssignment_3_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//PrimitiveRationalType fmlType::PrimitiveRationalType:
		//	{fmlType::PrimitiveRationalType} sign=PrimitiveNumberSign? ('rational'
		//	| 'urational'
		//	| 'rat'
		//	| 'urat') (':' size=EInt
		//	| '<' 'size:'? size=EInt '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveRationalType} sign=PrimitiveNumberSign? ('rational' | 'urational' | 'rat' | 'urat') (':' size=EInt |
		//'<' 'size:'? size=EInt '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveRationalType}
		public Action getPrimitiveRationalTypeAction_0() { return cPrimitiveRationalTypeAction_0; }
		
		//sign=PrimitiveNumberSign?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//PrimitiveNumberSign
		public RuleCall getSignPrimitiveNumberSignEnumRuleCall_1_0() { return cSignPrimitiveNumberSignEnumRuleCall_1_0; }
		
		//('rational' | 'urational' | 'rat' | 'urat')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'rational'
		public Keyword getRationalKeyword_2_0() { return cRationalKeyword_2_0; }
		
		//'urational'
		public Keyword getUrationalKeyword_2_1() { return cUrationalKeyword_2_1; }
		
		//'rat'
		public Keyword getRatKeyword_2_2() { return cRatKeyword_2_2; }
		
		//'urat'
		public Keyword getUratKeyword_2_3() { return cUratKeyword_2_3; }
		
		//(':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':' size=EInt
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0_1_0() { return cSizeEIntParserRuleCall_3_0_1_0; }
		
		//'<' 'size:'? size=EInt '>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1_0() { return cLessThanSignKeyword_3_1_0; }
		
		//'size:'?
		public Keyword getSizeKeyword_3_1_1() { return cSizeKeyword_3_1_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_1_2() { return cSizeAssignment_3_1_2; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_1_2_0() { return cSizeEIntParserRuleCall_3_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_3() { return cGreaterThanSignKeyword_3_1_3; }
	}
	public class PrimitiveFloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveFloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignPrimitiveNumberSignEnumRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFloatKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cUfloatKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cDoubleKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cUdoubleKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeEIntParserRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cSizeKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSizeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSizeEIntParserRuleCall_3_1_2_0 = (RuleCall)cSizeAssignment_3_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//PrimitiveFloatType fmlType::PrimitiveFloatType:
		//	{fmlType::PrimitiveFloatType} sign=PrimitiveNumberSign? ('float'
		//	| 'ufloat'
		//	| 'double'
		//	| 'udouble') (':' size=EInt
		//	| '<' 'size:'? size=EInt '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveFloatType} sign=PrimitiveNumberSign? ('float' | 'ufloat' | 'double' | 'udouble') (':' size=EInt | '<'
		//'size:'? size=EInt '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveFloatType}
		public Action getPrimitiveFloatTypeAction_0() { return cPrimitiveFloatTypeAction_0; }
		
		//sign=PrimitiveNumberSign?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//PrimitiveNumberSign
		public RuleCall getSignPrimitiveNumberSignEnumRuleCall_1_0() { return cSignPrimitiveNumberSignEnumRuleCall_1_0; }
		
		//('float' | 'ufloat' | 'double' | 'udouble')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'float'
		public Keyword getFloatKeyword_2_0() { return cFloatKeyword_2_0; }
		
		//'ufloat'
		public Keyword getUfloatKeyword_2_1() { return cUfloatKeyword_2_1; }
		
		//'double'
		public Keyword getDoubleKeyword_2_2() { return cDoubleKeyword_2_2; }
		
		//'udouble'
		public Keyword getUdoubleKeyword_2_3() { return cUdoubleKeyword_2_3; }
		
		//(':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':' size=EInt
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0_1_0() { return cSizeEIntParserRuleCall_3_0_1_0; }
		
		//'<' 'size:'? size=EInt '>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1_0() { return cLessThanSignKeyword_3_1_0; }
		
		//'size:'?
		public Keyword getSizeKeyword_3_1_1() { return cSizeKeyword_3_1_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_1_2() { return cSizeAssignment_3_1_2; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_1_2_0() { return cSizeEIntParserRuleCall_3_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_3() { return cGreaterThanSignKeyword_3_1_3; }
	}
	public class PrimitiveRealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveRealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignPrimitiveNumberSignEnumRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cRealKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cUrealKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeEIntParserRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cSizeKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSizeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSizeEIntParserRuleCall_3_1_2_0 = (RuleCall)cSizeAssignment_3_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//PrimitiveRealType fmlType::PrimitiveRealType:
		//	{fmlType::PrimitiveRealType} sign=PrimitiveNumberSign? ('real'
		//	| 'ureal') (':' size=EInt
		//	| '<' 'size:'? size=EInt '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveRealType} sign=PrimitiveNumberSign? ('real' | 'ureal') (':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveRealType}
		public Action getPrimitiveRealTypeAction_0() { return cPrimitiveRealTypeAction_0; }
		
		//sign=PrimitiveNumberSign?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//PrimitiveNumberSign
		public RuleCall getSignPrimitiveNumberSignEnumRuleCall_1_0() { return cSignPrimitiveNumberSignEnumRuleCall_1_0; }
		
		//('real' | 'ureal')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'real'
		public Keyword getRealKeyword_2_0() { return cRealKeyword_2_0; }
		
		//'ureal'
		public Keyword getUrealKeyword_2_1() { return cUrealKeyword_2_1; }
		
		//(':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':' size=EInt
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_0_1_0() { return cSizeEIntParserRuleCall_3_0_1_0; }
		
		//'<' 'size:'? size=EInt '>'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_1_0() { return cLessThanSignKeyword_3_1_0; }
		
		//'size:'?
		public Keyword getSizeKeyword_3_1_1() { return cSizeKeyword_3_1_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_3_1_2() { return cSizeAssignment_3_1_2; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_3_1_2_0() { return cSizeEIntParserRuleCall_3_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1_3() { return cGreaterThanSignKeyword_3_1_3; }
	}
	public class PrimitiveTimeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveTimeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimitiveTimeTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTimeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_2_0_0 = (Keyword)cGroup_0_2_0.eContents().get(0);
		private final Assignment cSupportAssignment_0_2_0_1 = (Assignment)cGroup_0_2_0.eContents().get(1);
		private final RuleCall cSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_0_1_0 = (RuleCall)cSupportAssignment_0_2_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2_0_2 = (Keyword)cGroup_0_2_0.eContents().get(2);
		private final Assignment cSupportAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_1_0 = (RuleCall)cSupportAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimitiveTimeTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cClockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cClockClockKeyword_1_1_0 = (Keyword)cClockAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cSupportAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_0_1_0 = (RuleCall)cSupportAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_0_2 = (Keyword)cGroup_1_2_0.eContents().get(2);
		private final Assignment cSupportAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_1_0 = (RuleCall)cSupportAssignment_1_2_1.eContents().get(0);
		
		//PrimitiveTimeType fmlType::PrimitiveTimeType:
		//	{fmlType::PrimitiveTimeType}
		//	'time' ('<' support=PrimitiveTimeNumberType '>'
		//	| support=PrimitiveTimeNumberType)?
		//	| {fmlType::PrimitiveTimeType} clock?='clock' ('<' support=PrimitiveTimeNumberType '>'
		//	| support=PrimitiveTimeNumberType)?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveTimeType} 'time' ('<' support=PrimitiveTimeNumberType '>' | support=PrimitiveTimeNumberType)? |
		//{fmlType::PrimitiveTimeType} clock?='clock' ('<' support=PrimitiveTimeNumberType '>' |
		//support=PrimitiveTimeNumberType)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{fmlType::PrimitiveTimeType} 'time' ('<' support=PrimitiveTimeNumberType '>' | support=PrimitiveTimeNumberType)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{fmlType::PrimitiveTimeType}
		public Action getPrimitiveTimeTypeAction_0_0() { return cPrimitiveTimeTypeAction_0_0; }
		
		//'time'
		public Keyword getTimeKeyword_0_1() { return cTimeKeyword_0_1; }
		
		//('<' support=PrimitiveTimeNumberType '>' | support=PrimitiveTimeNumberType)?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'<' support=PrimitiveTimeNumberType '>'
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_2_0_0() { return cLessThanSignKeyword_0_2_0_0; }
		
		//support=PrimitiveTimeNumberType
		public Assignment getSupportAssignment_0_2_0_1() { return cSupportAssignment_0_2_0_1; }
		
		//PrimitiveTimeNumberType
		public RuleCall getSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_0_1_0() { return cSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_2_0_2() { return cGreaterThanSignKeyword_0_2_0_2; }
		
		//support=PrimitiveTimeNumberType
		public Assignment getSupportAssignment_0_2_1() { return cSupportAssignment_0_2_1; }
		
		//PrimitiveTimeNumberType
		public RuleCall getSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_1_0() { return cSupportPrimitiveTimeNumberTypeParserRuleCall_0_2_1_0; }
		
		//{fmlType::PrimitiveTimeType} clock?='clock' ('<' support=PrimitiveTimeNumberType '>' | support=PrimitiveTimeNumberType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlType::PrimitiveTimeType}
		public Action getPrimitiveTimeTypeAction_1_0() { return cPrimitiveTimeTypeAction_1_0; }
		
		//clock?='clock'
		public Assignment getClockAssignment_1_1() { return cClockAssignment_1_1; }
		
		//'clock'
		public Keyword getClockClockKeyword_1_1_0() { return cClockClockKeyword_1_1_0; }
		
		//('<' support=PrimitiveTimeNumberType '>' | support=PrimitiveTimeNumberType)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'<' support=PrimitiveTimeNumberType '>'
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_2_0_0() { return cLessThanSignKeyword_1_2_0_0; }
		
		//support=PrimitiveTimeNumberType
		public Assignment getSupportAssignment_1_2_0_1() { return cSupportAssignment_1_2_0_1; }
		
		//PrimitiveTimeNumberType
		public RuleCall getSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_0_1_0() { return cSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2_0_2() { return cGreaterThanSignKeyword_1_2_0_2; }
		
		//support=PrimitiveTimeNumberType
		public Assignment getSupportAssignment_1_2_1() { return cSupportAssignment_1_2_1; }
		
		//PrimitiveTimeNumberType
		public RuleCall getSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_1_0() { return cSupportPrimitiveTimeNumberTypeParserRuleCall_1_2_1_0; }
	}
	public class PrimitiveTimeNumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveTimeNumberType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveRationalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveFloatTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveRealTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveTimeNumberType fmlType::PrimitiveNumberType:
		//	PrimitiveIntegerType
		//	| PrimitiveRationalType
		//	| PrimitiveFloatType
		//	| PrimitiveRealType
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveIntegerType | PrimitiveRationalType | PrimitiveFloatType | PrimitiveRealType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveIntegerType
		public RuleCall getPrimitiveIntegerTypeParserRuleCall_0() { return cPrimitiveIntegerTypeParserRuleCall_0; }
		
		//PrimitiveRationalType
		public RuleCall getPrimitiveRationalTypeParserRuleCall_1() { return cPrimitiveRationalTypeParserRuleCall_1; }
		
		//PrimitiveFloatType
		public RuleCall getPrimitiveFloatTypeParserRuleCall_2() { return cPrimitiveFloatTypeParserRuleCall_2; }
		
		//PrimitiveRealType
		public RuleCall getPrimitiveRealTypeParserRuleCall_3() { return cPrimitiveRealTypeParserRuleCall_3; }
	}
	public class OtherPrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OtherPrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveCharacterTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveInstanceTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OtherPrimitiveType fmlType::PrimitiveType:
		//	PrimitiveBooleanType
		//	| PrimitiveCharacterType
		//	| PrimitiveStringType
		//	| PrimitiveInstanceType
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveBooleanType | PrimitiveCharacterType | PrimitiveStringType | PrimitiveInstanceType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveBooleanType
		public RuleCall getPrimitiveBooleanTypeParserRuleCall_0() { return cPrimitiveBooleanTypeParserRuleCall_0; }
		
		//PrimitiveCharacterType
		public RuleCall getPrimitiveCharacterTypeParserRuleCall_1() { return cPrimitiveCharacterTypeParserRuleCall_1; }
		
		//PrimitiveStringType
		public RuleCall getPrimitiveStringTypeParserRuleCall_2() { return cPrimitiveStringTypeParserRuleCall_2; }
		
		//PrimitiveInstanceType
		public RuleCall getPrimitiveInstanceTypeParserRuleCall_3() { return cPrimitiveInstanceTypeParserRuleCall_3; }
	}
	public class PrimitiveBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cBooleanKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//PrimitiveBooleanType fmlType::PrimitiveBooleanType:
		//	{fmlType::PrimitiveBooleanType} ('boolean' | 'bool')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveBooleanType} ('boolean' | 'bool')
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveBooleanType}
		public Action getPrimitiveBooleanTypeAction_0() { return cPrimitiveBooleanTypeAction_0; }
		
		//('boolean' | 'bool')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1_0() { return cBooleanKeyword_1_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }
	}
	public class PrimitiveCharacterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveCharacterType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveCharacterTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveCharacterType fmlType::PrimitiveCharacterType:
		//	{fmlType::PrimitiveCharacterType} 'char'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveCharacterType} 'char'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveCharacterType}
		public Action getPrimitiveCharacterTypeAction_0() { return cPrimitiveCharacterTypeAction_0; }
		
		//'char'
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }
	}
	public class PrimitiveStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSizeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSizeEIntParserRuleCall_2_0_1_0 = (RuleCall)cSizeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cSizeKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cSizeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cSizeEIntParserRuleCall_2_1_2_0 = (RuleCall)cSizeAssignment_2_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//PrimitiveStringType fmlType::PrimitiveStringType:
		//	{fmlType::PrimitiveStringType}
		//	'string' (':' size=EInt
		//	| '<' 'size:'? size=EInt '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveStringType} 'string' (':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveStringType}
		public Action getPrimitiveStringTypeAction_0() { return cPrimitiveStringTypeAction_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//(':' size=EInt | '<' 'size:'? size=EInt '>')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':' size=EInt
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }
		
		//size=EInt
		public Assignment getSizeAssignment_2_0_1() { return cSizeAssignment_2_0_1; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_2_0_1_0() { return cSizeEIntParserRuleCall_2_0_1_0; }
		
		//'<' 'size:'? size=EInt '>'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_1_0() { return cLessThanSignKeyword_2_1_0; }
		
		//'size:'?
		public Keyword getSizeKeyword_2_1_1() { return cSizeKeyword_2_1_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_2_1_2() { return cSizeAssignment_2_1_2; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_2_1_2_0() { return cSizeEIntParserRuleCall_2_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_1_3() { return cGreaterThanSignKeyword_2_1_3; }
	}
	public class PrimitiveInstanceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveInstanceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveInstanceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpectedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpectedPrimitiveInstanceKindEnumRuleCall_1_0 = (RuleCall)cExpectedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cModelNamedElementCrossReference_2_1_0 = (CrossReference)cModelAssignment_2_1.eContents().get(0);
		private final RuleCall cModelNamedElementESIdentifierParserRuleCall_2_1_0_1 = (RuleCall)cModelNamedElementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimitiveInstanceType fmlType::PrimitiveInstanceType:
		//	{fmlType::PrimitiveInstanceType} expected=PrimitiveInstanceKind ('<' model=[fmlCommon::NamedElement|ESIdentifier]
		//	'>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::PrimitiveInstanceType} expected=PrimitiveInstanceKind ('<' model=[fmlCommon::NamedElement|ESIdentifier] '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::PrimitiveInstanceType}
		public Action getPrimitiveInstanceTypeAction_0() { return cPrimitiveInstanceTypeAction_0; }
		
		//expected=PrimitiveInstanceKind
		public Assignment getExpectedAssignment_1() { return cExpectedAssignment_1; }
		
		//PrimitiveInstanceKind
		public RuleCall getExpectedPrimitiveInstanceKindEnumRuleCall_1_0() { return cExpectedPrimitiveInstanceKindEnumRuleCall_1_0; }
		
		//('<' model=[fmlCommon::NamedElement|ESIdentifier] '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//model=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getModelAssignment_2_1() { return cModelAssignment_2_1; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getModelNamedElementCrossReference_2_1_0() { return cModelNamedElementCrossReference_2_1_0; }
		
		//ESIdentifier
		public RuleCall getModelNamedElementESIdentifierParserRuleCall_2_1_0_1() { return cModelNamedElementESIdentifierParserRuleCall_2_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}
	public class IntervalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IntervalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntervalTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntervalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSupportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSupportPrimitiveNumberTypeParserRuleCall_3_0 = (RuleCall)cSupportAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cLopenAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cLopenRightSquareBracketKeyword_4_0_0 = (Keyword)cLopenAssignment_4_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cInfimumAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInfimumExpressionParserRuleCall_5_0 = (RuleCall)cInfimumAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSupremumAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSupremumExpressionParserRuleCall_7_0 = (RuleCall)cSupremumAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Keyword cRightSquareBracketKeyword_8_0 = (Keyword)cAlternatives_8.eContents().get(0);
		private final Assignment cRopenAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final Keyword cRopenLeftSquareBracketKeyword_8_1_0 = (Keyword)cRopenAssignment_8_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IntervalType fmlType::IntervalType:
		//	{fmlType::IntervalType}
		//	'interval'
		//	'<'
		//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
		//	'>'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::IntervalType} 'interval' '<' support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ','
		//supremum=Expression (']' | ropen?='[') '>'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::IntervalType}
		public Action getIntervalTypeAction_0() { return cIntervalTypeAction_0; }
		
		//'interval'
		public Keyword getIntervalKeyword_1() { return cIntervalKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//support=PrimitiveNumberType
		public Assignment getSupportAssignment_3() { return cSupportAssignment_3; }
		
		//PrimitiveNumberType
		public RuleCall getSupportPrimitiveNumberTypeParserRuleCall_3_0() { return cSupportPrimitiveNumberTypeParserRuleCall_3_0; }
		
		//(lopen?=']' | '[')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//lopen?=']'
		public Assignment getLopenAssignment_4_0() { return cLopenAssignment_4_0; }
		
		//']'
		public Keyword getLopenRightSquareBracketKeyword_4_0_0() { return cLopenRightSquareBracketKeyword_4_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//infimum=Expression
		public Assignment getInfimumAssignment_5() { return cInfimumAssignment_5; }
		
		//Expression
		public RuleCall getInfimumExpressionParserRuleCall_5_0() { return cInfimumExpressionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//supremum=Expression
		public Assignment getSupremumAssignment_7() { return cSupremumAssignment_7; }
		
		//Expression
		public RuleCall getSupremumExpressionParserRuleCall_7_0() { return cSupremumExpressionParserRuleCall_7_0; }
		
		//(']' | ropen?='[')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_0() { return cRightSquareBracketKeyword_8_0; }
		
		//ropen?='['
		public Assignment getRopenAssignment_8_1() { return cRopenAssignment_8_1; }
		
		//'['
		public Keyword getRopenLeftSquareBracketKeyword_8_1_0() { return cRopenLeftSquareBracketKeyword_8_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
	}
	public class IntervalTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IntervalTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntervalTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cIntervalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSupportAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSupportPrimitiveNumberTypeParserRuleCall_7_0 = (RuleCall)cSupportAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cLopenAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final Keyword cLopenRightSquareBracketKeyword_8_0_0 = (Keyword)cLopenAssignment_8_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		private final Assignment cInfimumAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInfimumExpressionParserRuleCall_9_0 = (RuleCall)cInfimumAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSupremumAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSupremumExpressionParserRuleCall_11_0 = (RuleCall)cSupremumAssignment_11.eContents().get(0);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Keyword cRightSquareBracketKeyword_12_0 = (Keyword)cAlternatives_12.eContents().get(0);
		private final Assignment cRopenAssignment_12_1 = (Assignment)cAlternatives_12.eContents().get(1);
		private final Keyword cRopenLeftSquareBracketKeyword_12_1_0 = (Keyword)cRopenAssignment_12_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//IntervalTypeDefinition fmlType::IntervalType:
		//	{fmlType::IntervalType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'interval'
		//	'<'
		//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
		//	'>' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::IntervalType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//'interval' '<' support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' |
		//ropen?='[') '>' ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::IntervalType}
		public Action getIntervalTypeAction_0() { return cIntervalTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//'interval'
		public Keyword getIntervalKeyword_5() { return cIntervalKeyword_5; }
		
		//'<'
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//support=PrimitiveNumberType
		public Assignment getSupportAssignment_7() { return cSupportAssignment_7; }
		
		//PrimitiveNumberType
		public RuleCall getSupportPrimitiveNumberTypeParserRuleCall_7_0() { return cSupportPrimitiveNumberTypeParserRuleCall_7_0; }
		
		//(lopen?=']' | '[')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//lopen?=']'
		public Assignment getLopenAssignment_8_0() { return cLopenAssignment_8_0; }
		
		//']'
		public Keyword getLopenRightSquareBracketKeyword_8_0_0() { return cLopenRightSquareBracketKeyword_8_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//infimum=Expression
		public Assignment getInfimumAssignment_9() { return cInfimumAssignment_9; }
		
		//Expression
		public RuleCall getInfimumExpressionParserRuleCall_9_0() { return cInfimumExpressionParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//supremum=Expression
		public Assignment getSupremumAssignment_11() { return cSupremumAssignment_11; }
		
		//Expression
		public RuleCall getSupremumExpressionParserRuleCall_11_0() { return cSupremumExpressionParserRuleCall_11_0; }
		
		//(']' | ropen?='[')
		public Alternatives getAlternatives_12() { return cAlternatives_12; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12_0() { return cRightSquareBracketKeyword_12_0; }
		
		//ropen?='['
		public Assignment getRopenAssignment_12_1() { return cRopenAssignment_12_1; }
		
		//'['
		public Keyword getRopenLeftSquareBracketKeyword_12_1_0() { return cRopenLeftSquareBracketKeyword_12_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_13() { return cGreaterThanSignKeyword_13; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}
	public class IntervalTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IntervalTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntervalTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Keyword cIntervalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSupportAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSupportPrimitiveNumberTypeParserRuleCall_5_0 = (RuleCall)cSupportAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cLopenAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final Keyword cLopenRightSquareBracketKeyword_6_0_0 = (Keyword)cLopenAssignment_6_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Assignment cInfimumAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInfimumExpressionParserRuleCall_7_0 = (RuleCall)cInfimumAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSupremumAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSupremumExpressionParserRuleCall_9_0 = (RuleCall)cSupremumAssignment_9.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Keyword cRightSquareBracketKeyword_10_0 = (Keyword)cAlternatives_10.eContents().get(0);
		private final Assignment cRopenAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final Keyword cRopenLeftSquareBracketKeyword_10_1_0 = (Keyword)cRopenAssignment_10_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//IntervalTypeDefinitionImpl fmlType::IntervalType:
		//	{fmlType::IntervalType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'interval'
		//	'<'
		//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
		//	'>' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::IntervalType} name=ESIdentifier unrestrictedName=UnrestrictedName? 'interval' '<' support=PrimitiveNumberType
		//(lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[') '>' ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::IntervalType}
		public Action getIntervalTypeAction_0() { return cIntervalTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//'interval'
		public Keyword getIntervalKeyword_3() { return cIntervalKeyword_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//support=PrimitiveNumberType
		public Assignment getSupportAssignment_5() { return cSupportAssignment_5; }
		
		//PrimitiveNumberType
		public RuleCall getSupportPrimitiveNumberTypeParserRuleCall_5_0() { return cSupportPrimitiveNumberTypeParserRuleCall_5_0; }
		
		//(lopen?=']' | '[')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//lopen?=']'
		public Assignment getLopenAssignment_6_0() { return cLopenAssignment_6_0; }
		
		//']'
		public Keyword getLopenRightSquareBracketKeyword_6_0_0() { return cLopenRightSquareBracketKeyword_6_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_1() { return cLeftSquareBracketKeyword_6_1; }
		
		//infimum=Expression
		public Assignment getInfimumAssignment_7() { return cInfimumAssignment_7; }
		
		//Expression
		public RuleCall getInfimumExpressionParserRuleCall_7_0() { return cInfimumExpressionParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//supremum=Expression
		public Assignment getSupremumAssignment_9() { return cSupremumAssignment_9; }
		
		//Expression
		public RuleCall getSupremumExpressionParserRuleCall_9_0() { return cSupremumExpressionParserRuleCall_9_0; }
		
		//(']' | ropen?='[')
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10_0() { return cRightSquareBracketKeyword_10_0; }
		
		//ropen?='['
		public Assignment getRopenAssignment_10_1() { return cRopenAssignment_10_1; }
		
		//'['
		public Keyword getRopenLeftSquareBracketKeyword_10_1_0() { return cRopenLeftSquareBracketKeyword_10_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_11() { return cGreaterThanSignKeyword_11; }
		
		//';'
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}
	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerCollectionKindEnumRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSupportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSupportDataTypeParserRuleCall_3_0 = (RuleCall)cSupportAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cSizeAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cSizeEIntParserRuleCall_4_1_0_0 = (RuleCall)cSizeAssignment_4_1_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_4_1_1_0 = (Keyword)cUnboundedAssignment_4_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO
		//// mettre à jour la grammaire par rapport au noyau, i.e.
		//// CollectionKind | CollectionKind< size > | CollectionKind< type , size >
		//CollectionType fmlType::CollectionType:
		//	{fmlType::CollectionType} container=CollectionKind
		//	'<'
		//	support=DataType (',' (size=EInt | unbounded?='*'))?
		//	'>'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::CollectionType} container=CollectionKind '<' support=DataType (',' (size=EInt | unbounded?='*'))? '>'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::CollectionType}
		public Action getCollectionTypeAction_0() { return cCollectionTypeAction_0; }
		
		//container=CollectionKind
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//CollectionKind
		public RuleCall getContainerCollectionKindEnumRuleCall_1_0() { return cContainerCollectionKindEnumRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//support=DataType
		public Assignment getSupportAssignment_3() { return cSupportAssignment_3; }
		
		//DataType
		public RuleCall getSupportDataTypeParserRuleCall_3_0() { return cSupportDataTypeParserRuleCall_3_0; }
		
		//(',' (size=EInt | unbounded?='*'))?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//(size=EInt | unbounded?='*')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_4_1_0() { return cSizeAssignment_4_1_0; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_4_1_0_0() { return cSizeEIntParserRuleCall_4_1_0_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_4_1_1() { return cUnboundedAssignment_4_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_4_1_1_0() { return cUnboundedAsteriskKeyword_4_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}
	public class CollectionTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CollectionTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Assignment cContainerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainerCollectionKindEnumRuleCall_5_0 = (RuleCall)cContainerAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSupportAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSupportDataTypeParserRuleCall_7_0 = (RuleCall)cSupportAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Assignment cSizeAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cSizeEIntParserRuleCall_8_1_0_0 = (RuleCall)cSizeAssignment_8_1_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_8_1_1_0 = (Keyword)cUnboundedAssignment_8_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CollectionTypeDefinition fmlType::CollectionType:
		//	{fmlType::CollectionType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	container=CollectionKind
		//	'<'
		//	support=DataType (',' (size=EInt | unbounded?='*'))?
		//	'>' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::CollectionType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//container=CollectionKind '<' support=DataType (',' (size=EInt | unbounded?='*'))? '>' ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::CollectionType}
		public Action getCollectionTypeAction_0() { return cCollectionTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//container=CollectionKind
		public Assignment getContainerAssignment_5() { return cContainerAssignment_5; }
		
		//CollectionKind
		public RuleCall getContainerCollectionKindEnumRuleCall_5_0() { return cContainerCollectionKindEnumRuleCall_5_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//support=DataType
		public Assignment getSupportAssignment_7() { return cSupportAssignment_7; }
		
		//DataType
		public RuleCall getSupportDataTypeParserRuleCall_7_0() { return cSupportDataTypeParserRuleCall_7_0; }
		
		//(',' (size=EInt | unbounded?='*'))?
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//(size=EInt | unbounded?='*')
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_8_1_0() { return cSizeAssignment_8_1_0; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_8_1_0_0() { return cSizeEIntParserRuleCall_8_1_0_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_8_1_1() { return cUnboundedAssignment_8_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_8_1_1_0() { return cUnboundedAsteriskKeyword_8_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class CollectionTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CollectionTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Assignment cContainerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainerCollectionKindEnumRuleCall_3_0 = (RuleCall)cContainerAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSupportAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSupportDataTypeParserRuleCall_5_0 = (RuleCall)cSupportAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cSizeAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cSizeEIntParserRuleCall_6_1_0_0 = (RuleCall)cSizeAssignment_6_1_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_6_1_1_0 = (Keyword)cUnboundedAssignment_6_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CollectionTypeDefinitionImpl fmlType::CollectionType:
		//	{fmlType::CollectionType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	container=CollectionKind
		//	'<'
		//	support=DataType (',' (size=EInt | unbounded?='*'))?
		//	'>' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::CollectionType} name=ESIdentifier unrestrictedName=UnrestrictedName? container=CollectionKind '<'
		//support=DataType (',' (size=EInt | unbounded?='*'))? '>' ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::CollectionType}
		public Action getCollectionTypeAction_0() { return cCollectionTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//container=CollectionKind
		public Assignment getContainerAssignment_3() { return cContainerAssignment_3; }
		
		//CollectionKind
		public RuleCall getContainerCollectionKindEnumRuleCall_3_0() { return cContainerCollectionKindEnumRuleCall_3_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//support=DataType
		public Assignment getSupportAssignment_5() { return cSupportAssignment_5; }
		
		//DataType
		public RuleCall getSupportDataTypeParserRuleCall_5_0() { return cSupportDataTypeParserRuleCall_5_0; }
		
		//(',' (size=EInt | unbounded?='*'))?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//(size=EInt | unbounded?='*')
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_6_1_0() { return cSizeAssignment_6_1_0; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_6_1_0_0() { return cSizeEIntParserRuleCall_6_1_0_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_6_1_1() { return cUnboundedAssignment_6_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_6_1_1_0() { return cUnboundedAsteriskKeyword_6_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class EnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumerationType fmlType::EnumerationType:
		//	{fmlType::EnumerationType}
		//	'enum' '{'
		//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::EnumerationType} 'enum' '{' literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::EnumerationType}
		public Action getEnumerationTypeAction_0() { return cEnumerationTypeAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_3_0() { return cLiteralEnumerationLiteralParserRuleCall_3_0; }
		
		//(',' literal+=EnumerationLiteral)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_4_1() { return cLiteralAssignment_4_1; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_4_1_0() { return cLiteralEnumerationLiteralParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumerationTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EnumerationTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Assignment cTypedefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cTypedefEnumKeyword_5_0 = (Keyword)cTypedefAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLiteralAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_7_0 = (RuleCall)cLiteralAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLiteralAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_8_1_0 = (RuleCall)cLiteralAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EnumerationTypeDefinition fmlType::EnumerationType:
		//	{fmlType::EnumerationType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='enum'
		//	'{'
		//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::EnumerationType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//typedef?='enum' '{' literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::EnumerationType}
		public Action getEnumerationTypeAction_0() { return cEnumerationTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//typedef?='enum'
		public Assignment getTypedefAssignment_5() { return cTypedefAssignment_5; }
		
		//'enum'
		public Keyword getTypedefEnumKeyword_5_0() { return cTypedefEnumKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_7() { return cLiteralAssignment_7; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_7_0() { return cLiteralEnumerationLiteralParserRuleCall_7_0; }
		
		//(',' literal+=EnumerationLiteral)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_8_1() { return cLiteralAssignment_8_1; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_8_1_0() { return cLiteralEnumerationLiteralParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EnumerationTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EnumerationTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Assignment cTypedefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTypedefEnumKeyword_3_0 = (Keyword)cTypedefAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLiteralAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_5_0 = (RuleCall)cLiteralAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLiteralAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLiteralEnumerationLiteralParserRuleCall_6_1_0 = (RuleCall)cLiteralAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EnumerationTypeDefinitionImpl fmlType::EnumerationType:
		//	{fmlType::EnumerationType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='enum'
		//	'{'
		//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::EnumerationType} name=ESIdentifier unrestrictedName=UnrestrictedName? typedef?='enum' '{'
		//literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::EnumerationType}
		public Action getEnumerationTypeAction_0() { return cEnumerationTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//typedef?='enum'
		public Assignment getTypedefAssignment_3() { return cTypedefAssignment_3; }
		
		//'enum'
		public Keyword getTypedefEnumKeyword_3_0() { return cTypedefEnumKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_5() { return cLiteralAssignment_5; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_5_0() { return cLiteralEnumerationLiteralParserRuleCall_5_0; }
		
		//(',' literal+=EnumerationLiteral)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//literal+=EnumerationLiteral
		public Assignment getLiteralAssignment_6_1() { return cLiteralAssignment_6_1; }
		
		//EnumerationLiteral
		public RuleCall getLiteralEnumerationLiteralParserRuleCall_6_1_0() { return cLiteralEnumerationLiteralParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameESIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cUnrestrictedNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueLiteralTerminalExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//EnumerationLiteral fmlType::EnumerationLiteral:
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' value=LiteralTerminalExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' value=LiteralTerminalExpression)?
		public Group getGroup() { return cGroup; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_0_0() { return cNameESIdentifierParserRuleCall_0_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_1() { return cUnrestrictedNameAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_1_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_1_0; }
		
		//('=' value=LiteralTerminalExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=LiteralTerminalExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//LiteralTerminalExpression
		public RuleCall getValueLiteralTerminalExpressionParserRuleCall_2_1_0() { return cValueLiteralTerminalExpressionParserRuleCall_2_1_0; }
	}
	public class StructureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StructureType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyVariableParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructureType fmlType::StructureType:
		//	{fmlType::StructureType}
		//	'struct'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::StructureType} 'struct' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::StructureType}
		public Action getStructureTypeAction_0() { return cStructureTypeAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_3_0() { return cPropertyVariableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StructureTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StructureTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Assignment cTypedefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cTypedefStructKeyword_5_0 = (Keyword)cTypedefAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertyVariableParserRuleCall_7_0 = (RuleCall)cPropertyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//StructureTypeDefinition fmlType::StructureType:
		//	{fmlType::StructureType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='struct'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::StructureType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//typedef?='struct' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::StructureType}
		public Action getStructureTypeAction_0() { return cStructureTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//typedef?='struct'
		public Assignment getTypedefAssignment_5() { return cTypedefAssignment_5; }
		
		//'struct'
		public Keyword getTypedefStructKeyword_5_0() { return cTypedefStructKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_7() { return cPropertyAssignment_7; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_0() { return cPropertyVariableParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class StructureTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.StructureTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Assignment cTypedefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTypedefStructKeyword_3_0 = (Keyword)cTypedefAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_5_0 = (RuleCall)cPropertyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StructureTypeDefinitionImpl fmlType::StructureType:
		//	{fmlType::StructureType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='struct'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::StructureType} name=ESIdentifier unrestrictedName=UnrestrictedName? typedef?='struct' '{' property+=Variable+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::StructureType}
		public Action getStructureTypeAction_0() { return cStructureTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//typedef?='struct'
		public Assignment getTypedefAssignment_3() { return cTypedefAssignment_3; }
		
		//'struct'
		public Keyword getTypedefStructKeyword_3_0() { return cTypedefStructKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_5() { return cPropertyAssignment_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_5_0() { return cPropertyVariableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class UnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyVariableParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnionType fmlType::UnionType:
		//	{fmlType::UnionType}
		//	'union'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::UnionType} 'union' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::UnionType}
		public Action getUnionTypeAction_0() { return cUnionTypeAction_0; }
		
		//'union'
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_3_0() { return cPropertyVariableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class UnionTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnionTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Assignment cTypedefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cTypedefUnionKeyword_5_0 = (Keyword)cTypedefAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertyVariableParserRuleCall_7_0 = (RuleCall)cPropertyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//UnionTypeDefinition fmlType::UnionType:
		//	{fmlType::UnionType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='union'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::UnionType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//typedef?='union' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::UnionType}
		public Action getUnionTypeAction_0() { return cUnionTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//typedef?='union'
		public Assignment getTypedefAssignment_5() { return cTypedefAssignment_5; }
		
		//'union'
		public Keyword getTypedefUnionKeyword_5_0() { return cTypedefUnionKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_7() { return cPropertyAssignment_7; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_0() { return cPropertyVariableParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class UnionTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnionTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Assignment cTypedefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTypedefUnionKeyword_3_0 = (Keyword)cTypedefAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_5_0 = (RuleCall)cPropertyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnionTypeDefinitionImpl fmlType::UnionType:
		//	{fmlType::UnionType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='union'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::UnionType} name=ESIdentifier unrestrictedName=UnrestrictedName? typedef?='union' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::UnionType}
		public Action getUnionTypeAction_0() { return cUnionTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//typedef?='union'
		public Assignment getTypedefAssignment_3() { return cTypedefAssignment_3; }
		
		//'union'
		public Keyword getTypedefUnionKeyword_3_0() { return cTypedefUnionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_5() { return cPropertyAssignment_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_5_0() { return cPropertyVariableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ChoiceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChoiceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoiceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyVariableParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChoiceType fmlType::ChoiceType:
		//	{fmlType::ChoiceType}
		//	'choice'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::ChoiceType} 'choice' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::ChoiceType}
		public Action getChoiceTypeAction_0() { return cChoiceTypeAction_0; }
		
		//'choice'
		public Keyword getChoiceKeyword_1() { return cChoiceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_3_0() { return cPropertyVariableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ChoiceTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChoiceTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoiceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Assignment cTypedefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cTypedefChoiceKeyword_5_0 = (Keyword)cTypedefAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertyVariableParserRuleCall_7_0 = (RuleCall)cPropertyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ChoiceTypeDefinition fmlType::ChoiceType:
		//	{fmlType::ChoiceType} visibility=VisibilityKind? 'type'
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='choice'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::ChoiceType} visibility=VisibilityKind? 'type' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//typedef?='choice' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::ChoiceType}
		public Action getChoiceTypeAction_0() { return cChoiceTypeAction_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_1_0() { return cVisibilityVisibilityKindEnumRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//typedef?='choice'
		public Assignment getTypedefAssignment_5() { return cTypedefAssignment_5; }
		
		//'choice'
		public Keyword getTypedefChoiceKeyword_5_0() { return cTypedefChoiceKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_7() { return cPropertyAssignment_7; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_7_0() { return cPropertyVariableParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ChoiceTypeDefinitionImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChoiceTypeDefinitionImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoiceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Assignment cTypedefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTypedefChoiceKeyword_3_0 = (Keyword)cTypedefAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyVariableParserRuleCall_5_0 = (RuleCall)cPropertyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChoiceTypeDefinitionImpl fmlType::ChoiceType:
		//	{fmlType::ChoiceType} name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	typedef?='choice'
		//	'{'
		//	property+=Variable+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::ChoiceType} name=ESIdentifier unrestrictedName=UnrestrictedName? typedef?='choice' '{' property+=Variable+ '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlType::ChoiceType}
		public Action getChoiceTypeAction_0() { return cChoiceTypeAction_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//typedef?='choice'
		public Assignment getTypedefAssignment_3() { return cTypedefAssignment_3; }
		
		//'choice'
		public Keyword getTypedefChoiceKeyword_3_0() { return cTypedefChoiceKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//property+=Variable+
		public Assignment getPropertyAssignment_5() { return cPropertyAssignment_5; }
		
		//Variable
		public RuleCall getPropertyVariableParserRuleCall_5_0() { return cPropertyVariableParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Modifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_0 = (Keyword)cFinalAssignment_1_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cReferenceReferenceKeyword_1_2_0 = (Keyword)cReferenceAssignment_1_2.eContents().get(0);
		private final Assignment cVolatileAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cVolatileVolatileKeyword_1_3_0 = (Keyword)cVolatileAssignment_1_3.eContents().get(0);
		private final Assignment cTransientAssignment_1_4 = (Assignment)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cTransientTransientKeyword_1_4_0 = (Keyword)cTransientAssignment_1_4.eContents().get(0);
		
		/// *
		//enum TypeSpecifyerKind returns TypeSpecifyerKind
		//	: ALIAS = 'ALIAS'
		//	| BOOLEAN = 'BOOLEAN'
		//	| CHAR = 'CHAR'
		//	| INT = 'INT'
		//	| RATIONAL = 'RATIONAL'
		//	| URATIONAL = 'URATIONAL'
		//	| FLOAT = 'FLOAT'
		//	| UFLOAT = 'UFLOAT'
		//	| DOUBLE = 'DOUBLE'
		//	| UDOUBLE = 'UDOUBLE'
		//	| REAL = 'REAL'
		//	| UREAL = 'UREAL'
		//	| CTIME = 'CTIME'
		//	| DTIME = 'DTIME'
		//	| STRING = 'STRING'
		//	| IDENTIFIER = 'IDENTIFIER'
		//	| UFI = 'UFI'
		//	| ARRAY = 'ARRAY'
		//	| VECTOR = 'VECTOR'
		//	| LIST = 'LIST'
		//	| FIFO = 'FIFO'
		//	| LIFO = 'LIFO'
		//	| MULTISET = 'MULTISET'
		//	| SET = 'SET'
		//	| INTERVAL = 'INTERVAL'
		//	| ENUM = 'ENUM'
		//	| STRUCTURE = 'STRUCTURE'
		//	| BUFFER = 'BUFFER'
		//	| MESSAGE = 'MESSAGE'
		//	| PORT = 'PORT'
		//	| CONNECTION = 'CONNECTION'
		//	| OPERATOR = 'OPERATOR'
		//	| MACHINE = 'MACHINE'
		//	| LAMBDA = 'LAMBDA'
		//	| UNIVERSAL = 'UNIVERSAL'
		//	;
		// * / ////////////////////////////////////////////////////////////////////////////////
		//// Variable Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Modifier fmlInfra::Modifier:
		//	{fmlInfra::Modifier} (static?='static'?
		//	& final?='final'?
		//	& reference?='reference'?
		//	& volatile?='volatile'?
		//	& transient?='transient'?)
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Modifier} (static?='static'? & final?='final'? & reference?='reference'? & volatile?='volatile'? &
		//transient?='transient'?)
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Modifier}
		public Action getModifierAction_0() { return cModifierAction_0; }
		
		//(static?='static'? & final?='final'? & reference?='reference'? & volatile?='volatile'? & transient?='transient'?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//static?='static'?
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_1_0() { return cFinalFinalKeyword_1_1_0; }
		
		//reference?='reference'?
		public Assignment getReferenceAssignment_1_2() { return cReferenceAssignment_1_2; }
		
		//'reference'
		public Keyword getReferenceReferenceKeyword_1_2_0() { return cReferenceReferenceKeyword_1_2_0; }
		
		//volatile?='volatile'?
		public Assignment getVolatileAssignment_1_3() { return cVolatileAssignment_1_3; }
		
		//'volatile'
		public Keyword getVolatileVolatileKeyword_1_3_0() { return cVolatileVolatileKeyword_1_3_0; }
		
		//transient?='transient'?
		public Assignment getTransientAssignment_1_4() { return cTransientAssignment_1_4; }
		
		//'transient'
		public Keyword getTransientTransientKeyword_1_4_0() { return cTransientTransientKeyword_1_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Assignment cModifierAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cModifierModifierParserRuleCall_0_1_0 = (RuleCall)cModifierAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cConstAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cConstValKeyword_1_1_0 = (Keyword)cConstAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Assignment cConstAssignment_1_2_0_0 = (Assignment)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cConstConstKeyword_1_2_0_0_0 = (Keyword)cConstAssignment_1_2_0_0.eContents().get(0);
		private final Assignment cConstAssignment_1_2_0_1 = (Assignment)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cConstFinalKeyword_1_2_0_1_0 = (Keyword)cConstAssignment_1_2_0_1.eContents().get(0);
		private final Assignment cMacroAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cMacroMacroKeyword_1_2_1_0 = (Keyword)cMacroAssignment_1_2_1.eContents().get(0);
		private final Keyword cVarKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cMacroAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cMacroMacroKeyword_1_3_0_0 = (Keyword)cMacroAssignment_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_3_1 = (Alternatives)cGroup_1_3.eContents().get(1);
		private final Keyword cVarKeyword_1_3_1_0 = (Keyword)cAlternatives_1_3_1.eContents().get(0);
		private final Assignment cConstAssignment_1_3_1_1 = (Assignment)cAlternatives_1_3_1.eContents().get(1);
		private final Keyword cConstValKeyword_1_3_1_1_0 = (Keyword)cConstAssignment_1_3_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_5_1_0 = (RuleCall)cDefaultValueAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cOnWriteActionAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cOnWriteActionOnWriteRoutineParserRuleCall_6_0_1_0 = (RuleCall)cOnWriteActionAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//Variable fmlInfra::Variable:
		//	(visibility=VisibilityKind? & modifier=Modifier?) ('var' | const?='val'
		//	| (const?='const' | const?='final') macro?='macro'? 'var'?
		//	| macro?='macro' ('var' | const?='val')?) type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
		//	'}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//(visibility=VisibilityKind? & modifier=Modifier?) ('var' | const?='val' | (const?='const' | const?='final')
		//macro?='macro'? 'var'? | macro?='macro' ('var' | const?='val')?) type=DataType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//(visibility=VisibilityKind? & modifier=Modifier?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0_0; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0_1() { return cModifierAssignment_0_1; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_1_0() { return cModifierModifierParserRuleCall_0_1_0; }
		
		//('var' | const?='val' | (const?='const' | const?='final') macro?='macro'? 'var'? | macro?='macro' ('var' |
		//const?='val')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'var'
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }
		
		//const?='val'
		public Assignment getConstAssignment_1_1() { return cConstAssignment_1_1; }
		
		//'val'
		public Keyword getConstValKeyword_1_1_0() { return cConstValKeyword_1_1_0; }
		
		//(const?='const' | const?='final') macro?='macro'? 'var'?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//(const?='const' | const?='final')
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//const?='const'
		public Assignment getConstAssignment_1_2_0_0() { return cConstAssignment_1_2_0_0; }
		
		//'const'
		public Keyword getConstConstKeyword_1_2_0_0_0() { return cConstConstKeyword_1_2_0_0_0; }
		
		//const?='final'
		public Assignment getConstAssignment_1_2_0_1() { return cConstAssignment_1_2_0_1; }
		
		//'final'
		public Keyword getConstFinalKeyword_1_2_0_1_0() { return cConstFinalKeyword_1_2_0_1_0; }
		
		//macro?='macro'?
		public Assignment getMacroAssignment_1_2_1() { return cMacroAssignment_1_2_1; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_1_2_1_0() { return cMacroMacroKeyword_1_2_1_0; }
		
		//'var'?
		public Keyword getVarKeyword_1_2_2() { return cVarKeyword_1_2_2; }
		
		//macro?='macro' ('var' | const?='val')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//macro?='macro'
		public Assignment getMacroAssignment_1_3_0() { return cMacroAssignment_1_3_0; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_1_3_0_0() { return cMacroMacroKeyword_1_3_0_0; }
		
		//('var' | const?='val')?
		public Alternatives getAlternatives_1_3_1() { return cAlternatives_1_3_1; }
		
		//'var'
		public Keyword getVarKeyword_1_3_1_0() { return cVarKeyword_1_3_1_0; }
		
		//const?='val'
		public Assignment getConstAssignment_1_3_1_1() { return cConstAssignment_1_3_1_1; }
		
		//'val'
		public Keyword getConstValKeyword_1_3_1_1_0() { return cConstValKeyword_1_3_1_1_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_5_1() { return cDefaultValueAssignment_5_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_5_1_0() { return cDefaultValueExpressionParserRuleCall_5_1_0; }
		
		//('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'{' onWriteAction=OnWriteRoutine '}'
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }
		
		//onWriteAction=OnWriteRoutine
		public Assignment getOnWriteActionAssignment_6_0_1() { return cOnWriteActionAssignment_6_0_1; }
		
		//OnWriteRoutine
		public RuleCall getOnWriteActionOnWriteRoutineParserRuleCall_6_0_1_0() { return cOnWriteActionOnWriteRoutineParserRuleCall_6_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}
	public class VariableImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VariableImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cUnorderedGroup_0.eContents().get(0);
		private final Assignment cConstAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0_0_0 = (Keyword)cConstAssignment_0_0_0.eContents().get(0);
		private final Assignment cConstAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cConstFinalKeyword_0_0_1_0 = (Keyword)cConstAssignment_0_0_1.eContents().get(0);
		private final Assignment cMacroAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cMacroMacroKeyword_0_1_0 = (Keyword)cMacroAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cOnWriteActionAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cOnWriteActionOnWriteRoutineParserRuleCall_5_0_1_0 = (RuleCall)cOnWriteActionAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//VariableImpl fmlInfra::Variable:
		//	((const?='const' | const?='final')? & macro?='macro'?) type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
		//	'}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//((const?='const' | const?='final')? & macro?='macro'?) type=DataType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//((const?='const' | const?='final')? & macro?='macro'?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//(const?='const' | const?='final')?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//const?='const'
		public Assignment getConstAssignment_0_0_0() { return cConstAssignment_0_0_0; }
		
		//'const'
		public Keyword getConstConstKeyword_0_0_0_0() { return cConstConstKeyword_0_0_0_0; }
		
		//const?='final'
		public Assignment getConstAssignment_0_0_1() { return cConstAssignment_0_0_1; }
		
		//'final'
		public Keyword getConstFinalKeyword_0_0_1_0() { return cConstFinalKeyword_0_0_1_0; }
		
		//macro?='macro'?
		public Assignment getMacroAssignment_0_1() { return cMacroAssignment_0_1; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_0_1_0() { return cMacroMacroKeyword_0_1_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'{' onWriteAction=OnWriteRoutine '}'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }
		
		//onWriteAction=OnWriteRoutine
		public Assignment getOnWriteActionAssignment_5_0_1() { return cOnWriteActionAssignment_5_0_1; }
		
		//OnWriteRoutine
		public RuleCall getOnWriteActionOnWriteRoutineParserRuleCall_5_0_1_0() { return cOnWriteActionOnWriteRoutineParserRuleCall_5_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}
	public class OnWriteRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OnWriteRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOn_writeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterVariableRoutineParameterParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cBodyBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_3_0 = (RuleCall)cBodyBlockAssignment_3.eContents().get(0);
		
		//OnWriteRoutine fmlInfra::Routine:
		//	{fmlInfra::Routine}
		//	'@on_write' ('(' parameter+=VariableRoutineParameter ')')?
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Routine} '@on_write' ('(' parameter+=VariableRoutineParameter ')')? bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Routine}
		public Action getRoutineAction_0() { return cRoutineAction_0; }
		
		//'@on_write'
		public Keyword getOn_writeKeyword_1() { return cOn_writeKeyword_1; }
		
		//('(' parameter+=VariableRoutineParameter ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameter+=VariableRoutineParameter
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }
		
		//VariableRoutineParameter
		public RuleCall getParameterVariableRoutineParameterParserRuleCall_2_1_0() { return cParameterVariableRoutineParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_3() { return cBodyBlockAssignment_3; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_3_0() { return cBodyBlockBlockStatementParserRuleCall_3_0; }
	}
	public class VariableRoutineParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VariableRoutineParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_2_1_0 = (RuleCall)cDefaultValueAssignment_2_1.eContents().get(0);
		
		//VariableRoutineParameter fmlInfra::Parameter:
		//	type=DataType?
		//	name=ESIdentifier ('=' defaultValue=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType? name=ESIdentifier ('=' defaultValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=DataType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_2_1() { return cDefaultValueAssignment_2_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_2_1_0() { return cDefaultValueExpressionParserRuleCall_2_1_0; }
	}
	public class VariablePublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VariablePublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cConstAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstConstKeyword_1_0_0_0 = (Keyword)cConstAssignment_1_0_0.eContents().get(0);
		private final Assignment cConstAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cConstFinalKeyword_1_0_1_0 = (Keyword)cConstAssignment_1_0_1.eContents().get(0);
		private final Assignment cMacroAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cMacroMacroKeyword_1_1_0 = (Keyword)cMacroAssignment_1_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityPublicVariableVisibilityKindEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0 = (RuleCall)cUnrestrictedNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_6_1_0 = (RuleCall)cDefaultValueAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cOnWriteActionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0 = (RuleCall)cOnWriteActionAssignment_7_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//VariablePublic fmlInfra::Variable:
		//	modifier=Modifier? ((const?='const' | const?='final')?
		//	& macro?='macro'?)?
		//	visibility=PublicVariableVisibilityKind
		//	type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
		//	'}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? ((const?='const' | const?='final')? & macro?='macro'?)? visibility=PublicVariableVisibilityKind
		//type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{'
		//onWriteAction=OnWriteRoutine '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//((const?='const' | const?='final')? & macro?='macro'?)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(const?='const' | const?='final')?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//const?='const'
		public Assignment getConstAssignment_1_0_0() { return cConstAssignment_1_0_0; }
		
		//'const'
		public Keyword getConstConstKeyword_1_0_0_0() { return cConstConstKeyword_1_0_0_0; }
		
		//const?='final'
		public Assignment getConstAssignment_1_0_1() { return cConstAssignment_1_0_1; }
		
		//'final'
		public Keyword getConstFinalKeyword_1_0_1_0() { return cConstFinalKeyword_1_0_1_0; }
		
		//macro?='macro'?
		public Assignment getMacroAssignment_1_1() { return cMacroAssignment_1_1; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_1_1_0() { return cMacroMacroKeyword_1_1_0; }
		
		//visibility=PublicVariableVisibilityKind
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//PublicVariableVisibilityKind
		public RuleCall getVisibilityPublicVariableVisibilityKindEnumRuleCall_2_0() { return cVisibilityPublicVariableVisibilityKindEnumRuleCall_2_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_3_0() { return cTypeDataTypeParserRuleCall_3_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0() { return cNameESIdentifierParserRuleCall_4_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_5() { return cUnrestrictedNameAssignment_5; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_5_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_6_1() { return cDefaultValueAssignment_6_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_6_1_0() { return cDefaultValueExpressionParserRuleCall_6_1_0; }
		
		//('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'{' onWriteAction=OnWriteRoutine '}'
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }
		
		//onWriteAction=OnWriteRoutine
		public Assignment getOnWriteActionAssignment_7_0_1() { return cOnWriteActionAssignment_7_0_1; }
		
		//OnWriteRoutine
		public RuleCall getOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0() { return cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class VariableProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VariableProtected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cConstAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstConstKeyword_1_0_0_0 = (Keyword)cConstAssignment_1_0_0.eContents().get(0);
		private final Assignment cConstAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cConstFinalKeyword_1_0_1_0 = (Keyword)cConstAssignment_1_0_1.eContents().get(0);
		private final Assignment cMacroAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cMacroMacroKeyword_1_1_0 = (Keyword)cMacroAssignment_1_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityProtectedVariableVisibilityKindEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0 = (RuleCall)cUnrestrictedNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_6_1_0 = (RuleCall)cDefaultValueAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cOnWriteActionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0 = (RuleCall)cOnWriteActionAssignment_7_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//VariableProtected fmlInfra::Variable:
		//	modifier=Modifier? ((const?='const' | const?='final')?
		//	& macro?='macro'?)?
		//	visibility=ProtectedVariableVisibilityKind
		//	type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
		//	'}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? ((const?='const' | const?='final')? & macro?='macro'?)? visibility=ProtectedVariableVisibilityKind
		//type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{'
		//onWriteAction=OnWriteRoutine '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//((const?='const' | const?='final')? & macro?='macro'?)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(const?='const' | const?='final')?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//const?='const'
		public Assignment getConstAssignment_1_0_0() { return cConstAssignment_1_0_0; }
		
		//'const'
		public Keyword getConstConstKeyword_1_0_0_0() { return cConstConstKeyword_1_0_0_0; }
		
		//const?='final'
		public Assignment getConstAssignment_1_0_1() { return cConstAssignment_1_0_1; }
		
		//'final'
		public Keyword getConstFinalKeyword_1_0_1_0() { return cConstFinalKeyword_1_0_1_0; }
		
		//macro?='macro'?
		public Assignment getMacroAssignment_1_1() { return cMacroAssignment_1_1; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_1_1_0() { return cMacroMacroKeyword_1_1_0; }
		
		//visibility=ProtectedVariableVisibilityKind
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//ProtectedVariableVisibilityKind
		public RuleCall getVisibilityProtectedVariableVisibilityKindEnumRuleCall_2_0() { return cVisibilityProtectedVariableVisibilityKindEnumRuleCall_2_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_3_0() { return cTypeDataTypeParserRuleCall_3_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0() { return cNameESIdentifierParserRuleCall_4_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_5() { return cUnrestrictedNameAssignment_5; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_5_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_6_1() { return cDefaultValueAssignment_6_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_6_1_0() { return cDefaultValueExpressionParserRuleCall_6_1_0; }
		
		//('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'{' onWriteAction=OnWriteRoutine '}'
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }
		
		//onWriteAction=OnWriteRoutine
		public Assignment getOnWriteActionAssignment_7_0_1() { return cOnWriteActionAssignment_7_0_1; }
		
		//OnWriteRoutine
		public RuleCall getOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0() { return cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class VariablePrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VariablePrivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cConstAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstConstKeyword_1_0_0_0 = (Keyword)cConstAssignment_1_0_0.eContents().get(0);
		private final Assignment cConstAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cConstFinalKeyword_1_0_1_0 = (Keyword)cConstAssignment_1_0_1.eContents().get(0);
		private final Assignment cMacroAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cMacroMacroKeyword_1_1_0 = (Keyword)cMacroAssignment_1_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityPrivateVariableVisibilityKindEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0 = (RuleCall)cUnrestrictedNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_6_1_0 = (RuleCall)cDefaultValueAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cOnWriteActionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0 = (RuleCall)cOnWriteActionAssignment_7_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//VariablePrivate fmlInfra::Variable:
		//	modifier=Modifier? ((const?='const' | const?='final')?
		//	& macro?='macro'?)?
		//	visibility=PrivateVariableVisibilityKind
		//	type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
		//	'}' | ';')
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? ((const?='const' | const?='final')? & macro?='macro'?)? visibility=PrivateVariableVisibilityKind
		//type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{'
		//onWriteAction=OnWriteRoutine '}' | ';')
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//((const?='const' | const?='final')? & macro?='macro'?)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(const?='const' | const?='final')?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//const?='const'
		public Assignment getConstAssignment_1_0_0() { return cConstAssignment_1_0_0; }
		
		//'const'
		public Keyword getConstConstKeyword_1_0_0_0() { return cConstConstKeyword_1_0_0_0; }
		
		//const?='final'
		public Assignment getConstAssignment_1_0_1() { return cConstAssignment_1_0_1; }
		
		//'final'
		public Keyword getConstFinalKeyword_1_0_1_0() { return cConstFinalKeyword_1_0_1_0; }
		
		//macro?='macro'?
		public Assignment getMacroAssignment_1_1() { return cMacroAssignment_1_1; }
		
		//'macro'
		public Keyword getMacroMacroKeyword_1_1_0() { return cMacroMacroKeyword_1_1_0; }
		
		//visibility=PrivateVariableVisibilityKind
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//PrivateVariableVisibilityKind
		public RuleCall getVisibilityPrivateVariableVisibilityKindEnumRuleCall_2_0() { return cVisibilityPrivateVariableVisibilityKindEnumRuleCall_2_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_3_0() { return cTypeDataTypeParserRuleCall_3_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0() { return cNameESIdentifierParserRuleCall_4_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_5() { return cUnrestrictedNameAssignment_5; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_5_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_5_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_6_1() { return cDefaultValueAssignment_6_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_6_1_0() { return cDefaultValueExpressionParserRuleCall_6_1_0; }
		
		//('{' onWriteAction=OnWriteRoutine '}' | ';')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'{' onWriteAction=OnWriteRoutine '}'
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }
		
		//onWriteAction=OnWriteRoutine
		public Assignment getOnWriteActionAssignment_7_0_1() { return cOnWriteActionAssignment_7_0_1; }
		
		//OnWriteRoutine
		public RuleCall getOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0() { return cOnWriteActionOnWriteRoutineParserRuleCall_7_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}
	public class FunctionalParameterSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.FunctionalParameterSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterFunctionalParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterFunctionalParameterParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		
		//FunctionalParameterSet fmlInfra::ParameterSet:
		//	{fmlInfra::ParameterSet} parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ParameterSet} parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ParameterSet}
		public Action getParameterSetAction_0() { return cParameterSetAction_0; }
		
		//parameter+=FunctionalParameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//FunctionalParameter
		public RuleCall getParameterFunctionalParameterParserRuleCall_1_0() { return cParameterFunctionalParameterParserRuleCall_1_0; }
		
		//(',' parameter+=FunctionalParameter)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//parameter+=FunctionalParameter
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }
		
		//FunctionalParameter
		public RuleCall getParameterFunctionalParameterParserRuleCall_2_1_0() { return cParameterFunctionalParameterParserRuleCall_2_1_0; }
	}
	public class FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionParameterDirectionKindEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		
		//FunctionalParameter fmlInfra::Parameter:
		//	{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType
		//	name=ESIdentifier ('=' defaultValue=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType name=ESIdentifier ('=' defaultValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//direction=ParameterDirectionKind?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ParameterDirectionKind
		public RuleCall getDirectionParameterDirectionKindEnumRuleCall_1_0() { return cDirectionParameterDirectionKindEnumRuleCall_1_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
	}
	public class FormalParameterSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.FormalParameterSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		
		//FormalParameterSet fmlInfra::ParameterSet:
		//	{fmlInfra::ParameterSet} parameter+=FormalParameter (',' parameter+=FormalParameter)*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ParameterSet} parameter+=FormalParameter (',' parameter+=FormalParameter)*
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ParameterSet}
		public Action getParameterSetAction_0() { return cParameterSetAction_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_1_0() { return cParameterFormalParameterParserRuleCall_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_2_1_0() { return cParameterFormalParameterParserRuleCall_2_1_0; }
	}
	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionParameterDirectionKindEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		
		//FormalParameter fmlInfra::Parameter:
		//	{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType
		//	name=ESIdentifier? ('=' defaultValue=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType name=ESIdentifier? ('=' defaultValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//direction=ParameterDirectionKind?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ParameterDirectionKind
		public RuleCall getDirectionParameterDirectionKindEnumRuleCall_1_0() { return cDirectionParameterDirectionKindEnumRuleCall_1_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
	}
	public class BlockParameterSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BlockParameterSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cInputKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cParameterParameterInputParserRuleCall_1_0_1_0_0 = (RuleCall)cParameterAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInputParserRuleCall_1_0_1_1_1_0 = (RuleCall)cParameterAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_1_1_2 = (Keyword)cGroup_1_0_1_1.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cInoutKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cParameterAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cParameterParameterInoutParserRuleCall_1_1_1_0_0 = (RuleCall)cParameterAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParameterParameterInoutParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParameterAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1_1_2 = (Keyword)cGroup_1_1_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cOutputKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Assignment cParameterAssignment_1_2_1_0 = (Assignment)cAlternatives_1_2_1.eContents().get(0);
		private final RuleCall cParameterParameterOutputParserRuleCall_1_2_1_0_0 = (RuleCall)cParameterAssignment_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2_1_1_0 = (Keyword)cGroup_1_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_2_1_1_1 = (Assignment)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterOutputParserRuleCall_1_2_1_1_1_0 = (RuleCall)cParameterAssignment_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_1_1_2 = (Keyword)cGroup_1_2_1_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cReturnKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_3_1 = (Alternatives)cGroup_1_3.eContents().get(1);
		private final Assignment cParameterAssignment_1_3_1_0 = (Assignment)cAlternatives_1_3_1.eContents().get(0);
		private final RuleCall cParameterParameterReturnParserRuleCall_1_3_1_0_0 = (RuleCall)cParameterAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cAlternatives_1_3_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterReturnParserRuleCall_1_3_1_1_1_0 = (RuleCall)cParameterAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_1_1_2 = (Keyword)cGroup_1_3_1_1.eContents().get(2);
		
		//BlockParameterSet fmlInfra::ParameterSet:
		//	{fmlInfra::ParameterSet} ('input' (parameter+=ParameterInput
		//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
		//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
		//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
		//	| '{' parameter+=ParameterReturn+ '}'))*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::ParameterSet} ('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout'
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{'
		//parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::ParameterSet}
		public Action getParameterSetAction_0() { return cParameterSetAction_0; }
		
		//('input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout | '{'
		//parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}') |
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}'))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'input' (parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'input'
		public Keyword getInputKeyword_1_0_0() { return cInputKeyword_1_0_0; }
		
		//(parameter+=ParameterInput | '{' parameter+=ParameterInput+ '}')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//parameter+=ParameterInput
		public Assignment getParameterAssignment_1_0_1_0() { return cParameterAssignment_1_0_1_0; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_1_0_1_0_0() { return cParameterParameterInputParserRuleCall_1_0_1_0_0; }
		
		//'{' parameter+=ParameterInput+ '}'
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_1_1_0() { return cLeftCurlyBracketKeyword_1_0_1_1_0; }
		
		//parameter+=ParameterInput+
		public Assignment getParameterAssignment_1_0_1_1_1() { return cParameterAssignment_1_0_1_1_1; }
		
		//ParameterInput
		public RuleCall getParameterParameterInputParserRuleCall_1_0_1_1_1_0() { return cParameterParameterInputParserRuleCall_1_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_1_1_2() { return cRightCurlyBracketKeyword_1_0_1_1_2; }
		
		//'inout' (parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'inout'
		public Keyword getInoutKeyword_1_1_0() { return cInoutKeyword_1_1_0; }
		
		//(parameter+=ParameterInout | '{' parameter+=ParameterInout+ '}')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//parameter+=ParameterInout
		public Assignment getParameterAssignment_1_1_1_0() { return cParameterAssignment_1_1_1_0; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_1_1_1_0_0() { return cParameterParameterInoutParserRuleCall_1_1_1_0_0; }
		
		//'{' parameter+=ParameterInout+ '}'
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_1_1_0() { return cLeftCurlyBracketKeyword_1_1_1_1_0; }
		
		//parameter+=ParameterInout+
		public Assignment getParameterAssignment_1_1_1_1_1() { return cParameterAssignment_1_1_1_1_1; }
		
		//ParameterInout
		public RuleCall getParameterParameterInoutParserRuleCall_1_1_1_1_1_0() { return cParameterParameterInoutParserRuleCall_1_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_1_1_2() { return cRightCurlyBracketKeyword_1_1_1_1_2; }
		
		//'output' (parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'output'
		public Keyword getOutputKeyword_1_2_0() { return cOutputKeyword_1_2_0; }
		
		//(parameter+=ParameterOutput | '{' parameter+=ParameterOutput+ '}')
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//parameter+=ParameterOutput
		public Assignment getParameterAssignment_1_2_1_0() { return cParameterAssignment_1_2_1_0; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_1_2_1_0_0() { return cParameterParameterOutputParserRuleCall_1_2_1_0_0; }
		
		//'{' parameter+=ParameterOutput+ '}'
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2_1_1_0() { return cLeftCurlyBracketKeyword_1_2_1_1_0; }
		
		//parameter+=ParameterOutput+
		public Assignment getParameterAssignment_1_2_1_1_1() { return cParameterAssignment_1_2_1_1_1; }
		
		//ParameterOutput
		public RuleCall getParameterParameterOutputParserRuleCall_1_2_1_1_1_0() { return cParameterParameterOutputParserRuleCall_1_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2_1_1_2() { return cRightCurlyBracketKeyword_1_2_1_1_2; }
		
		//'return' (parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'return'
		public Keyword getReturnKeyword_1_3_0() { return cReturnKeyword_1_3_0; }
		
		//(parameter+=ParameterReturn | '{' parameter+=ParameterReturn+ '}')
		public Alternatives getAlternatives_1_3_1() { return cAlternatives_1_3_1; }
		
		//parameter+=ParameterReturn
		public Assignment getParameterAssignment_1_3_1_0() { return cParameterAssignment_1_3_1_0; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_1_3_1_0_0() { return cParameterParameterReturnParserRuleCall_1_3_1_0_0; }
		
		//'{' parameter+=ParameterReturn+ '}'
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_1_1_0() { return cLeftCurlyBracketKeyword_1_3_1_1_0; }
		
		//parameter+=ParameterReturn+
		public Assignment getParameterAssignment_1_3_1_1_1() { return cParameterAssignment_1_3_1_1_1; }
		
		//ParameterReturn
		public RuleCall getParameterParameterReturnParserRuleCall_1_3_1_1_1_0() { return cParameterParameterReturnParserRuleCall_1_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_1_1_2() { return cRightCurlyBracketKeyword_1_3_1_1_2; }
	}
	public class ParameterInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterInputDirectionKindEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParameterInput fmlInfra::Parameter:
		//	direction=ParameterInputDirectionKind type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ParameterInputDirectionKind type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('='
		//defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ParameterInputDirectionKind
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ParameterInputDirectionKind
		public RuleCall getDirectionParameterInputDirectionKindEnumRuleCall_0_0() { return cDirectionParameterInputDirectionKindEnumRuleCall_0_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ParameterInoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterInout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterInoutDirectionKindEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParameterInout fmlInfra::Parameter:
		//	direction=ParameterInoutDirectionKind type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ParameterInoutDirectionKind type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('='
		//defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ParameterInoutDirectionKind
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ParameterInoutDirectionKind
		public RuleCall getDirectionParameterInoutDirectionKindEnumRuleCall_0_0() { return cDirectionParameterInoutDirectionKindEnumRuleCall_0_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ParameterOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterOutputDirectionKindEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParameterOutput fmlInfra::Parameter:
		//	direction=ParameterOutputDirectionKind type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ParameterOutputDirectionKind type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('='
		//defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ParameterOutputDirectionKind
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ParameterOutputDirectionKind
		public RuleCall getDirectionParameterOutputDirectionKindEnumRuleCall_0_0() { return cDirectionParameterOutputDirectionKindEnumRuleCall_0_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ParameterReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParameterReturnDirectionKindEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParameterReturn fmlInfra::Parameter:
		//	direction=ParameterReturnDirectionKind type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ParameterReturnDirectionKind type=DataType name=ESIdentifier unrestrictedName=UnrestrictedName? ('='
		//defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ParameterReturnDirectionKind
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ParameterReturnDirectionKind
		public RuleCall getDirectionParameterReturnDirectionKindEnumRuleCall_0_0() { return cDirectionParameterReturnDirectionKindEnumRuleCall_0_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_1_0() { return cDefaultValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionBlockParameterDirectionKindEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefaultValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_5_1_0 = (RuleCall)cDefaultValueAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ParameterDeclaration fmlInfra::Parameter:
		//	{fmlInfra::Parameter} direction=BlockParameterDirectionKind type=DataType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::Parameter} direction=BlockParameterDirectionKind type=DataType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//direction=BlockParameterDirectionKind
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//BlockParameterDirectionKind
		public RuleCall getDirectionBlockParameterDirectionKindEnumRuleCall_1_0() { return cDirectionBlockParameterDirectionKindEnumRuleCall_1_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_2_0() { return cTypeDataTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('=' defaultValue=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_5_1() { return cDefaultValueAssignment_5_1; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_5_1_0() { return cDefaultValueExpressionParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class BufferContainerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferContainerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerBufferContainerKindEnumRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cSizeAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cSizeEIntParserRuleCall_2_1_0_0 = (RuleCall)cSizeAssignment_2_1_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_2_1_1_0 = (Keyword)cUnboundedAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Buffer Rules
		//////////////////////////////////////////////////////////////////////////////////
		//BufferContainerType fmlType::CollectionType:
		//	{fmlType::CollectionType} container=BufferContainerKind ('<' (size=EInt | unbounded?='*')? '>')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlType::CollectionType} container=BufferContainerKind ('<' (size=EInt | unbounded?='*')? '>')?
		public Group getGroup() { return cGroup; }
		
		//{fmlType::CollectionType}
		public Action getCollectionTypeAction_0() { return cCollectionTypeAction_0; }
		
		//container=BufferContainerKind
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//BufferContainerKind
		public RuleCall getContainerBufferContainerKindEnumRuleCall_1_0() { return cContainerBufferContainerKindEnumRuleCall_1_0; }
		
		//('<' (size=EInt | unbounded?='*')? '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//(size=EInt | unbounded?='*')?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//size=EInt
		public Assignment getSizeAssignment_2_1_0() { return cSizeAssignment_2_1_0; }
		
		//EInt
		public RuleCall getSizeEIntParserRuleCall_2_1_0_0() { return cSizeEIntParserRuleCall_2_1_0_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_2_1_1() { return cUnboundedAssignment_2_1_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_2_1_1_0() { return cUnboundedAsteriskKeyword_2_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}
	public class BufferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Buffer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Assignment cModifierAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cModifierModifierParserRuleCall_0_1_0 = (RuleCall)cModifierAssignment_0_1.eContents().get(0);
		private final Keyword cBufferKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBufferContainerTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Buffer fmlInfra::Buffer:
		//	(visibility=VisibilityKind? & modifier=Modifier?)
		//	'buffer' type=BufferContainerType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//(visibility=VisibilityKind? & modifier=Modifier?) 'buffer' type=BufferContainerType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ';'
		public Group getGroup() { return cGroup; }
		
		//(visibility=VisibilityKind? & modifier=Modifier?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0_0; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0_1() { return cModifierAssignment_0_1; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_1_0() { return cModifierModifierParserRuleCall_0_1_0; }
		
		//'buffer'
		public Keyword getBufferKeyword_1() { return cBufferKeyword_1; }
		
		//type=BufferContainerType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BufferContainerType
		public RuleCall getTypeBufferContainerTypeParserRuleCall_2_0() { return cTypeBufferContainerTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class BufferImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeBufferContainerTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BufferImpl fmlInfra::Buffer:
		//	type=BufferContainerType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//type=BufferContainerType name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		public Group getGroup() { return cGroup; }
		
		//type=BufferContainerType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//BufferContainerType
		public RuleCall getTypeBufferContainerTypeParserRuleCall_0_0() { return cTypeBufferContainerTypeParserRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class BufferPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPublicBufferVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBufferContainerTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BufferPublic fmlInfra::Buffer:
		//	modifier=Modifier?
		//	visibility=PublicBufferVisibilityKind type=BufferContainerType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? visibility=PublicBufferVisibilityKind type=BufferContainerType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ';'
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//visibility=PublicBufferVisibilityKind
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PublicBufferVisibilityKind
		public RuleCall getVisibilityPublicBufferVisibilityKindEnumRuleCall_1_0() { return cVisibilityPublicBufferVisibilityKindEnumRuleCall_1_0; }
		
		//type=BufferContainerType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BufferContainerType
		public RuleCall getTypeBufferContainerTypeParserRuleCall_2_0() { return cTypeBufferContainerTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class BufferProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferProtected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityProtectedBufferVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBufferContainerTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BufferProtected fmlInfra::Buffer:
		//	modifier=Modifier?
		//	visibility=ProtectedBufferVisibilityKind type=BufferContainerType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? visibility=ProtectedBufferVisibilityKind type=BufferContainerType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ';'
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//visibility=ProtectedBufferVisibilityKind
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//ProtectedBufferVisibilityKind
		public RuleCall getVisibilityProtectedBufferVisibilityKindEnumRuleCall_1_0() { return cVisibilityProtectedBufferVisibilityKindEnumRuleCall_1_0; }
		
		//type=BufferContainerType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BufferContainerType
		public RuleCall getTypeBufferContainerTypeParserRuleCall_2_0() { return cTypeBufferContainerTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class BufferPrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferPrivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityPrivateBufferVisibilityKindEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBufferContainerTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BufferPrivate fmlInfra::Buffer:
		//	modifier=Modifier?
		//	visibility=PrivateBufferVisibilityKind type=BufferContainerType
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? visibility=PrivateBufferVisibilityKind type=BufferContainerType name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ';'
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }
		
		//visibility=PrivateBufferVisibilityKind
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//PrivateBufferVisibilityKind
		public RuleCall getVisibilityPrivateBufferVisibilityKindEnumRuleCall_1_0() { return cVisibilityPrivateBufferVisibilityKindEnumRuleCall_1_0; }
		
		//type=BufferContainerType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BufferContainerType
		public RuleCall getTypeBufferContainerTypeParserRuleCall_2_0() { return cTypeBufferContainerTypeParserRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_1_0 = (RuleCall)cParameterAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParameterAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_2_1_0 = (RuleCall)cParameterAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Port rules
		//////////////////////////////////////////////////////////////////////////////////
		//Port fmlInfra::Port:
		//	visibility=VisibilityKind?
		//	'port' direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityKind? 'port' direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_2_0() { return cDirectionChannelDirectionEnumRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_1() { return cParameterAssignment_5_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_1_0() { return cParameterFormalParameterParserRuleCall_5_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_2_1() { return cParameterAssignment_5_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_2_1_0() { return cParameterFormalParameterParserRuleCall_5_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class PortImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PortImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParameterAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_3_2_1_0 = (RuleCall)cParameterAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PortImpl fmlInfra::Port:
		//	direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName? ('(' parameter+=FormalParameter (','
		//parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_0_0() { return cDirectionChannelDirectionEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_3_1_0() { return cParameterFormalParameterParserRuleCall_3_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_3_2_1() { return cParameterAssignment_3_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_3_2_1_0() { return cParameterFormalParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PortPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PortPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPublicPortVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortPublic fmlInfra::Port:
		//	visibility=PublicPortVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PublicPortVisibilityKind direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PublicPortVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PublicPortVisibilityKind
		public RuleCall getVisibilityPublicPortVisibilityKindEnumRuleCall_0_0() { return cVisibilityPublicPortVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PortProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PortProtected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityProtectedPortVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortProtected fmlInfra::Port:
		//	visibility=ProtectedPortVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=ProtectedPortVisibilityKind direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=ProtectedPortVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//ProtectedPortVisibilityKind
		public RuleCall getVisibilityProtectedPortVisibilityKindEnumRuleCall_0_0() { return cVisibilityProtectedPortVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PortPrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PortPrivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPrivatePortVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortPrivate fmlInfra::Port:
		//	visibility=PrivatePortVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PrivatePortVisibilityKind direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PrivatePortVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PrivatePortVisibilityKind
		public RuleCall getVisibilityPrivatePortVisibilityKindEnumRuleCall_0_0() { return cVisibilityPrivatePortVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameESIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cUnrestrictedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_1_0 = (RuleCall)cParameterAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParameterAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_5_2_1_0 = (RuleCall)cParameterAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Signal rules
		//////////////////////////////////////////////////////////////////////////////////
		//Signal fmlInfra::Signal:
		//	visibility=VisibilityKind?
		//	'signal' direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityKind? 'signal' direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }
		
		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_2_0() { return cDirectionChannelDirectionEnumRuleCall_2_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_3_0() { return cNameESIdentifierParserRuleCall_3_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4() { return cUnrestrictedNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_1() { return cParameterAssignment_5_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_1_0() { return cParameterFormalParameterParserRuleCall_5_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_5_2_1() { return cParameterAssignment_5_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_5_2_1_0() { return cParameterFormalParameterParserRuleCall_5_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SignalImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SignalImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_3_1_0 = (RuleCall)cParameterAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParameterAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_3_2_1_0 = (RuleCall)cParameterAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SignalImpl fmlInfra::Signal:
		//	direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName? ('(' parameter+=FormalParameter (','
		//parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_0_0() { return cDirectionChannelDirectionEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_3_1() { return cParameterAssignment_3_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_3_1_0() { return cParameterFormalParameterParserRuleCall_3_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_3_2_1() { return cParameterAssignment_3_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_3_2_1_0() { return cParameterFormalParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SignalPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SignalPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPublicSignalVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SignalPublic fmlInfra::Signal:
		//	visibility=PublicSignalVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PublicSignalVisibilityKind direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PublicSignalVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PublicSignalVisibilityKind
		public RuleCall getVisibilityPublicSignalVisibilityKindEnumRuleCall_0_0() { return cVisibilityPublicSignalVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SignalProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SignalProtected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityProtectedSignalVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SignalProtected fmlInfra::Signal:
		//	visibility=ProtectedSignalVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=ProtectedSignalVisibilityKind direction=ChannelDirection? name=ESIdentifier
		//unrestrictedName=UnrestrictedName? ('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=ProtectedSignalVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//ProtectedSignalVisibilityKind
		public RuleCall getVisibilityProtectedSignalVisibilityKindEnumRuleCall_0_0() { return cVisibilityProtectedSignalVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SignalPrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SignalPrivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPrivateSignalVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterFormalParameterParserRuleCall_4_2_1_0 = (RuleCall)cParameterAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SignalPrivate fmlInfra::Signal:
		//	visibility=PrivateSignalVisibilityKind direction=ChannelDirection?
		//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
		//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
		//	')')?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PrivateSignalVisibilityKind direction=ChannelDirection? name=ESIdentifier unrestrictedName=UnrestrictedName?
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=PrivateSignalVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PrivateSignalVisibilityKind
		public RuleCall getVisibilityPrivateSignalVisibilityKindEnumRuleCall_0_0() { return cVisibilityPrivateSignalVisibilityKindEnumRuleCall_0_0; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_1_0() { return cDirectionChannelDirectionEnumRuleCall_1_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//('(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_1_0() { return cParameterFormalParameterParserRuleCall_4_1_0; }
		
		//(',' parameter+=FormalParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameter+=FormalParameter
		public Assignment getParameterAssignment_4_2_1() { return cParameterAssignment_4_2_1; }
		
		//FormalParameter
		public RuleCall getParameterFormalParameterParserRuleCall_4_2_1_0() { return cParameterFormalParameterParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cChannelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameESIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0 = (RuleCall)cUnrestrictedNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSignalAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSignalSignalReferenceParserRuleCall_5_0_0 = (RuleCall)cSignalAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Channel fmlInfra::Channel:
		//	visibility=VisibilityKind?
		//	'channel' name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (signal+=SignalReference ';')+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityKind? 'channel' name=ESIdentifier unrestrictedName=UnrestrictedName? '{' (signal+=SignalReference
		//';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }
		
		//'channel'
		public Keyword getChannelKeyword_1() { return cChannelKeyword_1; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_2_0() { return cNameESIdentifierParserRuleCall_2_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_3() { return cUnrestrictedNameAssignment_3; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_3_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(signal+=SignalReference ';')+
		public Group getGroup_5() { return cGroup_5; }
		
		//signal+=SignalReference
		public Assignment getSignalAssignment_5_0() { return cSignalAssignment_5_0; }
		
		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_5_0_0() { return cSignalSignalReferenceParserRuleCall_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SignalReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.SignalReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionChannelDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SignalReference fmlInfra::Signal:
		//	direction=ChannelDirection? name=ESIdentifier
		@Override public ParserRule getRule() { return rule; }
		
		//direction=ChannelDirection? name=ESIdentifier
		public Group getGroup() { return cGroup; }
		
		//direction=ChannelDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//ChannelDirection
		public RuleCall getDirectionChannelDirectionEnumRuleCall_0_0() { return cDirectionChannelDirectionEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
	}
	public class ChannelPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChannelPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPublicChannelVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSignalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0_0 = (RuleCall)cSignalAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChannelPublic fmlInfra::Channel:
		//	visibility=PublicChannelVisibilityKind
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (signal+=SignalReference ';')+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PublicChannelVisibilityKind name=ESIdentifier unrestrictedName=UnrestrictedName? '{' (signal+=SignalReference
		//';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//visibility=PublicChannelVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PublicChannelVisibilityKind
		public RuleCall getVisibilityPublicChannelVisibilityKindEnumRuleCall_0_0() { return cVisibilityPublicChannelVisibilityKindEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(signal+=SignalReference ';')+
		public Group getGroup_4() { return cGroup_4; }
		
		//signal+=SignalReference
		public Assignment getSignalAssignment_4_0() { return cSignalAssignment_4_0; }
		
		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0_0() { return cSignalSignalReferenceParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ChannelProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChannelProtected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityProtectedChannelVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSignalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0_0 = (RuleCall)cSignalAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChannelProtected fmlInfra::Channel:
		//	visibility=ProtectedChannelVisibilityKind
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (signal+=SignalReference ';')+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=ProtectedChannelVisibilityKind name=ESIdentifier unrestrictedName=UnrestrictedName? '{'
		//(signal+=SignalReference ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//visibility=ProtectedChannelVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//ProtectedChannelVisibilityKind
		public RuleCall getVisibilityProtectedChannelVisibilityKindEnumRuleCall_0_0() { return cVisibilityProtectedChannelVisibilityKindEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(signal+=SignalReference ';')+
		public Group getGroup_4() { return cGroup_4; }
		
		//signal+=SignalReference
		public Assignment getSignalAssignment_4_0() { return cSignalAssignment_4_0; }
		
		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0_0() { return cSignalSignalReferenceParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ChannelPrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChannelPrivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityPrivateChannelVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameESIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cUnrestrictedNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSignalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSignalSignalReferenceParserRuleCall_4_0_0 = (RuleCall)cSignalAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChannelPrivate fmlInfra::Channel:
		//	visibility=PrivateChannelVisibilityKind
		//	name=ESIdentifier unrestrictedName=UnrestrictedName?
		//	'{' (signal+=SignalReference ';')+
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=PrivateChannelVisibilityKind name=ESIdentifier unrestrictedName=UnrestrictedName? '{'
		//(signal+=SignalReference ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//visibility=PrivateChannelVisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//PrivateChannelVisibilityKind
		public RuleCall getVisibilityPrivateChannelVisibilityKindEnumRuleCall_0_0() { return cVisibilityPrivateChannelVisibilityKindEnumRuleCall_0_0; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_1_0() { return cNameESIdentifierParserRuleCall_1_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_2() { return cUnrestrictedNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_2_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(signal+=SignalReference ';')+
		public Group getGroup_4() { return cGroup_4; }
		
		//signal+=SignalReference
		public Assignment getSignalAssignment_4_0() { return cSignalAssignment_4_0; }
		
		//SignalReference
		public RuleCall getSignalSignalReferenceParserRuleCall_4_0_0() { return cSignalSignalReferenceParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTransientAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTransientTransientKeyword_1_0 = (Keyword)cTransientAssignment_1.eContents().get(0);
		private final Keyword cTransitionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMoeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMoeTransitionMoeParserRuleCall_3_0 = (RuleCall)cMoeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameESIdentifierParserRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Assignment cUnrestrictedNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0 = (RuleCall)cUnrestrictedNameAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Group cGroup_5_0_1_0 = (Group)cAlternatives_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_1_0_0 = (Group)cGroup_5_0_1_0.eContents().get(0);
		private final Keyword cTriggerKeyword_5_0_1_0_0_0 = (Keyword)cGroup_5_0_1_0_0.eContents().get(0);
		private final Assignment cTriggerAssignment_5_0_1_0_0_1 = (Assignment)cGroup_5_0_1_0_0.eContents().get(1);
		private final RuleCall cTriggerTransitionTriggerParserRuleCall_5_0_1_0_0_1_0 = (RuleCall)cTriggerAssignment_5_0_1_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1_0_1 = (Alternatives)cGroup_5_0_1_0.eContents().get(1);
		private final Assignment cGuardAssignment_5_0_1_0_1_0 = (Assignment)cAlternatives_5_0_1_0_1.eContents().get(0);
		private final RuleCall cGuardTransitionGuardParserRuleCall_5_0_1_0_1_0_0 = (RuleCall)cGuardAssignment_5_0_1_0_1_0.eContents().get(0);
		private final Keyword cGuardKeyword_5_0_1_0_1_1 = (Keyword)cAlternatives_5_0_1_0_1.eContents().get(1);
		private final Alternatives cAlternatives_5_0_1_0_2 = (Alternatives)cGroup_5_0_1_0.eContents().get(2);
		private final Assignment cTguardAssignment_5_0_1_0_2_0 = (Assignment)cAlternatives_5_0_1_0_2.eContents().get(0);
		private final RuleCall cTguardTransitionTimedGuardParserRuleCall_5_0_1_0_2_0_0 = (RuleCall)cTguardAssignment_5_0_1_0_2_0.eContents().get(0);
		private final Keyword cTguardKeyword_5_0_1_0_2_1 = (Keyword)cAlternatives_5_0_1_0_2.eContents().get(1);
		private final Keyword cEffectKeyword_5_0_1_0_3 = (Keyword)cGroup_5_0_1_0.eContents().get(3);
		private final Assignment cEffectAssignment_5_0_1_0_4 = (Assignment)cGroup_5_0_1_0.eContents().get(4);
		private final RuleCall cEffectTransitionEffectParserRuleCall_5_0_1_0_4_0 = (RuleCall)cEffectAssignment_5_0_1_0_4.eContents().get(0);
		private final Assignment cBehaviorAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cBehaviorTransitionBehaviorParserRuleCall_5_0_1_1_0 = (RuleCall)cBehaviorAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_0_3 = (Group)cGroup_5_0.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0_3_0 = (Keyword)cGroup_5_0_3.eContents().get(0);
		private final Assignment cTargetAssignment_5_0_3_1 = (Assignment)cGroup_5_0_3.eContents().get(1);
		private final CrossReference cTargetNamedElementCrossReference_5_0_3_1_0 = (CrossReference)cTargetAssignment_5_0_3_1.eContents().get(0);
		private final RuleCall cTargetNamedElementESUfidParserRuleCall_5_0_3_1_0_1 = (RuleCall)cTargetNamedElementCrossReference_5_0_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_0_3_2 = (Keyword)cGroup_5_0_3.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cTargetAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cTargetNamedElementCrossReference_5_1_1_0 = (CrossReference)cTargetAssignment_5_1_1.eContents().get(0);
		private final RuleCall cTargetNamedElementESUfidParserRuleCall_5_1_1_0_1 = (RuleCall)cTargetNamedElementCrossReference_5_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_5_1_2 = (Alternatives)cGroup_5_1.eContents().get(2);
		private final Group cGroup_5_1_2_0 = (Group)cAlternatives_5_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1_2_0_0 = (Keyword)cGroup_5_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_2_0_1 = (Alternatives)cGroup_5_1_2_0.eContents().get(1);
		private final Group cGroup_5_1_2_0_1_0 = (Group)cAlternatives_5_1_2_0_1.eContents().get(0);
		private final Group cGroup_5_1_2_0_1_0_0 = (Group)cGroup_5_1_2_0_1_0.eContents().get(0);
		private final Keyword cTriggerKeyword_5_1_2_0_1_0_0_0 = (Keyword)cGroup_5_1_2_0_1_0_0.eContents().get(0);
		private final Assignment cTriggerAssignment_5_1_2_0_1_0_0_1 = (Assignment)cGroup_5_1_2_0_1_0_0.eContents().get(1);
		private final RuleCall cTriggerTransitionTriggerParserRuleCall_5_1_2_0_1_0_0_1_0 = (RuleCall)cTriggerAssignment_5_1_2_0_1_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_2_0_1_0_1 = (Alternatives)cGroup_5_1_2_0_1_0.eContents().get(1);
		private final Assignment cGuardAssignment_5_1_2_0_1_0_1_0 = (Assignment)cAlternatives_5_1_2_0_1_0_1.eContents().get(0);
		private final RuleCall cGuardTransitionGuardParserRuleCall_5_1_2_0_1_0_1_0_0 = (RuleCall)cGuardAssignment_5_1_2_0_1_0_1_0.eContents().get(0);
		private final Keyword cGuardKeyword_5_1_2_0_1_0_1_1 = (Keyword)cAlternatives_5_1_2_0_1_0_1.eContents().get(1);
		private final Alternatives cAlternatives_5_1_2_0_1_0_2 = (Alternatives)cGroup_5_1_2_0_1_0.eContents().get(2);
		private final Assignment cTguardAssignment_5_1_2_0_1_0_2_0 = (Assignment)cAlternatives_5_1_2_0_1_0_2.eContents().get(0);
		private final RuleCall cTguardTransitionTimedGuardParserRuleCall_5_1_2_0_1_0_2_0_0 = (RuleCall)cTguardAssignment_5_1_2_0_1_0_2_0.eContents().get(0);
		private final Keyword cTguardKeyword_5_1_2_0_1_0_2_1 = (Keyword)cAlternatives_5_1_2_0_1_0_2.eContents().get(1);
		private final Keyword cEffectKeyword_5_1_2_0_1_0_3 = (Keyword)cGroup_5_1_2_0_1_0.eContents().get(3);
		private final Assignment cEffectAssignment_5_1_2_0_1_0_4 = (Assignment)cGroup_5_1_2_0_1_0.eContents().get(4);
		private final RuleCall cEffectTransitionEffectParserRuleCall_5_1_2_0_1_0_4_0 = (RuleCall)cEffectAssignment_5_1_2_0_1_0_4.eContents().get(0);
		private final Assignment cBehaviorAssignment_5_1_2_0_1_1 = (Assignment)cAlternatives_5_1_2_0_1.eContents().get(1);
		private final RuleCall cBehaviorTransitionBehaviorParserRuleCall_5_1_2_0_1_1_0 = (RuleCall)cBehaviorAssignment_5_1_2_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2_0_2 = (Keyword)cGroup_5_1_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1_2_1 = (Keyword)cAlternatives_5_1_2.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Section Transition Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Transition fmlStmchn::Transition:
		//	{fmlStmchn::Transition} transient?='transient'? 'transition'
		//	moe=TransitionMoe? (name=ESIdentifier unrestrictedName=UnrestrictedName?)? ('{' (('@trigger:'
		//	trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard | '@tguard:')?
		//	'@effect:' effect=TransitionEffect?
		//	| behavior=TransitionBehavior)?
		//	'}' ('-->' target=[fmlCommon::NamedElement|ESUfid] ';')?
		//	| '-->' target=[fmlCommon::NamedElement|ESUfid] ('{' (('@trigger:' trigger+=TransitionTrigger*)?
		//	(guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard | '@tguard:')?
		//	'@effect:' effect=TransitionEffect?
		//	| behavior=TransitionBehavior)?
		//	'}' | ';'))
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmchn::Transition} transient?='transient'? 'transition' moe=TransitionMoe? (name=ESIdentifier
		//unrestrictedName=UnrestrictedName?)? ('{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard |
		//'@guard:')? (tguard=TransitionTimedGuard | '@tguard:')? '@effect:' effect=TransitionEffect? |
		//behavior=TransitionBehavior)? '}' ('-->' target=[fmlCommon::NamedElement|ESUfid] ';')? | '-->'
		//target=[fmlCommon::NamedElement|ESUfid] ('{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard |
		//'@guard:')? (tguard=TransitionTimedGuard | '@tguard:')? '@effect:' effect=TransitionEffect? |
		//behavior=TransitionBehavior)? '}' | ';'))
		public Group getGroup() { return cGroup; }
		
		//{fmlStmchn::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//transient?='transient'?
		public Assignment getTransientAssignment_1() { return cTransientAssignment_1; }
		
		//'transient'
		public Keyword getTransientTransientKeyword_1_0() { return cTransientTransientKeyword_1_0; }
		
		//'transition'
		public Keyword getTransitionKeyword_2() { return cTransitionKeyword_2; }
		
		//moe=TransitionMoe?
		public Assignment getMoeAssignment_3() { return cMoeAssignment_3; }
		
		//TransitionMoe
		public RuleCall getMoeTransitionMoeParserRuleCall_3_0() { return cMoeTransitionMoeParserRuleCall_3_0; }
		
		//(name=ESIdentifier unrestrictedName=UnrestrictedName?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//name=ESIdentifier
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }
		
		//ESIdentifier
		public RuleCall getNameESIdentifierParserRuleCall_4_0_0() { return cNameESIdentifierParserRuleCall_4_0_0; }
		
		//unrestrictedName=UnrestrictedName?
		public Assignment getUnrestrictedNameAssignment_4_1() { return cUnrestrictedNameAssignment_4_1; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0() { return cUnrestrictedNameUnrestrictedNameParserRuleCall_4_1_0; }
		
		//('{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)? '}' ('-->'
		//target=[fmlCommon::NamedElement|ESUfid] ';')? | '-->' target=[fmlCommon::NamedElement|ESUfid] ('{' (('@trigger:'
		//trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard | '@tguard:')?
		//'@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)? '}' | ';'))
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)? '}' ('-->'
		//target=[fmlCommon::NamedElement|ESUfid] ';')?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }
		
		//(('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)?
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }
		
		//('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect?
		public Group getGroup_5_0_1_0() { return cGroup_5_0_1_0; }
		
		//('@trigger:' trigger+=TransitionTrigger*)?
		public Group getGroup_5_0_1_0_0() { return cGroup_5_0_1_0_0; }
		
		//'@trigger:'
		public Keyword getTriggerKeyword_5_0_1_0_0_0() { return cTriggerKeyword_5_0_1_0_0_0; }
		
		//trigger+=TransitionTrigger*
		public Assignment getTriggerAssignment_5_0_1_0_0_1() { return cTriggerAssignment_5_0_1_0_0_1; }
		
		//TransitionTrigger
		public RuleCall getTriggerTransitionTriggerParserRuleCall_5_0_1_0_0_1_0() { return cTriggerTransitionTriggerParserRuleCall_5_0_1_0_0_1_0; }
		
		//(guard=TransitionGuard | '@guard:')?
		public Alternatives getAlternatives_5_0_1_0_1() { return cAlternatives_5_0_1_0_1; }
		
		//guard=TransitionGuard
		public Assignment getGuardAssignment_5_0_1_0_1_0() { return cGuardAssignment_5_0_1_0_1_0; }
		
		//TransitionGuard
		public RuleCall getGuardTransitionGuardParserRuleCall_5_0_1_0_1_0_0() { return cGuardTransitionGuardParserRuleCall_5_0_1_0_1_0_0; }
		
		//'@guard:'
		public Keyword getGuardKeyword_5_0_1_0_1_1() { return cGuardKeyword_5_0_1_0_1_1; }
		
		//(tguard=TransitionTimedGuard | '@tguard:')?
		public Alternatives getAlternatives_5_0_1_0_2() { return cAlternatives_5_0_1_0_2; }
		
		//tguard=TransitionTimedGuard
		public Assignment getTguardAssignment_5_0_1_0_2_0() { return cTguardAssignment_5_0_1_0_2_0; }
		
		//TransitionTimedGuard
		public RuleCall getTguardTransitionTimedGuardParserRuleCall_5_0_1_0_2_0_0() { return cTguardTransitionTimedGuardParserRuleCall_5_0_1_0_2_0_0; }
		
		//'@tguard:'
		public Keyword getTguardKeyword_5_0_1_0_2_1() { return cTguardKeyword_5_0_1_0_2_1; }
		
		//'@effect:'
		public Keyword getEffectKeyword_5_0_1_0_3() { return cEffectKeyword_5_0_1_0_3; }
		
		//effect=TransitionEffect?
		public Assignment getEffectAssignment_5_0_1_0_4() { return cEffectAssignment_5_0_1_0_4; }
		
		//TransitionEffect
		public RuleCall getEffectTransitionEffectParserRuleCall_5_0_1_0_4_0() { return cEffectTransitionEffectParserRuleCall_5_0_1_0_4_0; }
		
		//behavior=TransitionBehavior
		public Assignment getBehaviorAssignment_5_0_1_1() { return cBehaviorAssignment_5_0_1_1; }
		
		//TransitionBehavior
		public RuleCall getBehaviorTransitionBehaviorParserRuleCall_5_0_1_1_0() { return cBehaviorTransitionBehaviorParserRuleCall_5_0_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }
		
		//('-->' target=[fmlCommon::NamedElement|ESUfid] ';')?
		public Group getGroup_5_0_3() { return cGroup_5_0_3; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0_3_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_0_3_0; }
		
		//target=[fmlCommon::NamedElement|ESUfid]
		public Assignment getTargetAssignment_5_0_3_1() { return cTargetAssignment_5_0_3_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getTargetNamedElementCrossReference_5_0_3_1_0() { return cTargetNamedElementCrossReference_5_0_3_1_0; }
		
		//ESUfid
		public RuleCall getTargetNamedElementESUfidParserRuleCall_5_0_3_1_0_1() { return cTargetNamedElementESUfidParserRuleCall_5_0_3_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0_3_2() { return cSemicolonKeyword_5_0_3_2; }
		
		//'-->' target=[fmlCommon::NamedElement|ESUfid] ('{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard |
		//'@guard:')? (tguard=TransitionTimedGuard | '@tguard:')? '@effect:' effect=TransitionEffect? |
		//behavior=TransitionBehavior)? '}' | ';')
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5_1_0; }
		
		//target=[fmlCommon::NamedElement|ESUfid]
		public Assignment getTargetAssignment_5_1_1() { return cTargetAssignment_5_1_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getTargetNamedElementCrossReference_5_1_1_0() { return cTargetNamedElementCrossReference_5_1_1_0; }
		
		//ESUfid
		public RuleCall getTargetNamedElementESUfidParserRuleCall_5_1_1_0_1() { return cTargetNamedElementESUfidParserRuleCall_5_1_1_0_1; }
		
		//('{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)? '}' | ';')
		public Alternatives getAlternatives_5_1_2() { return cAlternatives_5_1_2; }
		
		//'{' (('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)? '}'
		public Group getGroup_5_1_2_0() { return cGroup_5_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_2_0_0() { return cLeftCurlyBracketKeyword_5_1_2_0_0; }
		
		//(('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect? | behavior=TransitionBehavior)?
		public Alternatives getAlternatives_5_1_2_0_1() { return cAlternatives_5_1_2_0_1; }
		
		//('@trigger:' trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard |
		//'@tguard:')? '@effect:' effect=TransitionEffect?
		public Group getGroup_5_1_2_0_1_0() { return cGroup_5_1_2_0_1_0; }
		
		//('@trigger:' trigger+=TransitionTrigger*)?
		public Group getGroup_5_1_2_0_1_0_0() { return cGroup_5_1_2_0_1_0_0; }
		
		//'@trigger:'
		public Keyword getTriggerKeyword_5_1_2_0_1_0_0_0() { return cTriggerKeyword_5_1_2_0_1_0_0_0; }
		
		//trigger+=TransitionTrigger*
		public Assignment getTriggerAssignment_5_1_2_0_1_0_0_1() { return cTriggerAssignment_5_1_2_0_1_0_0_1; }
		
		//TransitionTrigger
		public RuleCall getTriggerTransitionTriggerParserRuleCall_5_1_2_0_1_0_0_1_0() { return cTriggerTransitionTriggerParserRuleCall_5_1_2_0_1_0_0_1_0; }
		
		//(guard=TransitionGuard | '@guard:')?
		public Alternatives getAlternatives_5_1_2_0_1_0_1() { return cAlternatives_5_1_2_0_1_0_1; }
		
		//guard=TransitionGuard
		public Assignment getGuardAssignment_5_1_2_0_1_0_1_0() { return cGuardAssignment_5_1_2_0_1_0_1_0; }
		
		//TransitionGuard
		public RuleCall getGuardTransitionGuardParserRuleCall_5_1_2_0_1_0_1_0_0() { return cGuardTransitionGuardParserRuleCall_5_1_2_0_1_0_1_0_0; }
		
		//'@guard:'
		public Keyword getGuardKeyword_5_1_2_0_1_0_1_1() { return cGuardKeyword_5_1_2_0_1_0_1_1; }
		
		//(tguard=TransitionTimedGuard | '@tguard:')?
		public Alternatives getAlternatives_5_1_2_0_1_0_2() { return cAlternatives_5_1_2_0_1_0_2; }
		
		//tguard=TransitionTimedGuard
		public Assignment getTguardAssignment_5_1_2_0_1_0_2_0() { return cTguardAssignment_5_1_2_0_1_0_2_0; }
		
		//TransitionTimedGuard
		public RuleCall getTguardTransitionTimedGuardParserRuleCall_5_1_2_0_1_0_2_0_0() { return cTguardTransitionTimedGuardParserRuleCall_5_1_2_0_1_0_2_0_0; }
		
		//'@tguard:'
		public Keyword getTguardKeyword_5_1_2_0_1_0_2_1() { return cTguardKeyword_5_1_2_0_1_0_2_1; }
		
		//'@effect:'
		public Keyword getEffectKeyword_5_1_2_0_1_0_3() { return cEffectKeyword_5_1_2_0_1_0_3; }
		
		//effect=TransitionEffect?
		public Assignment getEffectAssignment_5_1_2_0_1_0_4() { return cEffectAssignment_5_1_2_0_1_0_4; }
		
		//TransitionEffect
		public RuleCall getEffectTransitionEffectParserRuleCall_5_1_2_0_1_0_4_0() { return cEffectTransitionEffectParserRuleCall_5_1_2_0_1_0_4_0; }
		
		//behavior=TransitionBehavior
		public Assignment getBehaviorAssignment_5_1_2_0_1_1() { return cBehaviorAssignment_5_1_2_0_1_1; }
		
		//TransitionBehavior
		public RuleCall getBehaviorTransitionBehaviorParserRuleCall_5_1_2_0_1_1_0() { return cBehaviorTransitionBehaviorParserRuleCall_5_1_2_0_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_2_0_2() { return cRightCurlyBracketKeyword_5_1_2_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1_2_1() { return cSemicolonKeyword_5_1_2_1; }
	}
	public class TransitionMoeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionMoe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cMocKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_0 = (Group)cAlternatives_1_0_1.eContents().get(0);
		private final Assignment cMocAssignment_1_0_1_0_0 = (Assignment)cGroup_1_0_1_0.eContents().get(0);
		private final RuleCall cMocTransitionMocEnumRuleCall_1_0_1_0_0_0 = (RuleCall)cMocAssignment_1_0_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1_0_1 = (Group)cGroup_1_0_1_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0_1_0_1_0 = (Keyword)cGroup_1_0_1_0_1.eContents().get(0);
		private final Assignment cIsElseAssignment_1_0_1_0_1_1 = (Assignment)cGroup_1_0_1_0_1.eContents().get(1);
		private final Keyword cIsElseElseKeyword_1_0_1_0_1_1_0 = (Keyword)cIsElseAssignment_1_0_1_0_1_1.eContents().get(0);
		private final Assignment cIsElseAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cIsElseElseKeyword_1_0_1_1_0 = (Keyword)cIsElseAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPriorKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cPriorAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cPriorEIntParserRuleCall_1_0_2_2_0 = (RuleCall)cPriorAssignment_1_0_2_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPriorKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPriorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPriorEIntParserRuleCall_1_1_1_0 = (RuleCall)cPriorAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TransitionMoe fmlStmchn::TransitionMoe:
		//	'<' ('moc:'? (moc=TransitionMoc ('&' isElse?='else')?
		//	| isElse?='else') (',' "prior:"? prior=EInt)?
		//	| "prior:"? prior=EInt)
		//	'>'
		@Override public ParserRule getRule() { return rule; }
		
		//'<' ('moc:'? (moc=TransitionMoc ('&' isElse?='else')? | isElse?='else') (',' "prior:"? prior=EInt)? | "prior:"?
		//prior=EInt) '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//('moc:'? (moc=TransitionMoc ('&' isElse?='else')? | isElse?='else') (',' "prior:"? prior=EInt)? | "prior:"? prior=EInt)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'moc:'? (moc=TransitionMoc ('&' isElse?='else')? | isElse?='else') (',' "prior:"? prior=EInt)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'moc:'?
		public Keyword getMocKeyword_1_0_0() { return cMocKeyword_1_0_0; }
		
		//(moc=TransitionMoc ('&' isElse?='else')? | isElse?='else')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//moc=TransitionMoc ('&' isElse?='else')?
		public Group getGroup_1_0_1_0() { return cGroup_1_0_1_0; }
		
		//moc=TransitionMoc
		public Assignment getMocAssignment_1_0_1_0_0() { return cMocAssignment_1_0_1_0_0; }
		
		//TransitionMoc
		public RuleCall getMocTransitionMocEnumRuleCall_1_0_1_0_0_0() { return cMocTransitionMocEnumRuleCall_1_0_1_0_0_0; }
		
		//('&' isElse?='else')?
		public Group getGroup_1_0_1_0_1() { return cGroup_1_0_1_0_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_1_0_1_0() { return cAmpersandKeyword_1_0_1_0_1_0; }
		
		//isElse?='else'
		public Assignment getIsElseAssignment_1_0_1_0_1_1() { return cIsElseAssignment_1_0_1_0_1_1; }
		
		//'else'
		public Keyword getIsElseElseKeyword_1_0_1_0_1_1_0() { return cIsElseElseKeyword_1_0_1_0_1_1_0; }
		
		//isElse?='else'
		public Assignment getIsElseAssignment_1_0_1_1() { return cIsElseAssignment_1_0_1_1; }
		
		//'else'
		public Keyword getIsElseElseKeyword_1_0_1_1_0() { return cIsElseElseKeyword_1_0_1_1_0; }
		
		//(',' "prior:"? prior=EInt)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }
		
		//"prior:"?
		public Keyword getPriorKeyword_1_0_2_1() { return cPriorKeyword_1_0_2_1; }
		
		//prior=EInt
		public Assignment getPriorAssignment_1_0_2_2() { return cPriorAssignment_1_0_2_2; }
		
		//EInt
		public RuleCall getPriorEIntParserRuleCall_1_0_2_2_0() { return cPriorEIntParserRuleCall_1_0_2_2_0; }
		
		//"prior:"? prior=EInt
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"prior:"?
		public Keyword getPriorKeyword_1_1_0() { return cPriorKeyword_1_1_0; }
		
		//prior=EInt
		public Assignment getPriorAssignment_1_1_1() { return cPriorAssignment_1_1_1; }
		
		//EInt
		public RuleCall getPriorEIntParserRuleCall_1_1_1_0() { return cPriorEIntParserRuleCall_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class TransitionBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpBlockStatementSchedulerParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//TransitionBehavior fmlStmnt::BlockStatement:
		//	{fmlStmnt::BlockStatement} op=BlockStatementScheduler?
		//	statement+=Statement*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmnt::BlockStatement} op=BlockStatementScheduler? statement+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{fmlStmnt::BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }
		
		//op=BlockStatementScheduler?
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//BlockStatementScheduler
		public RuleCall getOpBlockStatementSchedulerParserRuleCall_1_0() { return cOpBlockStatementSchedulerParserRuleCall_1_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class TransitionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionTrigger");
		private final RuleCall cInputComStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransitionTrigger fmlStmnt::InputComStatement:
		//	InputComStatement
		@Override public ParserRule getRule() { return rule; }
		
		//InputComStatement
		public RuleCall getInputComStatementParserRuleCall() { return cInputComStatementParserRuleCall; }
	}
	public class TransitionGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionGuard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGuardStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGuardKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionTransitionGuardExpressionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGuardKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cGuardStatementAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_1_0 = (Group)cAlternatives_1_1_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_1_0_0 = (Keyword)cGroup_1_1_0_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_1_1_0_1_0_1 = (Assignment)cGroup_1_1_0_1_0.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0_1_0_1_0 = (RuleCall)cConditionAssignment_1_1_0_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_1_0_2 = (Keyword)cGroup_1_1_0_1_0.eContents().get(2);
		private final Assignment cConditionAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0_1_1_0 = (RuleCall)cConditionAssignment_1_1_0_1_1.eContents().get(0);
		private final RuleCall cGuardStatementParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cEventGuardStatementParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cCheckSatGuardStatementParserRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		
		//TransitionGuard fmlStmnt::AbstractGuardStatement:
		//	{fmlStmnt::GuardStatement}
		//	'@guard<' condition=TransitionGuardExpression
		//	| '@guard:' ({fmlStmnt::GuardStatement} ('[' condition=Expression ']'
		//	| condition=Expression) | GuardStatement
		//	| EventGuardStatement
		//	| CheckSatGuardStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmnt::GuardStatement} '@guard<' condition=TransitionGuardExpression | '@guard:' ({fmlStmnt::GuardStatement} ('['
		//condition=Expression ']' | condition=Expression) | GuardStatement | EventGuardStatement | CheckSatGuardStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{fmlStmnt::GuardStatement} '@guard<' condition=TransitionGuardExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{fmlStmnt::GuardStatement}
		public Action getGuardStatementAction_0_0() { return cGuardStatementAction_0_0; }
		
		//'@guard<'
		public Keyword getGuardKeyword_0_1() { return cGuardKeyword_0_1; }
		
		//condition=TransitionGuardExpression
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }
		
		//TransitionGuardExpression
		public RuleCall getConditionTransitionGuardExpressionParserRuleCall_0_2_0() { return cConditionTransitionGuardExpressionParserRuleCall_0_2_0; }
		
		//'@guard:' ({fmlStmnt::GuardStatement} ('[' condition=Expression ']' | condition=Expression) | GuardStatement |
		//EventGuardStatement | CheckSatGuardStatement)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@guard:'
		public Keyword getGuardKeyword_1_0() { return cGuardKeyword_1_0; }
		
		//({fmlStmnt::GuardStatement} ('[' condition=Expression ']' | condition=Expression) | GuardStatement | EventGuardStatement
		//| CheckSatGuardStatement)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{fmlStmnt::GuardStatement} ('[' condition=Expression ']' | condition=Expression)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{fmlStmnt::GuardStatement}
		public Action getGuardStatementAction_1_1_0_0() { return cGuardStatementAction_1_1_0_0; }
		
		//('[' condition=Expression ']' | condition=Expression)
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }
		
		//'[' condition=Expression ']'
		public Group getGroup_1_1_0_1_0() { return cGroup_1_1_0_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0_1_0_0() { return cLeftSquareBracketKeyword_1_1_0_1_0_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1_0_1_0_1() { return cConditionAssignment_1_1_0_1_0_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0_1_0_1_0() { return cConditionExpressionParserRuleCall_1_1_0_1_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_0_1_0_2() { return cRightSquareBracketKeyword_1_1_0_1_0_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1_0_1_1() { return cConditionAssignment_1_1_0_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0_1_1_0; }
		
		//GuardStatement
		public RuleCall getGuardStatementParserRuleCall_1_1_1() { return cGuardStatementParserRuleCall_1_1_1; }
		
		//EventGuardStatement
		public RuleCall getEventGuardStatementParserRuleCall_1_1_2() { return cEventGuardStatementParserRuleCall_1_1_2; }
		
		//CheckSatGuardStatement
		public RuleCall getCheckSatGuardStatementParserRuleCall_1_1_3() { return cCheckSatGuardStatementParserRuleCall_1_1_3; }
	}
	public class TransitionGuardExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionGuardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalAssociativeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Keyword cOperatorOrKeyword_1_0_3 = (Keyword)cOperatorAlternatives_1_0.eContents().get(3);
		private final Keyword cGreaterThanSignColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandBitwiseOrExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		
		//TransitionGuardExpression fmlExpr::Expression:
		//	{fmlExpr::LogicalAssociativeExpression} operator=('&&' | 'and' | '||' | 'or') '>:'
		//	operand+=BitwiseOrExpression+
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LogicalAssociativeExpression} operator=('&&' | 'and' | '||' | 'or') '>:' operand+=BitwiseOrExpression+
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LogicalAssociativeExpression}
		public Action getLogicalAssociativeExpressionAction_0() { return cLogicalAssociativeExpressionAction_0; }
		
		//operator=('&&' | 'and' | '||' | 'or')
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//('&&' | 'and' | '||' | 'or')
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_0_0() { return cOperatorAmpersandAmpersandKeyword_1_0_0; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_0_1() { return cOperatorAndKeyword_1_0_1; }
		
		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_0_2() { return cOperatorVerticalLineVerticalLineKeyword_1_0_2; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_0_3() { return cOperatorOrKeyword_1_0_3; }
		
		//'>:'
		public Keyword getGreaterThanSignColonKeyword_2() { return cGreaterThanSignColonKeyword_2; }
		
		//operand+=BitwiseOrExpression+
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }
		
		//BitwiseOrExpression
		public RuleCall getOperandBitwiseOrExpressionParserRuleCall_3_0() { return cOperandBitwiseOrExpressionParserRuleCall_3_0; }
	}
	public class TransitionTimedGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionTimedGuard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTimedGuardStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTguardKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionTransitionGuardExpressionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTguardKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cTimedGuardStatementAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_1_0 = (Group)cAlternatives_1_1_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0_1_0_0 = (Keyword)cGroup_1_1_0_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_1_1_0_1_0_1 = (Assignment)cGroup_1_1_0_1_0.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0_1_0_1_0 = (RuleCall)cConditionAssignment_1_1_0_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_0_1_0_2 = (Keyword)cGroup_1_1_0_1_0.eContents().get(2);
		private final Assignment cConditionAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0_1_1_0 = (RuleCall)cConditionAssignment_1_1_0_1_1.eContents().get(0);
		private final RuleCall cTimedGuardStatementParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//TransitionTimedGuard fmlStmnt::TimedGuardStatement:
		//	{fmlStmnt::TimedGuardStatement}
		//	'@tguard<' condition=TransitionGuardExpression
		//	| '@tguard:' ({fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}'
		//	| condition=Expression) | TimedGuardStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmnt::TimedGuardStatement} '@tguard<' condition=TransitionGuardExpression | '@tguard:'
		//({fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}' | condition=Expression) | TimedGuardStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{fmlStmnt::TimedGuardStatement} '@tguard<' condition=TransitionGuardExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{fmlStmnt::TimedGuardStatement}
		public Action getTimedGuardStatementAction_0_0() { return cTimedGuardStatementAction_0_0; }
		
		//'@tguard<'
		public Keyword getTguardKeyword_0_1() { return cTguardKeyword_0_1; }
		
		//condition=TransitionGuardExpression
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }
		
		//TransitionGuardExpression
		public RuleCall getConditionTransitionGuardExpressionParserRuleCall_0_2_0() { return cConditionTransitionGuardExpressionParserRuleCall_0_2_0; }
		
		//'@tguard:' ({fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}' | condition=Expression) | TimedGuardStatement)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@tguard:'
		public Keyword getTguardKeyword_1_0() { return cTguardKeyword_1_0; }
		
		//({fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}' | condition=Expression) | TimedGuardStatement)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}' | condition=Expression)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{fmlStmnt::TimedGuardStatement}
		public Action getTimedGuardStatementAction_1_1_0_0() { return cTimedGuardStatementAction_1_1_0_0; }
		
		//('{' condition=Expression '}' | condition=Expression)
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }
		
		//'{' condition=Expression '}'
		public Group getGroup_1_1_0_1_0() { return cGroup_1_1_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0_1_0_0() { return cLeftCurlyBracketKeyword_1_1_0_1_0_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1_0_1_0_1() { return cConditionAssignment_1_1_0_1_0_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0_1_0_1_0() { return cConditionExpressionParserRuleCall_1_1_0_1_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_0_1_0_2() { return cRightCurlyBracketKeyword_1_1_0_1_0_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1_0_1_1() { return cConditionAssignment_1_1_0_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0_1_1_0; }
		
		//TimedGuardStatement
		public RuleCall getTimedGuardStatementParserRuleCall_1_1_1() { return cTimedGuardStatementParserRuleCall_1_1_1; }
	}
	public class TransitionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTransitionEffectStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBlockStatementStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementTransitionEffectStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		
		//TransitionEffect fmlStmnt::Statement:
		//	TransitionEffectStatement ({fmlStmnt::BlockStatement.statement+=current} statement+=TransitionEffectStatement)*
		@Override public ParserRule getRule() { return rule; }
		
		//TransitionEffectStatement ({fmlStmnt::BlockStatement.statement+=current} statement+=TransitionEffectStatement)*
		public Group getGroup() { return cGroup; }
		
		//TransitionEffectStatement
		public RuleCall getTransitionEffectStatementParserRuleCall_0() { return cTransitionEffectStatementParserRuleCall_0; }
		
		//({fmlStmnt::BlockStatement.statement+=current} statement+=TransitionEffectStatement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlStmnt::BlockStatement.statement+=current}
		public Action getBlockStatementStatementAction_1_0() { return cBlockStatementStatementAction_1_0; }
		
		//statement+=TransitionEffectStatement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//TransitionEffectStatement
		public RuleCall getStatementTransitionEffectStatementParserRuleCall_1_1_0() { return cStatementTransitionEffectStatementParserRuleCall_1_1_0; }
	}
	public class TransitionEffectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionEffectStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputComStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileDoStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForEachStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterruptStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cActivityStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInvokeStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//TransitionEffectStatement fmlStmnt::Statement:
		//	ExpressionStatement
		//	| OutputComStatement
		//	| IfStatement
		//	| WhileDoStatement
		//	| DoWhileStatement
		//	| ForStatement
		//	| ForEachStatement
		//	| InterruptStatement
		//	| ActivityStatement
		//	| InvokeStatement
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionStatement | OutputComStatement | IfStatement | WhileDoStatement | DoWhileStatement | ForStatement |
		//ForEachStatement | InterruptStatement | ActivityStatement | InvokeStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }
		
		//OutputComStatement
		public RuleCall getOutputComStatementParserRuleCall_1() { return cOutputComStatementParserRuleCall_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//WhileDoStatement
		public RuleCall getWhileDoStatementParserRuleCall_3() { return cWhileDoStatementParserRuleCall_3; }
		
		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_4() { return cDoWhileStatementParserRuleCall_4; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_5() { return cForStatementParserRuleCall_5; }
		
		//ForEachStatement
		public RuleCall getForEachStatementParserRuleCall_6() { return cForEachStatementParserRuleCall_6; }
		
		//InterruptStatement
		public RuleCall getInterruptStatementParserRuleCall_7() { return cInterruptStatementParserRuleCall_7; }
		
		//ActivityStatement
		public RuleCall getActivityStatementParserRuleCall_8() { return cActivityStatementParserRuleCall_8; }
		
		//InvokeStatement
		public RuleCall getInvokeStatementParserRuleCall_9() { return cInvokeStatementParserRuleCall_9; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuardStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimedGuardStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEventGuardStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCheckSatGuardStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInputComStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOutputComStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWhileDoStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDoWhileStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cForStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cForEachStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cInterruptStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cActivityStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cInvokeStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Statement Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Statement fmlStmnt::Statement:
		//	BlockStatement
		//	| ExpressionStatement
		//	| GuardStatement
		//	| TimedGuardStatement
		//	| EventGuardStatement
		//	| CheckSatGuardStatement
		//	| InputComStatement
		//	| OutputComStatement
		//	| IfStatement
		//	| WhileDoStatement
		//	| DoWhileStatement
		//	| ForStatement
		//	| ForEachStatement
		//	| InterruptStatement
		//	| ActivityStatement
		//	| InvokeStatement
		@Override public ParserRule getRule() { return rule; }
		
		//BlockStatement | ExpressionStatement | GuardStatement | TimedGuardStatement | EventGuardStatement |
		//CheckSatGuardStatement | InputComStatement | OutputComStatement | IfStatement | WhileDoStatement | DoWhileStatement |
		//ForStatement | ForEachStatement | InterruptStatement | ActivityStatement | InvokeStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_0() { return cBlockStatementParserRuleCall_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_1() { return cExpressionStatementParserRuleCall_1; }
		
		//GuardStatement
		public RuleCall getGuardStatementParserRuleCall_2() { return cGuardStatementParserRuleCall_2; }
		
		//TimedGuardStatement
		public RuleCall getTimedGuardStatementParserRuleCall_3() { return cTimedGuardStatementParserRuleCall_3; }
		
		//EventGuardStatement
		public RuleCall getEventGuardStatementParserRuleCall_4() { return cEventGuardStatementParserRuleCall_4; }
		
		//CheckSatGuardStatement
		public RuleCall getCheckSatGuardStatementParserRuleCall_5() { return cCheckSatGuardStatementParserRuleCall_5; }
		
		//InputComStatement
		public RuleCall getInputComStatementParserRuleCall_6() { return cInputComStatementParserRuleCall_6; }
		
		//OutputComStatement
		public RuleCall getOutputComStatementParserRuleCall_7() { return cOutputComStatementParserRuleCall_7; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_8() { return cIfStatementParserRuleCall_8; }
		
		//WhileDoStatement
		public RuleCall getWhileDoStatementParserRuleCall_9() { return cWhileDoStatementParserRuleCall_9; }
		
		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_10() { return cDoWhileStatementParserRuleCall_10; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_11() { return cForStatementParserRuleCall_11; }
		
		//ForEachStatement
		public RuleCall getForEachStatementParserRuleCall_12() { return cForEachStatementParserRuleCall_12; }
		
		//InterruptStatement
		public RuleCall getInterruptStatementParserRuleCall_13() { return cInterruptStatementParserRuleCall_13; }
		
		//ActivityStatement
		public RuleCall getActivityStatementParserRuleCall_14() { return cActivityStatementParserRuleCall_14; }
		
		//InvokeStatement
		public RuleCall getInvokeStatementParserRuleCall_15() { return cInvokeStatementParserRuleCall_15; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBlockStatementSchedulerParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BlockStatement fmlStmnt::BlockStatement:
		//	{fmlStmnt::BlockStatement}
		//	'{'
		//	op=BlockStatementScheduler?
		//	statement+=Statement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmnt::BlockStatement} '{' op=BlockStatementScheduler? statement+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlStmnt::BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//op=BlockStatementScheduler?
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BlockStatementScheduler
		public RuleCall getOpBlockStatementSchedulerParserRuleCall_2_0() { return cOpBlockStatementSchedulerParserRuleCall_2_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BlockStatementSchedulerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BlockStatementScheduler");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineSemicolonVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineSectionSignVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineSemicolonSemicolonVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineFullStopVerticalLineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVerticalLineSolidusSemicolonVerticalLineKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineCommaVerticalLineKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAndKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOrKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAndThenKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrElseKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cIndetKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cVerticalLineSolidusReverseSolidusVerticalLineKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cForkKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cJoinKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//BlockStatementScheduler:
		//	'|;|' | '|§|' | '|;;|' | '|.|' | '|/;|'
		//	| '|i|' | '|,|' | '|a|'
		//	| '|and|' | '|or|'
		//	| '|and#then|' | '|or#else|'
		//	| '|indet|' | '|/\\|'
		//	| '|fork|' | '|join|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|;|' | '|§|' | '|;;|' | '|.|' | '|/;|' | '|i|' | '|,|' | '|a|' | '|and|' | '|or|' | '|and#then|' | '|or#else|' |
		//'|indet|' | '|/\\|' | '|fork|' | '|join|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|;|'
		public Keyword getVerticalLineSemicolonVerticalLineKeyword_0() { return cVerticalLineSemicolonVerticalLineKeyword_0; }
		
		//'|§|'
		public Keyword getVerticalLineSectionSignVerticalLineKeyword_1() { return cVerticalLineSectionSignVerticalLineKeyword_1; }
		
		//'|;;|'
		public Keyword getVerticalLineSemicolonSemicolonVerticalLineKeyword_2() { return cVerticalLineSemicolonSemicolonVerticalLineKeyword_2; }
		
		//'|.|'
		public Keyword getVerticalLineFullStopVerticalLineKeyword_3() { return cVerticalLineFullStopVerticalLineKeyword_3; }
		
		//'|/;|'
		public Keyword getVerticalLineSolidusSemicolonVerticalLineKeyword_4() { return cVerticalLineSolidusSemicolonVerticalLineKeyword_4; }
		
		//'|i|'
		public Keyword getIKeyword_5() { return cIKeyword_5; }
		
		//'|,|'
		public Keyword getVerticalLineCommaVerticalLineKeyword_6() { return cVerticalLineCommaVerticalLineKeyword_6; }
		
		//'|a|'
		public Keyword getAKeyword_7() { return cAKeyword_7; }
		
		//'|and|'
		public Keyword getAndKeyword_8() { return cAndKeyword_8; }
		
		//'|or|'
		public Keyword getOrKeyword_9() { return cOrKeyword_9; }
		
		//'|and#then|'
		public Keyword getAndThenKeyword_10() { return cAndThenKeyword_10; }
		
		//'|or#else|'
		public Keyword getOrElseKeyword_11() { return cOrElseKeyword_11; }
		
		//'|indet|'
		public Keyword getIndetKeyword_12() { return cIndetKeyword_12; }
		
		//'|/\\|'
		public Keyword getVerticalLineSolidusReverseSolidusVerticalLineKeyword_13() { return cVerticalLineSolidusReverseSolidusVerticalLineKeyword_13; }
		
		//'|fork|'
		public Keyword getForkKeyword_14() { return cForkKeyword_14; }
		
		//'|join|'
		public Keyword getJoinKeyword_15() { return cJoinKeyword_15; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ExpressionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionAssignmentExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionNewfreshExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionIncrementOrDecrementPrefixExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cExpressionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionIncrementOrDecrementPostfixExpressionParserRuleCall_3_0_0 = (RuleCall)cExpressionAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		///////////////////////////////////////////
		//// Assignment Rules as Expression Statement
		//// lv = rv
		//// newfresh lv
		//// ++lv --lv
		//// lv++  lv--
		///////////////////////////////////////////
		//ExpressionStatement fmlStmnt::ExpressionStatement:
		//	expression=AssignmentExpression ';'
		//	| expression=NewfreshExpression ';'
		//	| expression=IncrementOrDecrementPrefixExpression ';'
		//	| expression=IncrementOrDecrementPostfixExpression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//expression=AssignmentExpression ';' | expression=NewfreshExpression ';' |
		//expression=IncrementOrDecrementPrefixExpression ';' | expression=IncrementOrDecrementPostfixExpression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression=AssignmentExpression ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//expression=AssignmentExpression
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }
		
		//AssignmentExpression
		public RuleCall getExpressionAssignmentExpressionParserRuleCall_0_0_0() { return cExpressionAssignmentExpressionParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//expression=NewfreshExpression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//expression=NewfreshExpression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//NewfreshExpression
		public RuleCall getExpressionNewfreshExpressionParserRuleCall_1_0_0() { return cExpressionNewfreshExpressionParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//expression=IncrementOrDecrementPrefixExpression ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//expression=IncrementOrDecrementPrefixExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//IncrementOrDecrementPrefixExpression
		public RuleCall getExpressionIncrementOrDecrementPrefixExpressionParserRuleCall_2_0_0() { return cExpressionIncrementOrDecrementPrefixExpressionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//expression=IncrementOrDecrementPostfixExpression ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//expression=IncrementOrDecrementPostfixExpression
		public Assignment getExpressionAssignment_3_0() { return cExpressionAssignment_3_0; }
		
		//IncrementOrDecrementPostfixExpression
		public RuleCall getExpressionIncrementOrDecrementPostfixExpressionParserRuleCall_3_0_0() { return cExpressionIncrementOrDecrementPostfixExpressionParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class GuardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.GuardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/////////////////////////////////////////////
		////// Guard Rules
		/////////////////////////////////////////////
		//GuardStatement fmlStmnt::GuardStatement:
		//	'guard' condition=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'guard' condition=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'guard'
		public Keyword getGuardKeyword_0() { return cGuardKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TimedGuardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TimedGuardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTguardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TimedGuardStatement fmlStmnt::TimedGuardStatement:
		//	'tguard' condition=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'tguard' condition=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'tguard'
		public Keyword getTguardKeyword_0() { return cTguardKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EventGuardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EventGuardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EventGuardStatement fmlStmnt::EventGuardStatement:
		//	'event' condition=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'event' condition=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CheckSatGuardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CheckSatGuardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChecksatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSolverAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSolverESIdentifierParserRuleCall_2_0 = (RuleCall)cSolverAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CheckSatGuardStatement fmlStmnt::CheckSatGuardStatement:
		//	'checksat' '<' solver=ESIdentifier '>' condition=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'checksat' '<' solver=ESIdentifier '>' condition=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'checksat'
		public Keyword getChecksatKeyword_0() { return cChecksatKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//solver=ESIdentifier
		public Assignment getSolverAssignment_2() { return cSolverAssignment_2; }
		
		//ESIdentifier
		public RuleCall getSolverESIdentifierParserRuleCall_2_0() { return cSolverESIdentifierParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class InputComStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InputComStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortNamedElementCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortNamedElementESUfidParserRuleCall_1_0_1 = (RuleCall)cPortNamedElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLeftValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftValueExpressionParserRuleCall_2_1_0 = (RuleCall)cLeftValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cLeftValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cLeftValueExpressionParserRuleCall_2_2_1_0 = (RuleCall)cLeftValueAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTargetAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTargetExpressionAsMachineParserRuleCall_3_0_1_0 = (RuleCall)cTargetAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignEqualsSignKeyword_3_1_0_0 = (Keyword)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cViaKeyword_3_1_0_1 = (Keyword)cAlternatives_3_1_0.eContents().get(1);
		private final Assignment cRouteAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cRouteChannelCrossReference_3_1_1_0 = (CrossReference)cRouteAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRouteChannelESUfidParserRuleCall_3_1_1_0_1 = (RuleCall)cRouteChannelCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/////////////////////////////////////////////
		////
		////// Communication Rules
		/////////////////////////////////////////////
		//InputComStatement fmlStmnt::InputComStatement:
		//	'input' port=[fmlCommon::NamedElement|ESUfid] ('(' leftValue+=Expression (',' leftValue+=Expression)* ')')? (('<--'
		//	target=ExpressionAsMachine)?
		//	& (('<==' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'input' port=[fmlCommon::NamedElement|ESUfid] ('(' leftValue+=Expression (',' leftValue+=Expression)* ')')? (('<--'
		//target=ExpressionAsMachine)? & (('<==' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//port=[fmlCommon::NamedElement|ESUfid]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getPortNamedElementCrossReference_1_0() { return cPortNamedElementCrossReference_1_0; }
		
		//ESUfid
		public RuleCall getPortNamedElementESUfidParserRuleCall_1_0_1() { return cPortNamedElementESUfidParserRuleCall_1_0_1; }
		
		//('(' leftValue+=Expression (',' leftValue+=Expression)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//leftValue+=Expression
		public Assignment getLeftValueAssignment_2_1() { return cLeftValueAssignment_2_1; }
		
		//Expression
		public RuleCall getLeftValueExpressionParserRuleCall_2_1_0() { return cLeftValueExpressionParserRuleCall_2_1_0; }
		
		//(',' leftValue+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//leftValue+=Expression
		public Assignment getLeftValueAssignment_2_2_1() { return cLeftValueAssignment_2_2_1; }
		
		//Expression
		public RuleCall getLeftValueExpressionParserRuleCall_2_2_1_0() { return cLeftValueExpressionParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//(('<--' target=ExpressionAsMachine)? & (('<==' | 'via') route=[fmlInfra::Channel|ESUfid])?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('<--' target=ExpressionAsMachine)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_3_0_0() { return cLessThanSignHyphenMinusHyphenMinusKeyword_3_0_0; }
		
		//target=ExpressionAsMachine
		public Assignment getTargetAssignment_3_0_1() { return cTargetAssignment_3_0_1; }
		
		//ExpressionAsMachine
		public RuleCall getTargetExpressionAsMachineParserRuleCall_3_0_1_0() { return cTargetExpressionAsMachineParserRuleCall_3_0_1_0; }
		
		//(('<==' | 'via') route=[fmlInfra::Channel|ESUfid])?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//('<==' | 'via')
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }
		
		//'<=='
		public Keyword getLessThanSignEqualsSignEqualsSignKeyword_3_1_0_0() { return cLessThanSignEqualsSignEqualsSignKeyword_3_1_0_0; }
		
		//'via'
		public Keyword getViaKeyword_3_1_0_1() { return cViaKeyword_3_1_0_1; }
		
		//route=[fmlInfra::Channel|ESUfid]
		public Assignment getRouteAssignment_3_1_1() { return cRouteAssignment_3_1_1; }
		
		//[fmlInfra::Channel|ESUfid]
		public CrossReference getRouteChannelCrossReference_3_1_1_0() { return cRouteChannelCrossReference_3_1_1_0; }
		
		//ESUfid
		public RuleCall getRouteChannelESUfidParserRuleCall_3_1_1_0_1() { return cRouteChannelESUfidParserRuleCall_3_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OutputComStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OutputComStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortNamedElementCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortNamedElementESUfidParserRuleCall_1_0_1 = (RuleCall)cPortNamedElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRigthValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRigthValueExpressionParserRuleCall_2_1_0 = (RuleCall)cRigthValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRigthValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cRigthValueExpressionParserRuleCall_2_2_1_0 = (RuleCall)cRigthValueAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTargetAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTargetExpressionAsMachineParserRuleCall_3_0_1_0 = (RuleCall)cTargetAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_3_1_0_0 = (Keyword)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cViaKeyword_3_1_0_1 = (Keyword)cAlternatives_3_1_0.eContents().get(1);
		private final Assignment cRouteAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cRouteChannelCrossReference_3_1_1_0 = (CrossReference)cRouteAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRouteChannelESUfidParserRuleCall_3_1_1_0_1 = (RuleCall)cRouteChannelCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputComStatement fmlStmnt::OutputComStatement:
		//	'output' port=[fmlCommon::NamedElement|ESUfid] ('(' rigthValue+=Expression (',' rigthValue+=Expression)* ')')? (('-->'
		//	target=ExpressionAsMachine)?
		//	& (('==>' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'output' port=[fmlCommon::NamedElement|ESUfid] ('(' rigthValue+=Expression (',' rigthValue+=Expression)* ')')? (('-->'
		//target=ExpressionAsMachine)? & (('==>' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//port=[fmlCommon::NamedElement|ESUfid]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getPortNamedElementCrossReference_1_0() { return cPortNamedElementCrossReference_1_0; }
		
		//ESUfid
		public RuleCall getPortNamedElementESUfidParserRuleCall_1_0_1() { return cPortNamedElementESUfidParserRuleCall_1_0_1; }
		
		//('(' rigthValue+=Expression (',' rigthValue+=Expression)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//rigthValue+=Expression
		public Assignment getRigthValueAssignment_2_1() { return cRigthValueAssignment_2_1; }
		
		//Expression
		public RuleCall getRigthValueExpressionParserRuleCall_2_1_0() { return cRigthValueExpressionParserRuleCall_2_1_0; }
		
		//(',' rigthValue+=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//rigthValue+=Expression
		public Assignment getRigthValueAssignment_2_2_1() { return cRigthValueAssignment_2_2_1; }
		
		//Expression
		public RuleCall getRigthValueExpressionParserRuleCall_2_2_1_0() { return cRigthValueExpressionParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//(('-->' target=ExpressionAsMachine)? & (('==>' | 'via') route=[fmlInfra::Channel|ESUfid])?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('-->' target=ExpressionAsMachine)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3_0_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_0_0; }
		
		//target=ExpressionAsMachine
		public Assignment getTargetAssignment_3_0_1() { return cTargetAssignment_3_0_1; }
		
		//ExpressionAsMachine
		public RuleCall getTargetExpressionAsMachineParserRuleCall_3_0_1_0() { return cTargetExpressionAsMachineParserRuleCall_3_0_1_0; }
		
		//(('==>' | 'via') route=[fmlInfra::Channel|ESUfid])?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//('==>' | 'via')
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_3_1_0_0() { return cEqualsSignEqualsSignGreaterThanSignKeyword_3_1_0_0; }
		
		//'via'
		public Keyword getViaKeyword_3_1_0_1() { return cViaKeyword_3_1_0_1; }
		
		//route=[fmlInfra::Channel|ESUfid]
		public Assignment getRouteAssignment_3_1_1() { return cRouteAssignment_3_1_1; }
		
		//[fmlInfra::Channel|ESUfid]
		public CrossReference getRouteChannelCrossReference_3_1_1_0() { return cRouteChannelCrossReference_3_1_1_0; }
		
		//ESUfid
		public RuleCall getRouteChannelESUfidParserRuleCall_3_1_1_0_1() { return cRouteChannelESUfidParserRuleCall_3_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ExpressionAsMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ExpressionAsMachine");
		private final Assignment cMachineAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMachineValuePureNamedMachineExpressionParserRuleCall_0 = (RuleCall)cMachineAssignment.eContents().get(0);
		
		//ExpressionAsMachine fmlExpr::ExpressionAsMachine:
		//	machine=ValuePureNamedMachineExpression
		@Override public ParserRule getRule() { return rule; }
		
		//machine=ValuePureNamedMachineExpression
		public Assignment getMachineAssignment() { return cMachineAssignment; }
		
		//ValuePureNamedMachineExpression
		public RuleCall getMachineValuePureNamedMachineExpressionParserRuleCall_0() { return cMachineValuePureNamedMachineExpressionParserRuleCall_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		private final Assignment cElseifStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseifStatementElseIfStatementParserRuleCall_3_0 = (RuleCall)cElseifStatementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseBlockAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseBlockBlockStatementParserRuleCall_4_1_0 = (RuleCall)cElseBlockAssignment_4_1.eContents().get(0);
		
		/////////////////////////////////////////////
		////// If - Conditional Rules
		/////////////////////////////////////////////
		//IfStatement fmlStmnt::IfStatement:
		//	'if' condition=Expression
		//	bodyBlock=BlockStatement
		//	elseifStatement+=ElseIfStatement* ('else' elseBlock=BlockStatement)?
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression bodyBlock=BlockStatement elseifStatement+=ElseIfStatement* ('else' elseBlock=BlockStatement)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
		
		//elseifStatement+=ElseIfStatement*
		public Assignment getElseifStatementAssignment_3() { return cElseifStatementAssignment_3; }
		
		//ElseIfStatement
		public RuleCall getElseifStatementElseIfStatementParserRuleCall_3_0() { return cElseifStatementElseIfStatementParserRuleCall_3_0; }
		
		//('else' elseBlock=BlockStatement)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseBlock=BlockStatement
		public Assignment getElseBlockAssignment_4_1() { return cElseBlockAssignment_4_1; }
		
		//BlockStatement
		public RuleCall getElseBlockBlockStatementParserRuleCall_4_1_0() { return cElseBlockBlockStatementParserRuleCall_4_1_0; }
	}
	public class ElseIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ElseIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cElseifKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cElseKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cIfKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		//ElseIfStatement fmlStmnt::ConditionalBlockStatement:
		//	('elseif' | 'else' 'if') condition=Expression
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//('elseif' | 'else' 'if') condition=Expression bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//('elseif' | 'else' 'if')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'elseif'
		public Keyword getElseifKeyword_0_0() { return cElseifKeyword_0_0; }
		
		//'else' 'if'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'else'
		public Keyword getElseKeyword_0_1_0() { return cElseKeyword_0_1_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1_1() { return cIfKeyword_0_1_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class WhileDoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.WhileDoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cBodyBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyBlockAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////
		//// Loop - Iteration Rules
		///////////////////////////////////////////
		//WhileDoStatement fmlStmnt::WhileDoStatement:
		//	'while' condition=Expression bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Expression bodyBlock=BlockStatement
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_2() { return cBodyBlockAssignment_2; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_2_0() { return cBodyBlockBlockStatementParserRuleCall_2_0; }
	}
	public class DoWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_1_0 = (RuleCall)cBodyBlockAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DoWhileStatement fmlStmnt::DoWhileStatement:
		//	'do' bodyBlock=BlockStatement 'while' condition=Expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'do' bodyBlock=BlockStatement 'while' condition=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_1() { return cBodyBlockAssignment_1; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_1_0() { return cBodyBlockBlockStatementParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ForStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInitAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitForAssignmentExpressionParserRuleCall_0_1_0 = (RuleCall)cInitAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConditionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_0_3_0 = (RuleCall)cConditionAssignment_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cIterateAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cIterateForAssignmentExpressionParserRuleCall_0_5_0 = (RuleCall)cIterateAssignment_0_5.eContents().get(0);
		private final Assignment cBodyBlockAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_0_6_0 = (RuleCall)cBodyBlockAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInitAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInitForAssignmentExpressionParserRuleCall_1_2_0 = (RuleCall)cInitAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cConditionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_1_4_0 = (RuleCall)cConditionAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cIterateAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cIterateForAssignmentExpressionParserRuleCall_1_6_0 = (RuleCall)cIterateAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cBodyBlockAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_1_8_0 = (RuleCall)cBodyBlockAssignment_1_8.eContents().get(0);
		
		//ForStatement fmlStmnt::ForStatement:
		//	'for' init=ForAssignmentExpression? ';'
		//	condition=Expression ';' iterate=ForAssignmentExpression?
		//	bodyBlock=BlockStatement
		//	| 'for' '(' init=ForAssignmentExpression? ';'
		//	condition=Expression ';' iterate=ForAssignmentExpression? ')'
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//'for' init=ForAssignmentExpression? ';' condition=Expression ';' iterate=ForAssignmentExpression?
		//bodyBlock=BlockStatement | 'for' '(' init=ForAssignmentExpression? ';' condition=Expression ';'
		//iterate=ForAssignmentExpression? ')' bodyBlock=BlockStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'for' init=ForAssignmentExpression? ';' condition=Expression ';' iterate=ForAssignmentExpression?
		//bodyBlock=BlockStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//'for'
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }
		
		//init=ForAssignmentExpression?
		public Assignment getInitAssignment_0_1() { return cInitAssignment_0_1; }
		
		//ForAssignmentExpression
		public RuleCall getInitForAssignmentExpressionParserRuleCall_0_1_0() { return cInitForAssignmentExpressionParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_0_3() { return cConditionAssignment_0_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_3_0() { return cConditionExpressionParserRuleCall_0_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }
		
		//iterate=ForAssignmentExpression?
		public Assignment getIterateAssignment_0_5() { return cIterateAssignment_0_5; }
		
		//ForAssignmentExpression
		public RuleCall getIterateForAssignmentExpressionParserRuleCall_0_5_0() { return cIterateForAssignmentExpressionParserRuleCall_0_5_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_0_6() { return cBodyBlockAssignment_0_6; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_0_6_0() { return cBodyBlockBlockStatementParserRuleCall_0_6_0; }
		
		//'for' '(' init=ForAssignmentExpression? ';' condition=Expression ';' iterate=ForAssignmentExpression? ')'
		//bodyBlock=BlockStatement
		public Group getGroup_1() { return cGroup_1; }
		
		//'for'
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//init=ForAssignmentExpression?
		public Assignment getInitAssignment_1_2() { return cInitAssignment_1_2; }
		
		//ForAssignmentExpression
		public RuleCall getInitForAssignmentExpressionParserRuleCall_1_2_0() { return cInitForAssignmentExpressionParserRuleCall_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_4() { return cConditionAssignment_1_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_4_0() { return cConditionExpressionParserRuleCall_1_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
		
		//iterate=ForAssignmentExpression?
		public Assignment getIterateAssignment_1_6() { return cIterateAssignment_1_6; }
		
		//ForAssignmentExpression
		public RuleCall getIterateForAssignmentExpressionParserRuleCall_1_6_0() { return cIterateForAssignmentExpressionParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_1_8() { return cBodyBlockAssignment_1_8; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_1_8_0() { return cBodyBlockBlockStatementParserRuleCall_1_8_0; }
	}
	public class ForAssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ForAssignmentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncrementOrDecrementPrefixExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncrementOrDecrementPostfixExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ForAssignmentExpression fmlExpr::Expression:
		//	AssignmentExpression
		//	| IncrementOrDecrementPrefixExpression
		//	| IncrementOrDecrementPostfixExpression
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression | IncrementOrDecrementPrefixExpression | IncrementOrDecrementPostfixExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }
		
		//IncrementOrDecrementPrefixExpression
		public RuleCall getIncrementOrDecrementPrefixExpressionParserRuleCall_1() { return cIncrementOrDecrementPrefixExpressionParserRuleCall_1; }
		
		//IncrementOrDecrementPostfixExpression
		public RuleCall getIncrementOrDecrementPostfixExpressionParserRuleCall_2() { return cIncrementOrDecrementPostfixExpressionParserRuleCall_2; }
	}
	public class ForEachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ForEachStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIteratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIteratorLeftHandSideExpressionParserRuleCall_0_1_0 = (RuleCall)cIteratorAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEnumerationAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEnumerationExpressionParserRuleCall_0_3_0 = (RuleCall)cEnumerationAssignment_0_3.eContents().get(0);
		private final Assignment cBodyBlockAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_0_4_0 = (RuleCall)cBodyBlockAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIteratorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIteratorLeftHandSideExpressionParserRuleCall_1_2_0 = (RuleCall)cIteratorAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cEnumerationAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cEnumerationExpressionParserRuleCall_1_4_0 = (RuleCall)cEnumerationAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cBodyBlockAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBodyBlockBlockStatementParserRuleCall_1_6_0 = (RuleCall)cBodyBlockAssignment_1_6.eContents().get(0);
		
		//ForEachStatement fmlStmnt::ForEachStatement:
		//	'for' iterator=LeftHandSideExpression ':' enumeration=Expression
		//	bodyBlock=BlockStatement
		//	| 'for' '(' iterator=LeftHandSideExpression ':' enumeration=Expression ')'
		//	bodyBlock=BlockStatement
		@Override public ParserRule getRule() { return rule; }
		
		//'for' iterator=LeftHandSideExpression ':' enumeration=Expression bodyBlock=BlockStatement | 'for' '('
		//iterator=LeftHandSideExpression ':' enumeration=Expression ')' bodyBlock=BlockStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'for' iterator=LeftHandSideExpression ':' enumeration=Expression bodyBlock=BlockStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//'for'
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }
		
		//iterator=LeftHandSideExpression
		public Assignment getIteratorAssignment_0_1() { return cIteratorAssignment_0_1; }
		
		//LeftHandSideExpression
		public RuleCall getIteratorLeftHandSideExpressionParserRuleCall_0_1_0() { return cIteratorLeftHandSideExpressionParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//enumeration=Expression
		public Assignment getEnumerationAssignment_0_3() { return cEnumerationAssignment_0_3; }
		
		//Expression
		public RuleCall getEnumerationExpressionParserRuleCall_0_3_0() { return cEnumerationExpressionParserRuleCall_0_3_0; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_0_4() { return cBodyBlockAssignment_0_4; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_0_4_0() { return cBodyBlockBlockStatementParserRuleCall_0_4_0; }
		
		//'for' '(' iterator=LeftHandSideExpression ':' enumeration=Expression ')' bodyBlock=BlockStatement
		public Group getGroup_1() { return cGroup_1; }
		
		//'for'
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//iterator=LeftHandSideExpression
		public Assignment getIteratorAssignment_1_2() { return cIteratorAssignment_1_2; }
		
		//LeftHandSideExpression
		public RuleCall getIteratorLeftHandSideExpressionParserRuleCall_1_2_0() { return cIteratorLeftHandSideExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//enumeration=Expression
		public Assignment getEnumerationAssignment_1_4() { return cEnumerationAssignment_1_4; }
		
		//Expression
		public RuleCall getEnumerationExpressionParserRuleCall_1_4_0() { return cEnumerationExpressionParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//bodyBlock=BlockStatement
		public Assignment getBodyBlockAssignment_1_6() { return cBodyBlockAssignment_1_6; }
		
		//BlockStatement
		public RuleCall getBodyBlockBlockStatementParserRuleCall_1_6_0() { return cBodyBlockBlockStatementParserRuleCall_1_6_0; }
	}
	public class InterruptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InterruptStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindInterruptStatementKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExprAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExprAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///////////////////////////////////////////
		//// Interrupt Rules
		///////////////////////////////////////////
		//InterruptStatement fmlStmnt::InterruptStatement:
		//	kind=InterruptStatementKind (expr+=Expression
		//	| '(' expr+=Expression (',' expr+=Expression)* ')')? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//kind=InterruptStatementKind (expr+=Expression | '(' expr+=Expression (',' expr+=Expression)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//kind=InterruptStatementKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//InterruptStatementKind
		public RuleCall getKindInterruptStatementKindEnumRuleCall_0_0() { return cKindInterruptStatementKindEnumRuleCall_0_0; }
		
		//(expr+=Expression | '(' expr+=Expression (',' expr+=Expression)* ')')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr+=Expression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_0() { return cExprExpressionParserRuleCall_1_0_0; }
		
		//'(' expr+=Expression (',' expr+=Expression)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//expr+=Expression
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_1_0() { return cExprExpressionParserRuleCall_1_1_1_0; }
		
		//(',' expr+=Expression)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//expr+=Expression
		public Assignment getExprAssignment_1_1_2_1() { return cExprAssignment_1_1_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_2_1_0() { return cExprExpressionParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ActivityStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ActivityStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOPERATOR_ACTIVITYEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cMachineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachineValuePureNamedMachineExpressionParserRuleCall_2_0 = (RuleCall)cMachineAssignment_2.eContents().get(0);
		private final Assignment cTupleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleTupleParameterExpressionParserRuleCall_3_0 = (RuleCall)cTupleAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/////////////////////////////////////////////
		////// Activity Rules
		/////////////////////////////////////////////
		//ActivityStatement fmlStmnt::ActivityStatement:
		//	{fmlStmnt::ActivityStatement} op=OPERATOR_ACTIVITY
		//	machine=ValuePureNamedMachineExpression
		//	tuple=TupleParameterExpression?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlStmnt::ActivityStatement} op=OPERATOR_ACTIVITY machine=ValuePureNamedMachineExpression
		//tuple=TupleParameterExpression? ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlStmnt::ActivityStatement}
		public Action getActivityStatementAction_0() { return cActivityStatementAction_0; }
		
		//op=OPERATOR_ACTIVITY
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//OPERATOR_ACTIVITY
		public RuleCall getOpOPERATOR_ACTIVITYEnumRuleCall_1_0() { return cOpOPERATOR_ACTIVITYEnumRuleCall_1_0; }
		
		//machine=ValuePureNamedMachineExpression
		public Assignment getMachineAssignment_2() { return cMachineAssignment_2; }
		
		//ValuePureNamedMachineExpression
		public RuleCall getMachineValuePureNamedMachineExpressionParserRuleCall_2_0() { return cMachineValuePureNamedMachineExpressionParserRuleCall_2_0; }
		
		//tuple=TupleParameterExpression?
		public Assignment getTupleAssignment_3() { return cTupleAssignment_3; }
		
		//TupleParameterExpression
		public RuleCall getTupleTupleParameterExpressionParserRuleCall_3_0() { return cTupleTupleParameterExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class InvokeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InvokeStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionInvokeExpressionDeprecatedParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInvokableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cInvokableNamedElementCrossReference_1_0_0 = (CrossReference)cInvokableAssignment_1_0.eContents().get(0);
		private final RuleCall cInvokableNamedElementESUfidParserRuleCall_1_0_0_1 = (RuleCall)cInvokableNamedElementCrossReference_1_0_0.eContents().get(1);
		private final Assignment cExecRoutineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExecRoutineLeftParenthesisKeyword_1_1_0 = (Keyword)cExecRoutineAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsMixTupleExpressionListParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Alternatives cAlternatives_1_4_1 = (Alternatives)cGroup_1_4.eContents().get(1);
		private final Group cGroup_1_4_1_0 = (Group)cAlternatives_1_4_1.eContents().get(0);
		private final Assignment cRetsAssignment_1_4_1_0_0 = (Assignment)cGroup_1_4_1_0.eContents().get(0);
		private final CrossReference cRetsVariableCrossReference_1_4_1_0_0_0 = (CrossReference)cRetsAssignment_1_4_1_0_0.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_1_4_1_0_0_0_1 = (RuleCall)cRetsVariableCrossReference_1_4_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_4_1_0_1 = (Group)cGroup_1_4_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_0_1_0 = (Keyword)cGroup_1_4_1_0_1.eContents().get(0);
		private final Assignment cRetsAssignment_1_4_1_0_1_1 = (Assignment)cGroup_1_4_1_0_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_1_4_1_0_1_1_0 = (CrossReference)cRetsAssignment_1_4_1_0_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_1_4_1_0_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_1_4_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_4_1_1 = (Group)cAlternatives_1_4_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_4_1_1_0 = (Keyword)cGroup_1_4_1_1.eContents().get(0);
		private final Assignment cRetsAssignment_1_4_1_1_1 = (Assignment)cGroup_1_4_1_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_1_4_1_1_1_0 = (CrossReference)cRetsAssignment_1_4_1_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_1_4_1_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_1_4_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_4_1_1_2 = (Group)cGroup_1_4_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_1_1_2_0 = (Keyword)cGroup_1_4_1_1_2.eContents().get(0);
		private final Assignment cRetsAssignment_1_4_1_1_2_1 = (Assignment)cGroup_1_4_1_1_2.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_1_4_1_1_2_1_0 = (CrossReference)cRetsAssignment_1_4_1_1_2_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_1_4_1_1_2_1_0_1 = (RuleCall)cRetsVariableCrossReference_1_4_1_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4_1_1_3 = (Keyword)cGroup_1_4_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExecRoutineAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExecRoutineExecKeyword_2_0_0 = (Keyword)cExecRoutineAssignment_2_0.eContents().get(0);
		private final Assignment cInvokableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cInvokableNamedElementCrossReference_2_1_0 = (CrossReference)cInvokableAssignment_2_1.eContents().get(0);
		private final RuleCall cInvokableNamedElementESUfidParserRuleCall_2_1_0_1 = (RuleCall)cInvokableNamedElementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArgsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArgsMixTupleExpressionListParserRuleCall_2_3_0 = (RuleCall)cArgsAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Alternatives cAlternatives_2_5_1 = (Alternatives)cGroup_2_5.eContents().get(1);
		private final Group cGroup_2_5_1_0 = (Group)cAlternatives_2_5_1.eContents().get(0);
		private final Assignment cRetsAssignment_2_5_1_0_0 = (Assignment)cGroup_2_5_1_0.eContents().get(0);
		private final CrossReference cRetsVariableCrossReference_2_5_1_0_0_0 = (CrossReference)cRetsAssignment_2_5_1_0_0.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_2_5_1_0_0_0_1 = (RuleCall)cRetsVariableCrossReference_2_5_1_0_0_0.eContents().get(1);
		private final Group cGroup_2_5_1_0_1 = (Group)cGroup_2_5_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_5_1_0_1_0 = (Keyword)cGroup_2_5_1_0_1.eContents().get(0);
		private final Assignment cRetsAssignment_2_5_1_0_1_1 = (Assignment)cGroup_2_5_1_0_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_2_5_1_0_1_1_0 = (CrossReference)cRetsAssignment_2_5_1_0_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_2_5_1_0_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_2_5_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_2_5_1_1 = (Group)cAlternatives_2_5_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_5_1_1_0 = (Keyword)cGroup_2_5_1_1.eContents().get(0);
		private final Assignment cRetsAssignment_2_5_1_1_1 = (Assignment)cGroup_2_5_1_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_2_5_1_1_1_0 = (CrossReference)cRetsAssignment_2_5_1_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_2_5_1_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_2_5_1_1_1_0.eContents().get(1);
		private final Group cGroup_2_5_1_1_2 = (Group)cGroup_2_5_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_5_1_1_2_0 = (Keyword)cGroup_2_5_1_1_2.eContents().get(0);
		private final Assignment cRetsAssignment_2_5_1_1_2_1 = (Assignment)cGroup_2_5_1_1_2.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_2_5_1_1_2_1_0 = (CrossReference)cRetsAssignment_2_5_1_1_2_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_2_5_1_1_2_1_0_1 = (RuleCall)cRetsVariableCrossReference_2_5_1_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_5_1_1_3 = (Keyword)cGroup_2_5_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cCallProcedureAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cCallProcedureCallKeyword_3_0_0 = (Keyword)cCallProcedureAssignment_3_0.eContents().get(0);
		private final Assignment cInvokableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInvokableNamedElementCrossReference_3_1_0 = (CrossReference)cInvokableAssignment_3_1.eContents().get(0);
		private final RuleCall cInvokableNamedElementESUfidParserRuleCall_3_1_0_1 = (RuleCall)cInvokableNamedElementCrossReference_3_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgsMixTupleExpressionListParserRuleCall_3_2_0 = (RuleCall)cArgsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Alternatives cAlternatives_3_3_1 = (Alternatives)cGroup_3_3.eContents().get(1);
		private final Group cGroup_3_3_1_0 = (Group)cAlternatives_3_3_1.eContents().get(0);
		private final Assignment cRetsAssignment_3_3_1_0_0 = (Assignment)cGroup_3_3_1_0.eContents().get(0);
		private final CrossReference cRetsVariableCrossReference_3_3_1_0_0_0 = (CrossReference)cRetsAssignment_3_3_1_0_0.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_3_3_1_0_0_0_1 = (RuleCall)cRetsVariableCrossReference_3_3_1_0_0_0.eContents().get(1);
		private final Group cGroup_3_3_1_0_1 = (Group)cGroup_3_3_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_0_1_0 = (Keyword)cGroup_3_3_1_0_1.eContents().get(0);
		private final Assignment cRetsAssignment_3_3_1_0_1_1 = (Assignment)cGroup_3_3_1_0_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_3_3_1_0_1_1_0 = (CrossReference)cRetsAssignment_3_3_1_0_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_3_3_1_0_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_3_3_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_3_3_1_1 = (Group)cAlternatives_3_3_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_3_1_1_0 = (Keyword)cGroup_3_3_1_1.eContents().get(0);
		private final Assignment cRetsAssignment_3_3_1_1_1 = (Assignment)cGroup_3_3_1_1.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_3_3_1_1_1_0 = (CrossReference)cRetsAssignment_3_3_1_1_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_3_3_1_1_1_0_1 = (RuleCall)cRetsVariableCrossReference_3_3_1_1_1_0.eContents().get(1);
		private final Group cGroup_3_3_1_1_2 = (Group)cGroup_3_3_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_3_1_1_2_0 = (Keyword)cGroup_3_3_1_1_2.eContents().get(0);
		private final Assignment cRetsAssignment_3_3_1_1_2_1 = (Assignment)cGroup_3_3_1_1_2.eContents().get(1);
		private final CrossReference cRetsVariableCrossReference_3_3_1_1_2_1_0 = (CrossReference)cRetsAssignment_3_3_1_1_2_1.eContents().get(0);
		private final RuleCall cRetsVariableIDTerminalRuleCall_3_3_1_1_2_1_0_1 = (RuleCall)cRetsVariableCrossReference_3_3_1_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3_1_1_3 = (Keyword)cGroup_3_3_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//InvokeStatement fmlStmnt::InvokeStatement:
		//	expression=InvokeExpressionDeprecated ';'
		//	// Exec Routine
		//	| invokable=[fmlCommon::NamedElement|ESUfid] execRoutine?='(' args=MixTupleExpressionList? ')' ('-->'
		//	(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
		//	// Exec Routine
		//	| execRoutine?='exec' invokable=[fmlCommon::NamedElement|ESUfid]
		//	'(' args=MixTupleExpressionList? ')' ('-->' (rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
		//	// Call Procedure
		//	| callProcedure?='call' invokable=[fmlCommon::NamedElement|ESUfid] args=MixTupleExpressionList? ('-->'
		//	(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
		@Override public ParserRule getRule() { return rule; }
		
		//expression=InvokeExpressionDeprecated ';' // Exec Routine
		//| invokable=[fmlCommon::NamedElement|ESUfid] execRoutine?='(' args=MixTupleExpressionList? ')' ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';' // Exec Routine
		//| execRoutine?='exec' invokable=[fmlCommon::NamedElement|ESUfid] '(' args=MixTupleExpressionList? ')' ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';' // Call Procedure
		//| callProcedure?='call' invokable=[fmlCommon::NamedElement|ESUfid] args=MixTupleExpressionList? ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression=InvokeExpressionDeprecated ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//expression=InvokeExpressionDeprecated
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }
		
		//InvokeExpressionDeprecated
		public RuleCall getExpressionInvokeExpressionDeprecatedParserRuleCall_0_0_0() { return cExpressionInvokeExpressionDeprecatedParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//invokable=[fmlCommon::NamedElement|ESUfid] execRoutine?='(' args=MixTupleExpressionList? ')' ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//invokable=[fmlCommon::NamedElement|ESUfid]
		public Assignment getInvokableAssignment_1_0() { return cInvokableAssignment_1_0; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getInvokableNamedElementCrossReference_1_0_0() { return cInvokableNamedElementCrossReference_1_0_0; }
		
		//ESUfid
		public RuleCall getInvokableNamedElementESUfidParserRuleCall_1_0_0_1() { return cInvokableNamedElementESUfidParserRuleCall_1_0_0_1; }
		
		//execRoutine?='('
		public Assignment getExecRoutineAssignment_1_1() { return cExecRoutineAssignment_1_1; }
		
		//'('
		public Keyword getExecRoutineLeftParenthesisKeyword_1_1_0() { return cExecRoutineLeftParenthesisKeyword_1_1_0; }
		
		//args=MixTupleExpressionList?
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//MixTupleExpressionList
		public RuleCall getArgsMixTupleExpressionListParserRuleCall_1_2_0() { return cArgsMixTupleExpressionListParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//('-->' (rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1_4_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_4_0; }
		
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')')
		public Alternatives getAlternatives_1_4_1() { return cAlternatives_1_4_1; }
		
		//rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		public Group getGroup_1_4_1_0() { return cGroup_1_4_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_1_4_1_0_0() { return cRetsAssignment_1_4_1_0_0; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_1_4_1_0_0_0() { return cRetsVariableCrossReference_1_4_1_0_0_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_1_4_1_0_0_0_1() { return cRetsVariableIDTerminalRuleCall_1_4_1_0_0_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_1_4_1_0_1() { return cGroup_1_4_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_0_1_0() { return cCommaKeyword_1_4_1_0_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_1_4_1_0_1_1() { return cRetsAssignment_1_4_1_0_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_1_4_1_0_1_1_0() { return cRetsVariableCrossReference_1_4_1_0_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_1_4_1_0_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_1_4_1_0_1_1_0_1; }
		
		//'(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_4_1_1_0() { return cLeftParenthesisKeyword_1_4_1_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_1_4_1_1_1() { return cRetsAssignment_1_4_1_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_1_4_1_1_1_0() { return cRetsVariableCrossReference_1_4_1_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_1_4_1_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_1_4_1_1_1_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_1_4_1_1_2() { return cGroup_1_4_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_1_2_0() { return cCommaKeyword_1_4_1_1_2_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_1_4_1_1_2_1() { return cRetsAssignment_1_4_1_1_2_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_1_4_1_1_2_1_0() { return cRetsVariableCrossReference_1_4_1_1_2_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_1_4_1_1_2_1_0_1() { return cRetsVariableIDTerminalRuleCall_1_4_1_1_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_1_1_3() { return cRightParenthesisKeyword_1_4_1_1_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
		
		//execRoutine?='exec' invokable=[fmlCommon::NamedElement|ESUfid] '(' args=MixTupleExpressionList? ')' ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//execRoutine?='exec'
		public Assignment getExecRoutineAssignment_2_0() { return cExecRoutineAssignment_2_0; }
		
		//'exec'
		public Keyword getExecRoutineExecKeyword_2_0_0() { return cExecRoutineExecKeyword_2_0_0; }
		
		//invokable=[fmlCommon::NamedElement|ESUfid]
		public Assignment getInvokableAssignment_2_1() { return cInvokableAssignment_2_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getInvokableNamedElementCrossReference_2_1_0() { return cInvokableNamedElementCrossReference_2_1_0; }
		
		//ESUfid
		public RuleCall getInvokableNamedElementESUfidParserRuleCall_2_1_0_1() { return cInvokableNamedElementESUfidParserRuleCall_2_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//args=MixTupleExpressionList?
		public Assignment getArgsAssignment_2_3() { return cArgsAssignment_2_3; }
		
		//MixTupleExpressionList
		public RuleCall getArgsMixTupleExpressionListParserRuleCall_2_3_0() { return cArgsMixTupleExpressionListParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//('-->' (rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2_5_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2_5_0; }
		
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')')
		public Alternatives getAlternatives_2_5_1() { return cAlternatives_2_5_1; }
		
		//rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		public Group getGroup_2_5_1_0() { return cGroup_2_5_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_2_5_1_0_0() { return cRetsAssignment_2_5_1_0_0; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_2_5_1_0_0_0() { return cRetsVariableCrossReference_2_5_1_0_0_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_2_5_1_0_0_0_1() { return cRetsVariableIDTerminalRuleCall_2_5_1_0_0_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_2_5_1_0_1() { return cGroup_2_5_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_5_1_0_1_0() { return cCommaKeyword_2_5_1_0_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_2_5_1_0_1_1() { return cRetsAssignment_2_5_1_0_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_2_5_1_0_1_1_0() { return cRetsVariableCrossReference_2_5_1_0_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_2_5_1_0_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_2_5_1_0_1_1_0_1; }
		
		//'(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'
		public Group getGroup_2_5_1_1() { return cGroup_2_5_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_5_1_1_0() { return cLeftParenthesisKeyword_2_5_1_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_2_5_1_1_1() { return cRetsAssignment_2_5_1_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_2_5_1_1_1_0() { return cRetsVariableCrossReference_2_5_1_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_2_5_1_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_2_5_1_1_1_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_2_5_1_1_2() { return cGroup_2_5_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_5_1_1_2_0() { return cCommaKeyword_2_5_1_1_2_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_2_5_1_1_2_1() { return cRetsAssignment_2_5_1_1_2_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_2_5_1_1_2_1_0() { return cRetsVariableCrossReference_2_5_1_1_2_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_2_5_1_1_2_1_0_1() { return cRetsVariableIDTerminalRuleCall_2_5_1_1_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5_1_1_3() { return cRightParenthesisKeyword_2_5_1_1_3; }
		
		//';'
		public Keyword getSemicolonKeyword_2_6() { return cSemicolonKeyword_2_6; }
		
		//callProcedure?='call' invokable=[fmlCommon::NamedElement|ESUfid] args=MixTupleExpressionList? ('-->'
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))? ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//callProcedure?='call'
		public Assignment getCallProcedureAssignment_3_0() { return cCallProcedureAssignment_3_0; }
		
		//'call'
		public Keyword getCallProcedureCallKeyword_3_0_0() { return cCallProcedureCallKeyword_3_0_0; }
		
		//invokable=[fmlCommon::NamedElement|ESUfid]
		public Assignment getInvokableAssignment_3_1() { return cInvokableAssignment_3_1; }
		
		//[fmlCommon::NamedElement|ESUfid]
		public CrossReference getInvokableNamedElementCrossReference_3_1_0() { return cInvokableNamedElementCrossReference_3_1_0; }
		
		//ESUfid
		public RuleCall getInvokableNamedElementESUfidParserRuleCall_3_1_0_1() { return cInvokableNamedElementESUfidParserRuleCall_3_1_0_1; }
		
		//args=MixTupleExpressionList?
		public Assignment getArgsAssignment_3_2() { return cArgsAssignment_3_2; }
		
		//MixTupleExpressionList
		public RuleCall getArgsMixTupleExpressionListParserRuleCall_3_2_0() { return cArgsMixTupleExpressionListParserRuleCall_3_2_0; }
		
		//('-->' (rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')'))?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3_3_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3_3_0; }
		
		//(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* | '(' rets+=[fmlInfra::Variable] (','
		//rets+=[fmlInfra::Variable])* ')')
		public Alternatives getAlternatives_3_3_1() { return cAlternatives_3_3_1; }
		
		//rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
		public Group getGroup_3_3_1_0() { return cGroup_3_3_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_3_3_1_0_0() { return cRetsAssignment_3_3_1_0_0; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_3_3_1_0_0_0() { return cRetsVariableCrossReference_3_3_1_0_0_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_3_3_1_0_0_0_1() { return cRetsVariableIDTerminalRuleCall_3_3_1_0_0_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_3_3_1_0_1() { return cGroup_3_3_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_3_3_1_0_1_0() { return cCommaKeyword_3_3_1_0_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_3_3_1_0_1_1() { return cRetsAssignment_3_3_1_0_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_3_3_1_0_1_1_0() { return cRetsVariableCrossReference_3_3_1_0_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_3_3_1_0_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_3_3_1_0_1_1_0_1; }
		
		//'(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'
		public Group getGroup_3_3_1_1() { return cGroup_3_3_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_3_1_1_0() { return cLeftParenthesisKeyword_3_3_1_1_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_3_3_1_1_1() { return cRetsAssignment_3_3_1_1_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_3_3_1_1_1_0() { return cRetsVariableCrossReference_3_3_1_1_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_3_3_1_1_1_0_1() { return cRetsVariableIDTerminalRuleCall_3_3_1_1_1_0_1; }
		
		//(',' rets+=[fmlInfra::Variable])*
		public Group getGroup_3_3_1_1_2() { return cGroup_3_3_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_3_1_1_2_0() { return cCommaKeyword_3_3_1_1_2_0; }
		
		//rets+=[fmlInfra::Variable]
		public Assignment getRetsAssignment_3_3_1_1_2_1() { return cRetsAssignment_3_3_1_1_2_1; }
		
		//[fmlInfra::Variable]
		public CrossReference getRetsVariableCrossReference_3_3_1_1_2_1_0() { return cRetsVariableCrossReference_3_3_1_1_2_1_0; }
		
		//ID
		public RuleCall getRetsVariableIDTerminalRuleCall_3_3_1_1_2_1_0_1() { return cRetsVariableIDTerminalRuleCall_3_3_1_1_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3_1_1_3() { return cRightParenthesisKeyword_3_3_1_1_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalTestExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//Expression fmlExpr::Expression:
		//	AssignmentExpression
		//	| ConditionalTestExpression
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression | ConditionalTestExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }
		
		//ConditionalTestExpression
		public RuleCall getConditionalTestExpressionParserRuleCall_1() { return cConditionalTestExpressionParserRuleCall_1; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideLeftHandSideExpressionParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRigthHandSideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRigthHandSideExpressionParserRuleCall_2_0 = (RuleCall)cRigthHandSideAssignment_2.eContents().get(0);
		
		//// Assignment Expression
		//AssignmentExpression fmlExpr::AssignmentExpression:
		//	leftHandSide=LeftHandSideExpression
		//	operator=AssignmentOperator rigthHandSide=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//leftHandSide=LeftHandSideExpression operator=AssignmentOperator rigthHandSide=Expression
		public Group getGroup() { return cGroup; }
		
		//leftHandSide=LeftHandSideExpression
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }
		
		//LeftHandSideExpression
		public RuleCall getLeftHandSideLeftHandSideExpressionParserRuleCall_0_0() { return cLeftHandSideLeftHandSideExpressionParserRuleCall_0_0; }
		
		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorParserRuleCall_1_0() { return cOperatorAssignmentOperatorParserRuleCall_1_0; }
		
		//rigthHandSide=Expression
		public Assignment getRigthHandSideAssignment_2() { return cRigthHandSideAssignment_2; }
		
		//Expression
		public RuleCall getRigthHandSideExpressionParserRuleCall_2_0() { return cRigthHandSideExpressionParserRuleCall_2_0; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsteriskEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSolidusEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPercentSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAmpersandAmpersandEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cVerticalLineVerticalLineEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAmpersandEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVerticalLineEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cCircumflexAccentEqualsSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLessThanSignEqualsSignLessThanSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cCircumflexAccentEqualsSignLessThanSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cCircumflexAccentEqualsSignGreaterThanSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cGreaterThanSignEqualsSignGreaterThanSignKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		
		//AssignmentOperator:
		//	'=' | ':=' | '::='
		//	| '+=' | '-='
		//	| '*=' | '/=' | '%='
		//	| '&&=' | '||='
		//	| '&=' | '|=' | '^='
		//	| '<<=' | '>>=' | '>>>='
		//	// queue operation: push, assign_top, top, pop
		//	| '<=<'
		//	| '^=<'
		//	| '^=>'
		//	| '>=>';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | ':=' | '::=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&&=' | '||=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>=' // queue operation: push, assign_top, top, pop
		//| '<=<' | '^=<' | '^=>' | '>=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//'::='
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_4() { return cHyphenMinusEqualsSignKeyword_4; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_5() { return cAsteriskEqualsSignKeyword_5; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_6() { return cSolidusEqualsSignKeyword_6; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_7() { return cPercentSignEqualsSignKeyword_7; }
		
		//'&&='
		public Keyword getAmpersandAmpersandEqualsSignKeyword_8() { return cAmpersandAmpersandEqualsSignKeyword_8; }
		
		//'||='
		public Keyword getVerticalLineVerticalLineEqualsSignKeyword_9() { return cVerticalLineVerticalLineEqualsSignKeyword_9; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_10() { return cAmpersandEqualsSignKeyword_10; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_11() { return cVerticalLineEqualsSignKeyword_11; }
		
		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_12() { return cCircumflexAccentEqualsSignKeyword_12; }
		
		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_13() { return cLessThanSignLessThanSignEqualsSignKeyword_13; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_14() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_14; }
		
		//'>>>='
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_15() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_15; }
		
		//'<=<'
		public Keyword getLessThanSignEqualsSignLessThanSignKeyword_16() { return cLessThanSignEqualsSignLessThanSignKeyword_16; }
		
		//'^=<'
		public Keyword getCircumflexAccentEqualsSignLessThanSignKeyword_17() { return cCircumflexAccentEqualsSignLessThanSignKeyword_17; }
		
		//'^=>'
		public Keyword getCircumflexAccentEqualsSignGreaterThanSignKeyword_18() { return cCircumflexAccentEqualsSignGreaterThanSignKeyword_18; }
		
		//'>=>'
		public Keyword getGreaterThanSignEqualsSignGreaterThanSignKeyword_19() { return cGreaterThanSignEqualsSignGreaterThanSignKeyword_19; }
	}
	public class LeftHandSideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LeftHandSideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftHandSideExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLvalueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLvalueValueSelectionExpressionParserRuleCall_1_0_0 = (RuleCall)cLvalueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLvalueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLvalueValueSelectionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cLvalueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//LeftHandSideExpression fmlExpr::LeftHandSideExpression:
		//	{fmlExpr::LeftHandSideExpression} (lvalue=ValueSelectionExpression
		//	| '(' lvalue=ValueSelectionExpression ')')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LeftHandSideExpression} (lvalue=ValueSelectionExpression | '(' lvalue=ValueSelectionExpression ')')
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LeftHandSideExpression}
		public Action getLeftHandSideExpressionAction_0() { return cLeftHandSideExpressionAction_0; }
		
		//(lvalue=ValueSelectionExpression | '(' lvalue=ValueSelectionExpression ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//lvalue=ValueSelectionExpression
		public Assignment getLvalueAssignment_1_0() { return cLvalueAssignment_1_0; }
		
		//ValueSelectionExpression
		public RuleCall getLvalueValueSelectionExpressionParserRuleCall_1_0_0() { return cLvalueValueSelectionExpressionParserRuleCall_1_0_0; }
		
		//'(' lvalue=ValueSelectionExpression ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//lvalue=ValueSelectionExpression
		public Assignment getLvalueAssignment_1_1_1() { return cLvalueAssignment_1_1_1; }
		
		//ValueSelectionExpression
		public RuleCall getLvalueValueSelectionExpressionParserRuleCall_1_1_1_0() { return cLvalueValueSelectionExpressionParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConditionalTestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ConditionalTestExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalTestExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorQuestionMarkKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cThenOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenOperandExpressionParserRuleCall_1_2_0 = (RuleCall)cThenOperandAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseOperandAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseOperandExpressionParserRuleCall_1_4_0 = (RuleCall)cElseOperandAssignment_1_4.eContents().get(0);
		
		//// Conditional Test Expression
		//ConditionalTestExpression fmlExpr::Expression:
		//	LogicalOrExpression ({fmlExpr::ConditionalTestExpression.condition=current} operator='?' thenOperand=Expression ':'
		//	elseOperand=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression ({fmlExpr::ConditionalTestExpression.condition=current} operator='?' thenOperand=Expression ':'
		//elseOperand=Expression)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//({fmlExpr::ConditionalTestExpression.condition=current} operator='?' thenOperand=Expression ':' elseOperand=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::ConditionalTestExpression.condition=current}
		public Action getConditionalTestExpressionConditionAction_1_0() { return cConditionalTestExpressionConditionAction_1_0; }
		
		//operator='?'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'?'
		public Keyword getOperatorQuestionMarkKeyword_1_1_0() { return cOperatorQuestionMarkKeyword_1_1_0; }
		
		//thenOperand=Expression
		public Assignment getThenOperandAssignment_1_2() { return cThenOperandAssignment_1_2; }
		
		//Expression
		public RuleCall getThenOperandExpressionParserRuleCall_1_2_0() { return cThenOperandExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//elseOperand=Expression
		public Assignment getElseOperandAssignment_1_4() { return cElseOperandAssignment_1_4; }
		
		//Expression
		public RuleCall getElseOperandExpressionParserRuleCall_1_4_0() { return cElseOperandExpressionParserRuleCall_1_4_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAssociativeExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_3_0 = (Alternatives)cGroup_1_3.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_3_0_0 = (Keyword)cAlternatives_1_3_0.eContents().get(0);
		private final Keyword cOrKeyword_1_3_0_1 = (Keyword)cAlternatives_1_3_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandLogicalAndExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandAssignment_1_3_1.eContents().get(0);
		
		//// Logical Expression
		//LogicalOrExpression fmlExpr::Expression:
		//	LogicalAndExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('||' | 'or')
		//	operand+=LogicalAndExpression (('||' | 'or') operand+=LogicalAndExpression)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('||' | 'or')
		//operand+=LogicalAndExpression (('||' | 'or') operand+=LogicalAndExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('||' | 'or') operand+=LogicalAndExpression (('||' |
		//'or') operand+=LogicalAndExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::LogicalAssociativeExpression.operand+=current}
		public Action getLogicalAssociativeExpressionOperandAction_1_0() { return cLogicalAssociativeExpressionOperandAction_1_0; }
		
		//operator=('||' | 'or')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('||' | 'or')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0_0; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0_1() { return cOperatorOrKeyword_1_1_0_1; }
		
		//operand+=LogicalAndExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getOperandLogicalAndExpressionParserRuleCall_1_2_0() { return cOperandLogicalAndExpressionParserRuleCall_1_2_0; }
		
		//(('||' | 'or') operand+=LogicalAndExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//('||' | 'or')
		public Alternatives getAlternatives_1_3_0() { return cAlternatives_1_3_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_3_0_0() { return cVerticalLineVerticalLineKeyword_1_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1_3_0_1() { return cOrKeyword_1_3_0_1; }
		
		//operand+=LogicalAndExpression
		public Assignment getOperandAssignment_1_3_1() { return cOperandAssignment_1_3_1; }
		
		//LogicalAndExpression
		public RuleCall getOperandLogicalAndExpressionParserRuleCall_1_3_1_0() { return cOperandLogicalAndExpressionParserRuleCall_1_3_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAssociativeExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandBitwiseOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_3_0 = (Alternatives)cGroup_1_3.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_3_0_0 = (Keyword)cAlternatives_1_3_0.eContents().get(0);
		private final Keyword cAndKeyword_1_3_0_1 = (Keyword)cAlternatives_1_3_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandBitwiseOrExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandAssignment_1_3_1.eContents().get(0);
		
		//LogicalAndExpression fmlExpr::Expression:
		//	BitwiseOrExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('&&' | 'and')
		//	operand+=BitwiseOrExpression (('&&' | 'and') operand+=BitwiseOrExpression)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseOrExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('&&' | 'and')
		//operand+=BitwiseOrExpression (('&&' | 'and') operand+=BitwiseOrExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseOrExpression
		public RuleCall getBitwiseOrExpressionParserRuleCall_0() { return cBitwiseOrExpressionParserRuleCall_0; }
		
		//({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('&&' | 'and') operand+=BitwiseOrExpression (('&&' |
		//'and') operand+=BitwiseOrExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::LogicalAssociativeExpression.operand+=current}
		public Action getLogicalAssociativeExpressionOperandAction_1_0() { return cLogicalAssociativeExpressionOperandAction_1_0; }
		
		//operator=('&&' | 'and')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('&&' | 'and')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0_0; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0_1() { return cOperatorAndKeyword_1_1_0_1; }
		
		//operand+=BitwiseOrExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//BitwiseOrExpression
		public RuleCall getOperandBitwiseOrExpressionParserRuleCall_1_2_0() { return cOperandBitwiseOrExpressionParserRuleCall_1_2_0; }
		
		//(('&&' | 'and') operand+=BitwiseOrExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//('&&' | 'and')
		public Alternatives getAlternatives_1_3_0() { return cAlternatives_1_3_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_3_0_0() { return cAmpersandAmpersandKeyword_1_3_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_3_0_1() { return cAndKeyword_1_3_0_1; }
		
		//operand+=BitwiseOrExpression
		public Assignment getOperandAssignment_1_3_1() { return cOperandAssignment_1_3_1; }
		
		//BitwiseOrExpression
		public RuleCall getOperandBitwiseOrExpressionParserRuleCall_1_3_1_0() { return cOperandBitwiseOrExpressionParserRuleCall_1_3_1_0; }
	}
	public class BitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseAssociativeExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandBitwiseXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cVerticalLineKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandBitwiseXorExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandAssignment_1_3_1.eContents().get(0);
		
		//// Bitwise Expression
		//BitwiseOrExpression fmlExpr::Expression:
		//	BitwiseXorExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='|'
		//	operand+=BitwiseXorExpression ('|' operand+=BitwiseXorExpression)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseXorExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='|'
		//operand+=BitwiseXorExpression ('|' operand+=BitwiseXorExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseXorExpression
		public RuleCall getBitwiseXorExpressionParserRuleCall_0() { return cBitwiseXorExpressionParserRuleCall_0; }
		
		//({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='|' operand+=BitwiseXorExpression ('|'
		//operand+=BitwiseXorExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::BitwiseAssociativeExpression.operand+=current}
		public Action getBitwiseAssociativeExpressionOperandAction_1_0() { return cBitwiseAssociativeExpressionOperandAction_1_0; }
		
		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//operand+=BitwiseXorExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//BitwiseXorExpression
		public RuleCall getOperandBitwiseXorExpressionParserRuleCall_1_2_0() { return cOperandBitwiseXorExpressionParserRuleCall_1_2_0; }
		
		//('|' operand+=BitwiseXorExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_3_0() { return cVerticalLineKeyword_1_3_0; }
		
		//operand+=BitwiseXorExpression
		public Assignment getOperandAssignment_1_3_1() { return cOperandAssignment_1_3_1; }
		
		//BitwiseXorExpression
		public RuleCall getOperandBitwiseXorExpressionParserRuleCall_1_3_1_0() { return cOperandBitwiseXorExpressionParserRuleCall_1_3_1_0; }
	}
	public class BitwiseXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseAssociativeExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandBitwiseAndExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandBitwiseAndExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandAssignment_1_3_1.eContents().get(0);
		
		//BitwiseXorExpression fmlExpr::Expression:
		//	BitwiseAndExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='^'
		//	operand+=BitwiseAndExpression ('^' operand+=BitwiseAndExpression)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseAndExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='^'
		//operand+=BitwiseAndExpression ('^' operand+=BitwiseAndExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseAndExpression
		public RuleCall getBitwiseAndExpressionParserRuleCall_0() { return cBitwiseAndExpressionParserRuleCall_0; }
		
		//({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='^' operand+=BitwiseAndExpression ('^'
		//operand+=BitwiseAndExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::BitwiseAssociativeExpression.operand+=current}
		public Action getBitwiseAssociativeExpressionOperandAction_1_0() { return cBitwiseAssociativeExpressionOperandAction_1_0; }
		
		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }
		
		//operand+=BitwiseAndExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//BitwiseAndExpression
		public RuleCall getOperandBitwiseAndExpressionParserRuleCall_1_2_0() { return cOperandBitwiseAndExpressionParserRuleCall_1_2_0; }
		
		//('^' operand+=BitwiseAndExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_3_0() { return cCircumflexAccentKeyword_1_3_0; }
		
		//operand+=BitwiseAndExpression
		public Assignment getOperandAssignment_1_3_1() { return cOperandAssignment_1_3_1; }
		
		//BitwiseAndExpression
		public RuleCall getOperandBitwiseAndExpressionParserRuleCall_1_3_1_0() { return cOperandBitwiseAndExpressionParserRuleCall_1_3_1_0; }
	}
	public class BitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseAssociativeExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAmpersandKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandEqualityExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandAssignment_1_3_1.eContents().get(0);
		
		//BitwiseAndExpression fmlExpr::Expression:
		//	EqualityExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='&' operand+=EqualityExpression
		//	('&' operand+=EqualityExpression)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='&' operand+=EqualityExpression
		//('&' operand+=EqualityExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='&' operand+=EqualityExpression ('&'
		//operand+=EqualityExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::BitwiseAssociativeExpression.operand+=current}
		public Action getBitwiseAssociativeExpressionOperandAction_1_0() { return cBitwiseAssociativeExpressionOperandAction_1_0; }
		
		//operator='&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0() { return cOperatorAmpersandKeyword_1_1_0; }
		
		//operand+=EqualityExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getOperandEqualityExpressionParserRuleCall_1_2_0() { return cOperandEqualityExpressionParserRuleCall_1_2_0; }
		
		//('&' operand+=EqualityExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_3_0() { return cAmpersandKeyword_1_3_0; }
		
		//operand+=EqualityExpression
		public Assignment getOperandAssignment_1_3_1() { return cOperandAssignment_1_3_1; }
		
		//EqualityExpression
		public RuleCall getOperandEqualityExpressionParserRuleCall_1_3_1_0() { return cOperandEqualityExpressionParserRuleCall_1_3_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityBinaryExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRigthOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRigthOperandRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRigthOperandAssignment_1_2.eContents().get(0);
		
		//// Equality Expression
		//EqualityExpression fmlExpr::Expression:
		//	RelationalExpression ({fmlExpr::EqualityBinaryExpression.leftOperand=current} operator=EqualityOperator
		//	rigthOperand=RelationalExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({fmlExpr::EqualityBinaryExpression.leftOperand=current} operator=EqualityOperator
		//rigthOperand=RelationalExpression)?
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({fmlExpr::EqualityBinaryExpression.leftOperand=current} operator=EqualityOperator rigthOperand=RelationalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::EqualityBinaryExpression.leftOperand=current}
		public Action getEqualityBinaryExpressionLeftOperandAction_1_0() { return cEqualityBinaryExpressionLeftOperandAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_1_1_0() { return cOperatorEqualityOperatorParserRuleCall_1_1_0; }
		
		//rigthOperand=RelationalExpression
		public Assignment getRigthOperandAssignment_1_2() { return cRigthOperandAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRigthOperandRelationalExpressionParserRuleCall_1_2_0() { return cRigthOperandRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//EqualityOperator:
		//	'==' | '!=' | '===' | '=!=' | '=/=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '===' | '=!=' | '=/='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
		
		//'=!='
		public Keyword getEqualsSignExclamationMarkEqualsSignKeyword_3() { return cEqualsSignExclamationMarkEqualsSignKeyword_3; }
		
		//'=/='
		public Keyword getEqualsSignSolidusEqualsSignKeyword_4() { return cEqualsSignSolidusEqualsSignKeyword_4; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalBinaryExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRigthOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRigthOperandAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRigthOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Action cRelationalTernaryExpressionLeftRelationAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cRigthOperatorAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRigthOperatorRelationalOperatorParserRuleCall_1_3_1_0 = (RuleCall)cRigthOperatorAssignment_1_3_1.eContents().get(0);
		private final Assignment cRigthOperandAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRigthOperandAdditiveExpressionParserRuleCall_1_3_2_0 = (RuleCall)cRigthOperandAssignment_1_3_2.eContents().get(0);
		
		//// Relational Binary Expression
		//RelationalExpression fmlExpr::Expression:
		//	AdditiveExpression ({fmlExpr::RelationalBinaryExpression.leftOperand=current} operator=RelationalOperator
		//	rigthOperand=AdditiveExpression ({fmlExpr::RelationalTernaryExpression.leftRelation=current}
		//	rigthOperator=RelationalOperator rigthOperand=AdditiveExpression)?)?
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({fmlExpr::RelationalBinaryExpression.leftOperand=current} operator=RelationalOperator
		//rigthOperand=AdditiveExpression ({fmlExpr::RelationalTernaryExpression.leftRelation=current}
		//rigthOperator=RelationalOperator rigthOperand=AdditiveExpression)?)?
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({fmlExpr::RelationalBinaryExpression.leftOperand=current} operator=RelationalOperator rigthOperand=AdditiveExpression
		//({fmlExpr::RelationalTernaryExpression.leftRelation=current} rigthOperator=RelationalOperator
		//rigthOperand=AdditiveExpression)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::RelationalBinaryExpression.leftOperand=current}
		public Action getRelationalBinaryExpressionLeftOperandAction_1_0() { return cRelationalBinaryExpressionLeftOperandAction_1_0; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorParserRuleCall_1_1_0() { return cOperatorRelationalOperatorParserRuleCall_1_1_0; }
		
		//rigthOperand=AdditiveExpression
		public Assignment getRigthOperandAssignment_1_2() { return cRigthOperandAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRigthOperandAdditiveExpressionParserRuleCall_1_2_0() { return cRigthOperandAdditiveExpressionParserRuleCall_1_2_0; }
		
		//({fmlExpr::RelationalTernaryExpression.leftRelation=current} rigthOperator=RelationalOperator
		//rigthOperand=AdditiveExpression)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{fmlExpr::RelationalTernaryExpression.leftRelation=current}
		public Action getRelationalTernaryExpressionLeftRelationAction_1_3_0() { return cRelationalTernaryExpressionLeftRelationAction_1_3_0; }
		
		//rigthOperator=RelationalOperator
		public Assignment getRigthOperatorAssignment_1_3_1() { return cRigthOperatorAssignment_1_3_1; }
		
		//RelationalOperator
		public RuleCall getRigthOperatorRelationalOperatorParserRuleCall_1_3_1_0() { return cRigthOperatorRelationalOperatorParserRuleCall_1_3_1_0; }
		
		//rigthOperand=AdditiveExpression
		public Assignment getRigthOperandAssignment_1_3_2() { return cRigthOperandAssignment_1_3_2; }
		
		//AdditiveExpression
		public RuleCall getRigthOperandAdditiveExpressionParserRuleCall_1_3_2_0() { return cRigthOperandAdditiveExpressionParserRuleCall_1_3_2_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//	'<' | '>' | '<=' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOperatorPlusSignKeyword_1_0_1_0 = (Keyword)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_0_2_0 = (RuleCall)cOperandAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cPlusSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cOperandAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_1_2_0 = (RuleCall)cOperandAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cOperandAssignment_1_1_3_1.eContents().get(0);
		
		//// Arithmetic Associative (left) Expression
		//AdditiveExpression fmlExpr::Expression:
		//	MultiplicativeExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='+'
		//	operand+=MultiplicativeExpression ('+' operand+=MultiplicativeExpression)* |
		//	{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='-' operand+=MultiplicativeExpression ('-'
		//	operand+=MultiplicativeExpression)*)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='+'
		//operand+=MultiplicativeExpression ('+' operand+=MultiplicativeExpression)* |
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='-' operand+=MultiplicativeExpression ('-'
		//operand+=MultiplicativeExpression)*)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='+' operand+=MultiplicativeExpression ('+'
		//operand+=MultiplicativeExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='-'
		//operand+=MultiplicativeExpression ('-' operand+=MultiplicativeExpression)*)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='+' operand+=MultiplicativeExpression ('+'
		//operand+=MultiplicativeExpression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_0_0() { return cArithmeticAssociativeExpressionOperandAction_1_0_0; }
		
		//operator='+'
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_0_1_0() { return cOperatorPlusSignKeyword_1_0_1_0; }
		
		//operand+=MultiplicativeExpression
		public Assignment getOperandAssignment_1_0_2() { return cOperandAssignment_1_0_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_0_2_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_0_2_0; }
		
		//('+' operand+=MultiplicativeExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_3_0() { return cPlusSignKeyword_1_0_3_0; }
		
		//operand+=MultiplicativeExpression
		public Assignment getOperandAssignment_1_0_3_1() { return cOperandAssignment_1_0_3_1; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_0_3_1_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_0_3_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='-' operand+=MultiplicativeExpression ('-'
		//operand+=MultiplicativeExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_1_0() { return cArithmeticAssociativeExpressionOperandAction_1_1_0; }
		
		//operator='-'
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_1_0() { return cOperatorHyphenMinusKeyword_1_1_1_0; }
		
		//operand+=MultiplicativeExpression
		public Assignment getOperandAssignment_1_1_2() { return cOperandAssignment_1_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_1_2_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_1_2_0; }
		
		//('-' operand+=MultiplicativeExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_3_0() { return cHyphenMinusKeyword_1_1_3_0; }
		
		//operand+=MultiplicativeExpression
		public Assignment getOperandAssignment_1_1_3_1() { return cOperandAssignment_1_1_3_1; }
		
		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_1_3_1_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_1_3_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_1_0_1_0 = (Keyword)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0_2_0 = (RuleCall)cOperandAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cOperandAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_1_2_0 = (RuleCall)cOperandAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cAsteriskAsteriskKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cOperandAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cOperatorSolidusKeyword_1_2_1_0 = (Keyword)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_2_2_0 = (RuleCall)cOperandAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cSolidusKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_2_3_1_0 = (RuleCall)cOperandAssignment_1_2_3_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cArithmeticAssociativeExpressionOperandAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cOperatorAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_3_1_0 = (Keyword)cOperatorAssignment_1_3_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_3_2_0 = (RuleCall)cOperandAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_3_3 = (Group)cGroup_1_3.eContents().get(3);
		private final Keyword cPercentSignKeyword_1_3_3_0 = (Keyword)cGroup_1_3_3.eContents().get(0);
		private final Assignment cOperandAssignment_1_3_3_1 = (Assignment)cGroup_1_3_3.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_3_3_1_0 = (RuleCall)cOperandAssignment_1_3_3_1.eContents().get(0);
		
		//MultiplicativeExpression fmlExpr::Expression:
		//	UnaryExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='*' operand+=UnaryExpression
		//	('*' operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='**'
		//	operand+=UnaryExpression ('**' operand+=UnaryExpression)* |
		//	{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='/' operand+=UnaryExpression ('/'
		//	operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='%'
		//	operand+=UnaryExpression ('%' operand+=UnaryExpression)*)*
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='*' operand+=UnaryExpression ('*'
		//operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='**'
		//operand+=UnaryExpression ('**' operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		//operator='/' operand+=UnaryExpression ('/' operand+=UnaryExpression)* |
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='%' operand+=UnaryExpression ('%'
		//operand+=UnaryExpression)*)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='*' operand+=UnaryExpression ('*'
		//operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='**'
		//operand+=UnaryExpression ('**' operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		//operator='/' operand+=UnaryExpression ('/' operand+=UnaryExpression)* |
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='%' operand+=UnaryExpression ('%'
		//operand+=UnaryExpression)*)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='*' operand+=UnaryExpression ('*'
		//operand+=UnaryExpression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_0_0() { return cArithmeticAssociativeExpressionOperandAction_1_0_0; }
		
		//operator='*'
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_0_1_0() { return cOperatorAsteriskKeyword_1_0_1_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_0_2() { return cOperandAssignment_1_0_2; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0_2_0() { return cOperandUnaryExpressionParserRuleCall_1_0_2_0; }
		
		//('*' operand+=UnaryExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_3_0() { return cAsteriskKeyword_1_0_3_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_0_3_1() { return cOperandAssignment_1_0_3_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0_3_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0_3_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='**' operand+=UnaryExpression ('**'
		//operand+=UnaryExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_1_0() { return cArithmeticAssociativeExpressionOperandAction_1_1_0; }
		
		//operator='**'
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//'**'
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_1_0() { return cOperatorAsteriskAsteriskKeyword_1_1_1_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_1_2() { return cOperandAssignment_1_1_2; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_1_2_0() { return cOperandUnaryExpressionParserRuleCall_1_1_2_0; }
		
		//('**' operand+=UnaryExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_1_3_0() { return cAsteriskAsteriskKeyword_1_1_3_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_1_3_1() { return cOperandAssignment_1_1_3_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_1_3_1_0() { return cOperandUnaryExpressionParserRuleCall_1_1_3_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='/' operand+=UnaryExpression ('/'
		//operand+=UnaryExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_2_0() { return cArithmeticAssociativeExpressionOperandAction_1_2_0; }
		
		//operator='/'
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_2_1_0() { return cOperatorSolidusKeyword_1_2_1_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_2_2() { return cOperandAssignment_1_2_2; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_2_2_0() { return cOperandUnaryExpressionParserRuleCall_1_2_2_0; }
		
		//('/' operand+=UnaryExpression)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'/'
		public Keyword getSolidusKeyword_1_2_3_0() { return cSolidusKeyword_1_2_3_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_2_3_1() { return cOperandAssignment_1_2_3_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_2_3_1_0() { return cOperandUnaryExpressionParserRuleCall_1_2_3_1_0; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='%' operand+=UnaryExpression ('%'
		//operand+=UnaryExpression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{fmlExpr::ArithmeticAssociativeExpression.operand+=current}
		public Action getArithmeticAssociativeExpressionOperandAction_1_3_0() { return cArithmeticAssociativeExpressionOperandAction_1_3_0; }
		
		//operator='%'
		public Assignment getOperatorAssignment_1_3_1() { return cOperatorAssignment_1_3_1; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_1_3_1_0() { return cOperatorPercentSignKeyword_1_3_1_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_3_2() { return cOperandAssignment_1_3_2; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_3_2_0() { return cOperandUnaryExpressionParserRuleCall_1_3_2_0; }
		
		//('%' operand+=UnaryExpression)*
		public Group getGroup_1_3_3() { return cGroup_1_3_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_3_3_0() { return cPercentSignKeyword_1_3_3_0; }
		
		//operand+=UnaryExpression
		public Assignment getOperandAssignment_1_3_3_1() { return cOperandAssignment_1_3_3_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_3_3_1_0() { return cOperandUnaryExpressionParserRuleCall_1_3_3_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBitwiseUnaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNewfreshExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCastExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPrefixUnaryExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPostfixUnaryExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPrimaryExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// Unary Expression
		//UnaryExpression fmlExpr::Expression:
		//	LiteralTerminalExpression
		//	| ArithmeticUnaryExpression
		//	| LogicalUnaryExpression
		//	| BitwiseUnaryExpression
		//	| NewfreshExpression
		//	| CastExpression
		//	| PrefixUnaryExpression
		//	| PostfixUnaryExpression
		//	| PrimaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralTerminalExpression | ArithmeticUnaryExpression | LogicalUnaryExpression | BitwiseUnaryExpression |
		//NewfreshExpression | CastExpression | PrefixUnaryExpression | PostfixUnaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralTerminalExpression
		public RuleCall getLiteralTerminalExpressionParserRuleCall_0() { return cLiteralTerminalExpressionParserRuleCall_0; }
		
		//ArithmeticUnaryExpression
		public RuleCall getArithmeticUnaryExpressionParserRuleCall_1() { return cArithmeticUnaryExpressionParserRuleCall_1; }
		
		//LogicalUnaryExpression
		public RuleCall getLogicalUnaryExpressionParserRuleCall_2() { return cLogicalUnaryExpressionParserRuleCall_2; }
		
		//BitwiseUnaryExpression
		public RuleCall getBitwiseUnaryExpressionParserRuleCall_3() { return cBitwiseUnaryExpressionParserRuleCall_3; }
		
		//NewfreshExpression
		public RuleCall getNewfreshExpressionParserRuleCall_4() { return cNewfreshExpressionParserRuleCall_4; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_5() { return cCastExpressionParserRuleCall_5; }
		
		//PrefixUnaryExpression
		public RuleCall getPrefixUnaryExpressionParserRuleCall_6() { return cPrefixUnaryExpressionParserRuleCall_6; }
		
		//PostfixUnaryExpression
		public RuleCall getPostfixUnaryExpressionParserRuleCall_7() { return cPostfixUnaryExpressionParserRuleCall_7; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_8() { return cPrimaryExpressionParserRuleCall_8; }
	}
	public class PostfixUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PostfixUnaryExpression");
		private final RuleCall cIncrementOrDecrementPostfixExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Postfix Increment or Decrement Expression
		//PostfixUnaryExpression fmlExpr::Expression:
		//	IncrementOrDecrementPostfixExpression
		@Override public ParserRule getRule() { return rule; }
		
		//IncrementOrDecrementPostfixExpression
		public RuleCall getIncrementOrDecrementPostfixExpressionParserRuleCall() { return cIncrementOrDecrementPostfixExpressionParserRuleCall; }
	}
	public class IncrementOrDecrementPostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IncrementOrDecrementPostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideLeftHandSideExpressionParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAffixOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		
		//IncrementOrDecrementPostfixExpression fmlExpr::IncrementOrDecrementPostfixExpression:
		//	leftHandSide=LeftHandSideExpression operator=AffixOperator
		@Override public ParserRule getRule() { return rule; }
		
		//leftHandSide=LeftHandSideExpression operator=AffixOperator
		public Group getGroup() { return cGroup; }
		
		//leftHandSide=LeftHandSideExpression
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }
		
		//LeftHandSideExpression
		public RuleCall getLeftHandSideLeftHandSideExpressionParserRuleCall_0_0() { return cLeftHandSideLeftHandSideExpressionParserRuleCall_0_0; }
		
		//operator=AffixOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//AffixOperator
		public RuleCall getOperatorAffixOperatorParserRuleCall_1_0() { return cOperatorAffixOperatorParserRuleCall_1_0; }
	}
	public class PrefixUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrefixUnaryExpression");
		private final RuleCall cIncrementOrDecrementPrefixExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Prefix Increment or Decrement Expression
		//PrefixUnaryExpression fmlExpr::Expression:
		//	IncrementOrDecrementPrefixExpression
		@Override public ParserRule getRule() { return rule; }
		
		//IncrementOrDecrementPrefixExpression
		public RuleCall getIncrementOrDecrementPrefixExpressionParserRuleCall() { return cIncrementOrDecrementPrefixExpressionParserRuleCall; }
	}
	public class IncrementOrDecrementPrefixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.IncrementOrDecrementPrefixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAffixOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cLeftHandSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftHandSideLeftHandSideExpressionParserRuleCall_1_0 = (RuleCall)cLeftHandSideAssignment_1.eContents().get(0);
		
		//IncrementOrDecrementPrefixExpression fmlExpr::IncrementOrDecrementPrefixExpression:
		//	operator=AffixOperator leftHandSide=LeftHandSideExpression
		@Override public ParserRule getRule() { return rule; }
		
		//operator=AffixOperator leftHandSide=LeftHandSideExpression
		public Group getGroup() { return cGroup; }
		
		//operator=AffixOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//AffixOperator
		public RuleCall getOperatorAffixOperatorParserRuleCall_0_0() { return cOperatorAffixOperatorParserRuleCall_0_0; }
		
		//leftHandSide=LeftHandSideExpression
		public Assignment getLeftHandSideAssignment_1() { return cLeftHandSideAssignment_1; }
		
		//LeftHandSideExpression
		public RuleCall getLeftHandSideLeftHandSideExpressionParserRuleCall_1_0() { return cLeftHandSideLeftHandSideExpressionParserRuleCall_1_0; }
	}
	public class AffixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.AffixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AffixOperator:
		//	'++' | '--';
		@Override public ParserRule getRule() { return rule; }
		
		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class NewfreshExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.NewfreshExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNewfreshKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLeftHandSideAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftHandSideLeftHandSideExpressionParserRuleCall_0_1_0 = (RuleCall)cLeftHandSideAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftHandSideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftHandSideLeftHandSideExpressionParserRuleCall_1_1_0 = (RuleCall)cLeftHandSideAssignment_1_1.eContents().get(0);
		private final Keyword cNewfreshKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// Newfresh Unary Expression
		//NewfreshExpression fmlExpr::NewfreshExpression:
		//	'newfresh' leftHandSide=LeftHandSideExpression
		//	| '(:' leftHandSide=LeftHandSideExpression 'newfresh' ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'newfresh' leftHandSide=LeftHandSideExpression | '(:' leftHandSide=LeftHandSideExpression 'newfresh' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'newfresh' leftHandSide=LeftHandSideExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//'newfresh'
		public Keyword getNewfreshKeyword_0_0() { return cNewfreshKeyword_0_0; }
		
		//leftHandSide=LeftHandSideExpression
		public Assignment getLeftHandSideAssignment_0_1() { return cLeftHandSideAssignment_0_1; }
		
		//LeftHandSideExpression
		public RuleCall getLeftHandSideLeftHandSideExpressionParserRuleCall_0_1_0() { return cLeftHandSideLeftHandSideExpressionParserRuleCall_0_1_0; }
		
		//'(:' leftHandSide=LeftHandSideExpression 'newfresh' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'(:'
		public Keyword getLeftParenthesisColonKeyword_1_0() { return cLeftParenthesisColonKeyword_1_0; }
		
		//leftHandSide=LeftHandSideExpression
		public Assignment getLeftHandSideAssignment_1_1() { return cLeftHandSideAssignment_1_1; }
		
		//LeftHandSideExpression
		public RuleCall getLeftHandSideLeftHandSideExpressionParserRuleCall_1_1_0() { return cLeftHandSideLeftHandSideExpressionParserRuleCall_1_1_0; }
		
		//'newfresh'
		public Keyword getNewfreshKeyword_1_2() { return cNewfreshKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCtorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatatypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDatatypeDataTypeCrossReference_2_0 = (CrossReference)cDatatypeAssignment_2.eContents().get(0);
		private final RuleCall cDatatypeDataTypeESUfidParserRuleCall_2_0_1 = (RuleCall)cDatatypeDataTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperandAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperandExpressionParserRuleCall_5_0 = (RuleCall)cOperandAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Cast Expression
		//CastExpression fmlExpr::CastExpression:
		//	'ctor' '<' datatype=[fmlType::DataType|ESUfid] '>'
		//	'(' operand=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'ctor' '<' datatype=[fmlType::DataType|ESUfid] '>' '(' operand=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'ctor'
		public Keyword getCtorKeyword_0() { return cCtorKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//datatype=[fmlType::DataType|ESUfid]
		public Assignment getDatatypeAssignment_2() { return cDatatypeAssignment_2; }
		
		//[fmlType::DataType|ESUfid]
		public CrossReference getDatatypeDataTypeCrossReference_2_0() { return cDatatypeDataTypeCrossReference_2_0; }
		
		//ESUfid
		public RuleCall getDatatypeDataTypeESUfidParserRuleCall_2_0_1() { return cDatatypeDataTypeESUfidParserRuleCall_2_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//operand=Expression
		public Assignment getOperandAssignment_5() { return cOperandAssignment_5; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_5_0() { return cOperandExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ArithmeticUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ArithmeticUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorArithmeticUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//// Arithmetic Unary Expression
		//ArithmeticUnaryExpression fmlExpr::ArithmeticUnaryExpression:
		//	operator=ArithmeticUnaryOperator operand=UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//operator=ArithmeticUnaryOperator operand=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//operator=ArithmeticUnaryOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//ArithmeticUnaryOperator
		public RuleCall getOperatorArithmeticUnaryOperatorParserRuleCall_0_0() { return cOperatorArithmeticUnaryOperatorParserRuleCall_0_0; }
		
		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}
	public class ArithmeticUnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ArithmeticUnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ArithmeticUnaryOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class LogicalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LogicalUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorNotKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//// Logical Unary Expression
		//LogicalUnaryExpression fmlExpr::LogicalUnaryExpression:
		//	operator=('!' | 'not') operand=UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//operator=('!' | 'not') operand=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//operator=('!' | 'not')
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//('!' | 'not')
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }
		
		//'!'
		public Keyword getOperatorExclamationMarkKeyword_0_0_0() { return cOperatorExclamationMarkKeyword_0_0_0; }
		
		//'not'
		public Keyword getOperatorNotKeyword_0_0_1() { return cOperatorNotKeyword_0_0_1; }
		
		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}
	public class BitwiseUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BitwiseUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorTildeKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//// Logical Unary Expression
		//BitwiseUnaryExpression fmlExpr::BitwiseUnaryExpression:
		//	operator='~' operand=UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//operator='~' operand=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//operator='~'
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//'~'
		public Keyword getOperatorTildeKeyword_0_0() { return cOperatorTildeKeyword_0_0; }
		
		//operand=UnaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//UnaryExpression
		public RuleCall getOperandUnaryExpressionParserRuleCall_1_0() { return cOperandUnaryExpressionParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cValueElementSpecificationTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_1_2_0 = (CrossReference)cElementAssignment_1_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_1_2_0_1 = (RuleCall)cElementNamedElementCrossReference_1_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Assignment cKindAssignment_1_3_0_0 = (Assignment)cGroup_1_3_0.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_1_3_0_0_0 = (RuleCall)cKindAssignment_1_3_0_0.eContents().get(0);
		private final Assignment cArgAssignment_1_3_0_1 = (Assignment)cGroup_1_3_0.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_1_3_0_1_0 = (RuleCall)cArgAssignment_1_3_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_0_2 = (Keyword)cGroup_1_3_0.eContents().get(2);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Assignment cKindAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cKindValueParameterExpressionKindEnumRuleCall_1_3_1_0_0 = (RuleCall)cKindAssignment_1_3_1_0.eContents().get(0);
		private final Assignment cArgAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cArgMixTupleExpressionListParserRuleCall_1_3_1_1_0 = (RuleCall)cArgAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_1_2 = (Keyword)cGroup_1_3_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cValueElementSpecificationTargetAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_2_0 = (CrossReference)cElementAssignment_2_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cAlternatives_2_3.eContents().get(0);
		private final Assignment cKindAssignment_2_3_0_0 = (Assignment)cGroup_2_3_0.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_2_3_0_0_0 = (RuleCall)cKindAssignment_2_3_0_0.eContents().get(0);
		private final Assignment cArgAssignment_2_3_0_1 = (Assignment)cGroup_2_3_0.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_2_3_0_1_0 = (RuleCall)cArgAssignment_2_3_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_0_2 = (Keyword)cGroup_2_3_0.eContents().get(2);
		private final Group cGroup_2_3_1 = (Group)cAlternatives_2_3.eContents().get(1);
		private final Assignment cKindAssignment_2_3_1_0 = (Assignment)cGroup_2_3_1.eContents().get(0);
		private final RuleCall cKindValueParameterExpressionKindEnumRuleCall_2_3_1_0_0 = (RuleCall)cKindAssignment_2_3_1_0.eContents().get(0);
		private final Assignment cArgAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cArgMixTupleExpressionListParserRuleCall_2_3_1_1_0 = (RuleCall)cArgAssignment_2_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_1_2 = (Keyword)cGroup_2_3_1.eContents().get(2);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Action cValueElementSpecificationTargetAction_2_4_0 = (Action)cGroup_2_4.eContents().get(0);
		private final Keyword cFullStopKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Assignment cElementAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_4_2_0 = (CrossReference)cElementAssignment_2_4_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_4_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_4_3 = (Alternatives)cGroup_2_4.eContents().get(3);
		private final Group cGroup_2_4_3_0 = (Group)cAlternatives_2_4_3.eContents().get(0);
		private final Assignment cKindAssignment_2_4_3_0_0 = (Assignment)cGroup_2_4_3_0.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0_0 = (RuleCall)cKindAssignment_2_4_3_0_0.eContents().get(0);
		private final Assignment cArgAssignment_2_4_3_0_1 = (Assignment)cGroup_2_4_3_0.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_2_4_3_0_1_0 = (RuleCall)cArgAssignment_2_4_3_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4_3_0_2 = (Keyword)cGroup_2_4_3_0.eContents().get(2);
		private final Group cGroup_2_4_3_1 = (Group)cAlternatives_2_4_3.eContents().get(1);
		private final Assignment cKindAssignment_2_4_3_1_0 = (Assignment)cGroup_2_4_3_1.eContents().get(0);
		private final RuleCall cKindValueParameterExpressionKindEnumRuleCall_2_4_3_1_0_0 = (RuleCall)cKindAssignment_2_4_3_1_0.eContents().get(0);
		private final Assignment cArgAssignment_2_4_3_1_1 = (Assignment)cGroup_2_4_3_1.eContents().get(1);
		private final RuleCall cArgMixTupleExpressionListParserRuleCall_2_4_3_1_1_0 = (RuleCall)cArgAssignment_2_4_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4_3_1_2 = (Keyword)cGroup_2_4_3_1.eContents().get(2);
		
		//PrimaryExpression fmlExpr::Expression:
		//	BaseExpression ({fmlExpr::ValueElementSpecification.target=current}
		//	'.' //kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	// '(' parameter ',' ... ',' parameter ')'
		//	| kind=ValueParameterExpressionKind
		//	arg=MixTupleExpressionList ')')?)* ({fmlExpr::ValueElementSpecification.target=current}
		//	'->' //kind=ValueArrowFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	// '(' parameter ',' ... ',' parameter ')'
		//	| kind=ValueParameterExpressionKind
		//	arg=MixTupleExpressionList ')')? ({fmlExpr::ValueElementSpecification.target=current}
		//	'.' //kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	// '(' parameter ',' ... ',' parameter ')'
		//	| kind=ValueParameterExpressionKind
		//	arg=MixTupleExpressionList ')')?)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression ({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?)*
		//({fmlExpr::ValueElementSpecification.target=current} '->' //kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?)*)?
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_1_0() { return cValueElementSpecificationTargetAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		////kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_1_2() { return cElementAssignment_1_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_1_2_0() { return cElementNamedElementCrossReference_1_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_1_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_1_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']'
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_1_3_0_0() { return cKindAssignment_1_3_0_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_1_3_0_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_1_3_0_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_1_3_0_1() { return cArgAssignment_1_3_0_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_1_3_0_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_1_3_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_0_2() { return cRightSquareBracketKeyword_1_3_0_2; }
		
		//kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')'
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//kind=ValueParameterExpressionKind
		public Assignment getKindAssignment_1_3_1_0() { return cKindAssignment_1_3_1_0; }
		
		//ValueParameterExpressionKind
		public RuleCall getKindValueParameterExpressionKindEnumRuleCall_1_3_1_0_0() { return cKindValueParameterExpressionKindEnumRuleCall_1_3_1_0_0; }
		
		//arg=MixTupleExpressionList
		public Assignment getArgAssignment_1_3_1_1() { return cArgAssignment_1_3_1_1; }
		
		//MixTupleExpressionList
		public RuleCall getArgMixTupleExpressionListParserRuleCall_1_3_1_1_0() { return cArgMixTupleExpressionListParserRuleCall_1_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_1_2() { return cRightParenthesisKeyword_1_3_1_2; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '->' //kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_0() { return cValueElementSpecificationTargetAction_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		////kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_2() { return cElementAssignment_2_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_2_0() { return cElementNamedElementCrossReference_2_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }
		
		//kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']'
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_2_3_0_0() { return cKindAssignment_2_3_0_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_2_3_0_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_2_3_0_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_2_3_0_1() { return cArgAssignment_2_3_0_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_2_3_0_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_2_3_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3_0_2() { return cRightSquareBracketKeyword_2_3_0_2; }
		
		//kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')'
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }
		
		//kind=ValueParameterExpressionKind
		public Assignment getKindAssignment_2_3_1_0() { return cKindAssignment_2_3_1_0; }
		
		//ValueParameterExpressionKind
		public RuleCall getKindValueParameterExpressionKindEnumRuleCall_2_3_1_0_0() { return cKindValueParameterExpressionKindEnumRuleCall_2_3_1_0_0; }
		
		//arg=MixTupleExpressionList
		public Assignment getArgAssignment_2_3_1_1() { return cArgAssignment_2_3_1_1; }
		
		//MixTupleExpressionList
		public RuleCall getArgMixTupleExpressionListParserRuleCall_2_3_1_1_0() { return cArgMixTupleExpressionListParserRuleCall_2_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3_1_2() { return cRightParenthesisKeyword_2_3_1_2; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_4_0() { return cValueElementSpecificationTargetAction_2_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_4_1() { return cFullStopKeyword_2_4_1; }
		
		////kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_4_2() { return cElementAssignment_2_4_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_4_2_0() { return cElementNamedElementCrossReference_2_4_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		public Alternatives getAlternatives_2_4_3() { return cAlternatives_2_4_3; }
		
		//kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']'
		public Group getGroup_2_4_3_0() { return cGroup_2_4_3_0; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_2_4_3_0_0() { return cKindAssignment_2_4_3_0_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_2_4_3_0_1() { return cArgAssignment_2_4_3_0_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_2_4_3_0_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_2_4_3_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4_3_0_2() { return cRightSquareBracketKeyword_2_4_3_0_2; }
		
		//kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')'
		public Group getGroup_2_4_3_1() { return cGroup_2_4_3_1; }
		
		//kind=ValueParameterExpressionKind
		public Assignment getKindAssignment_2_4_3_1_0() { return cKindAssignment_2_4_3_1_0; }
		
		//ValueParameterExpressionKind
		public RuleCall getKindValueParameterExpressionKindEnumRuleCall_2_4_3_1_0_0() { return cKindValueParameterExpressionKindEnumRuleCall_2_4_3_1_0_0; }
		
		//arg=MixTupleExpressionList
		public Assignment getArgAssignment_2_4_3_1_1() { return cArgAssignment_2_4_3_1_1; }
		
		//MixTupleExpressionList
		public RuleCall getArgMixTupleExpressionListParserRuleCall_2_4_3_1_1_0() { return cArgMixTupleExpressionListParserRuleCall_2_4_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4_3_1_2() { return cRightParenthesisKeyword_2_4_3_1_2; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralReferenceableExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cInvokeExpressionDeprecatedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInstantiationExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BaseExpression fmlExpr::Expression:
		//	LiteralReferenceableExpression
		//	| '(' Expression ')'
		//	| InvokeExpressionDeprecated
		//	| InstantiationExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralReferenceableExpression | '(' Expression ')' | InvokeExpressionDeprecated | InstantiationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralReferenceableExpression
		public RuleCall getLiteralReferenceableExpressionParserRuleCall_0() { return cLiteralReferenceableExpressionParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//InvokeExpressionDeprecated
		public RuleCall getInvokeExpressionDeprecatedParserRuleCall_2() { return cInvokeExpressionDeprecatedParserRuleCall_2; }
		
		//InstantiationExpression
		public RuleCall getInstantiationExpressionParserRuleCall_3() { return cInstantiationExpressionParserRuleCall_3; }
	}
	public class InvokeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InvokeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvokeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInvokeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvokeValueSelectionExpressionParserRuleCall_1_0 = (RuleCall)cInvokeAssignment_1.eContents().get(0);
		
		//// Behavior Invoke Expression
		//InvokeExpression fmlExpr::InvokeExpression:
		//	{fmlExpr::InvokeExpression} invoke=ValueSelectionExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::InvokeExpression} invoke=ValueSelectionExpression
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::InvokeExpression}
		public Action getInvokeExpressionAction_0() { return cInvokeExpressionAction_0; }
		
		//invoke=ValueSelectionExpression
		public Assignment getInvokeAssignment_1() { return cInvokeAssignment_1; }
		
		//ValueSelectionExpression
		public RuleCall getInvokeValueSelectionExpressionParserRuleCall_1_0() { return cInvokeValueSelectionExpressionParserRuleCall_1_0; }
	}
	public class InvokeExpressionDeprecatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InvokeExpressionDeprecated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvokeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cInvokeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvokeLiteralReferenceElementParserRuleCall_3_0 = (RuleCall)cInvokeAssignment_3.eContents().get(0);
		private final Assignment cArgsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgsExpressionParserRuleCall_4_0 = (RuleCall)cArgsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InvokeExpressionDeprecated fmlExpr::InvokeExpression:
		//	{fmlExpr::InvokeExpression}
		//	'(:' args+=Expression invoke=LiteralReferenceElement args+=Expression* ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::InvokeExpression} '(:' args+=Expression invoke=LiteralReferenceElement args+=Expression* ')'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::InvokeExpression}
		public Action getInvokeExpressionAction_0() { return cInvokeExpressionAction_0; }
		
		//'(:'
		public Keyword getLeftParenthesisColonKeyword_1() { return cLeftParenthesisColonKeyword_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }
		
		//invoke=LiteralReferenceElement
		public Assignment getInvokeAssignment_3() { return cInvokeAssignment_3; }
		
		//LiteralReferenceElement
		public RuleCall getInvokeLiteralReferenceElementParserRuleCall_3_0() { return cInvokeLiteralReferenceElementParserRuleCall_3_0; }
		
		//args+=Expression*
		public Assignment getArgsAssignment_4() { return cArgsAssignment_4; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_4_0() { return cArgsExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InstantiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InstantiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstantiationExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceDynamicInstanceSpecificationParserRuleCall_1_0 = (RuleCall)cInstanceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InstantiationExpression fmlExpr::InstantiationExpression:
		//	{fmlExpr::InstantiationExpression} instance=DynamicInstanceSpecification ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::InstantiationExpression} instance=DynamicInstanceSpecification ';'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::InstantiationExpression}
		public Action getInstantiationExpressionAction_0() { return cInstantiationExpressionAction_0; }
		
		//instance=DynamicInstanceSpecification
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }
		
		//DynamicInstanceSpecification
		public RuleCall getInstanceDynamicInstanceSpecificationParserRuleCall_1_0() { return cInstanceDynamicInstanceSpecificationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DynamicInstanceSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DynamicInstanceSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstanceMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelMachineCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelMachineESIdentifierParserRuleCall_2_0_1 = (RuleCall)cModelMachineCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cSlotAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final RuleCall cSlotSlotParameterParserRuleCall_3_0_1_0_0 = (RuleCall)cSlotAssignment_3_0_1_0.eContents().get(0);
		private final Group cGroup_3_0_1_1 = (Group)cGroup_3_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cSlotAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final RuleCall cSlotSlotParameterParserRuleCall_3_0_1_1_1_0 = (RuleCall)cSlotAssignment_3_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Assignment cSlotAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cSlotSlotPropertyParserRuleCall_3_1_1_0_0 = (RuleCall)cSlotAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//DynamicInstanceSpecification fmlInfra::InstanceMachine:
		//	{fmlInfra::InstanceMachine}
		//	'new' model=[fmlInfra::Machine|ESIdentifier] ('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')'
		//	| '{' (slot+=SlotProperty ';')* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlInfra::InstanceMachine} 'new' model=[fmlInfra::Machine|ESIdentifier] ('(' (slot+=SlotParameter (','
		//slot+=SlotParameter)*)? ')' | '{' (slot+=SlotProperty ';')* '}')?
		public Group getGroup() { return cGroup; }
		
		//{fmlInfra::InstanceMachine}
		public Action getInstanceMachineAction_0() { return cInstanceMachineAction_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//model=[fmlInfra::Machine|ESIdentifier]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//[fmlInfra::Machine|ESIdentifier]
		public CrossReference getModelMachineCrossReference_2_0() { return cModelMachineCrossReference_2_0; }
		
		//ESIdentifier
		public RuleCall getModelMachineESIdentifierParserRuleCall_2_0_1() { return cModelMachineESIdentifierParserRuleCall_2_0_1; }
		
		//('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')' | '{' (slot+=SlotProperty ';')* '}')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//(slot+=SlotParameter (',' slot+=SlotParameter)*)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//slot+=SlotParameter
		public Assignment getSlotAssignment_3_0_1_0() { return cSlotAssignment_3_0_1_0; }
		
		//SlotParameter
		public RuleCall getSlotSlotParameterParserRuleCall_3_0_1_0_0() { return cSlotSlotParameterParserRuleCall_3_0_1_0_0; }
		
		//(',' slot+=SlotParameter)*
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_0_1_1_0() { return cCommaKeyword_3_0_1_1_0; }
		
		//slot+=SlotParameter
		public Assignment getSlotAssignment_3_0_1_1_1() { return cSlotAssignment_3_0_1_1_1; }
		
		//SlotParameter
		public RuleCall getSlotSlotParameterParserRuleCall_3_0_1_1_1_0() { return cSlotSlotParameterParserRuleCall_3_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }
		
		//'{' (slot+=SlotProperty ';')* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//(slot+=SlotProperty ';')*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//slot+=SlotProperty
		public Assignment getSlotAssignment_3_1_1_0() { return cSlotAssignment_3_1_1_0; }
		
		//SlotProperty
		public RuleCall getSlotSlotPropertyParserRuleCall_3_1_1_0_0() { return cSlotSlotPropertyParserRuleCall_3_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_1_1() { return cSemicolonKeyword_3_1_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class TupleParameterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TupleParameterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMixTupleExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Tuple Expression
		//TupleParameterExpression fmlExpr::TupleExpression:
		//	'(' MixTupleExpressionList ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' MixTupleExpressionList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//MixTupleExpressionList
		public RuleCall getMixTupleExpressionListParserRuleCall_1() { return cMixTupleExpressionListParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MixTupleExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.MixTupleExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMixTupleExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueNamedExpressionParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0_0 = (RuleCall)cValueAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValueNamedExpressionParserRuleCall_2_1_0_1 = (RuleCall)cValueAlternatives_2_1_0.eContents().get(1);
		
		//MixTupleExpressionList fmlExpr::MixTupleExpression:
		//	{fmlExpr::MixTupleExpression} value+=(Expression | NamedExpression) (',' value+=(Expression | NamedExpression))*
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::MixTupleExpression} value+=(Expression | NamedExpression) (',' value+=(Expression | NamedExpression))*
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::MixTupleExpression}
		public Action getMixTupleExpressionAction_0() { return cMixTupleExpressionAction_0; }
		
		//value+=(Expression | NamedExpression)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//(Expression | NamedExpression)
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0_0() { return cValueExpressionParserRuleCall_1_0_0; }
		
		//NamedExpression
		public RuleCall getValueNamedExpressionParserRuleCall_1_0_1() { return cValueNamedExpressionParserRuleCall_1_0_1; }
		
		//(',' value+=(Expression | NamedExpression))*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//value+=(Expression | NamedExpression)
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//(Expression | NamedExpression)
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0_0() { return cValueExpressionParserRuleCall_2_1_0_0; }
		
		//NamedExpression
		public RuleCall getValueNamedExpressionParserRuleCall_2_1_0_1() { return cValueNamedExpressionParserRuleCall_2_1_0_1; }
	}
	public class PositionalTupleExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PositionalTupleExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		////// At least one NamedExpression
		////FormalMixTupleExpressionList returns fmlExpr::MixTupleExpression
		////	: {fmlExpr::MixTupleExpression}
		////		( value+=Expression  ( ',' value+=Expression )*
		////			( ',' value+=NamedExpression )
		////		| value+=NamedExpression
		////		)
		////		( ',' value+=( Expression | NamedExpression ) )*
		////	;
		////
		////// NamedExpression only at the end
		////EndingMixTupleExpressionList returns fmlExpr::MixTupleExpression
		////	: {fmlExpr::MixTupleExpression}
		////		( value+=Expression  ( ',' value+=Expression )*
		////		| value+=NamedExpression
		////		)
		////		( ',' value+=NamedExpression )*
		////	;
		////
		////
		////NamedTupleExpressionList returns fmlExpr::NamedTupleExpression
		////	: value+=NamedExpression ( ',' value+=NamedExpression )*
		////	;
		//PositionalTupleExpressionList fmlExpr::PositionalTupleExpression:
		//	value+=Expression (',' value+=Expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//value+=Expression (',' value+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//value+=Expression
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_0() { return cValueExpressionParserRuleCall_0_0; }
		
		//(',' value+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//value+=Expression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_0() { return cValueExpressionParserRuleCall_1_1_0; }
	}
	public class NamedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.NamedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLIA_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//NamedExpression fmlExpr::NamedExpression:
		//	name=XLIA_ID (':' | '=>' | '<-') expression=Expression
		@Override public ParserRule getRule() { return rule; }
		
		////target=[fmlCommon::NamedElement|ESIdentifier]
		//name=XLIA_ID (':' | '=>' | '<-') expression=Expression
		public Group getGroup() { return cGroup; }
		
		////target=[fmlCommon::NamedElement|ESIdentifier]
		//name=XLIA_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLIA_ID
		public RuleCall getNameXLIA_IDTerminalRuleCall_0_0() { return cNameXLIA_IDTerminalRuleCall_0_0; }
		
		//(':' | '=>' | '<-')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_2() { return cLessThanSignHyphenMinusKeyword_1_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralReferenceableExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////NotificationComExpression returns fmlExpr::Expression
		////	: { fmlExpr::Expression }
		////		symbol=( 'present' | 'absent' )  operand+=Expression
		////	;
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralExpression fmlExpr::LiteralExpression:
		//	LiteralTerminalExpression
		//	| LiteralReferenceableExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralTerminalExpression | LiteralReferenceableExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralTerminalExpression
		public RuleCall getLiteralTerminalExpressionParserRuleCall_0() { return cLiteralTerminalExpressionParserRuleCall_0; }
		
		//LiteralReferenceableExpression
		public RuleCall getLiteralReferenceableExpressionParserRuleCall_1() { return cLiteralReferenceableExpressionParserRuleCall_1; }
	}
	public class LiteralReferenceableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralReferenceableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralCollectionExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralReferenceableExpression fmlExpr::LiteralExpression:
		//	LiteralCollectionExpression
		//	| LiteralReferenceExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralCollectionExpression | LiteralReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralCollectionExpression
		public RuleCall getLiteralCollectionExpressionParserRuleCall_0() { return cLiteralCollectionExpressionParserRuleCall_0; }
		
		//LiteralReferenceExpression
		public RuleCall getLiteralReferenceExpressionParserRuleCall_1() { return cLiteralReferenceExpressionParserRuleCall_1; }
	}
	public class LiteralTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralIntegerExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralRationalExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralFloatExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralCharacterExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLiteralStringExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLiteralNullExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//LiteralTerminalExpression fmlExpr::LiteralExpression:
		//	LiteralBooleanExpression
		//	| LiteralIntegerExpression
		//	| LiteralRationalExpression
		//	| LiteralFloatExpression
		//	| LiteralCharacterExpression
		//	| LiteralStringExpression
		//	| LiteralNullExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralBooleanExpression | LiteralIntegerExpression | LiteralRationalExpression | LiteralFloatExpression |
		//LiteralCharacterExpression | LiteralStringExpression | LiteralNullExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralBooleanExpression
		public RuleCall getLiteralBooleanExpressionParserRuleCall_0() { return cLiteralBooleanExpressionParserRuleCall_0; }
		
		//LiteralIntegerExpression
		public RuleCall getLiteralIntegerExpressionParserRuleCall_1() { return cLiteralIntegerExpressionParserRuleCall_1; }
		
		//LiteralRationalExpression
		public RuleCall getLiteralRationalExpressionParserRuleCall_2() { return cLiteralRationalExpressionParserRuleCall_2; }
		
		//LiteralFloatExpression
		public RuleCall getLiteralFloatExpressionParserRuleCall_3() { return cLiteralFloatExpressionParserRuleCall_3; }
		
		//LiteralCharacterExpression
		public RuleCall getLiteralCharacterExpressionParserRuleCall_4() { return cLiteralCharacterExpressionParserRuleCall_4; }
		
		//LiteralStringExpression
		public RuleCall getLiteralStringExpressionParserRuleCall_5() { return cLiteralStringExpressionParserRuleCall_5; }
		
		//LiteralNullExpression
		public RuleCall getLiteralNullExpressionParserRuleCall_6() { return cLiteralNullExpressionParserRuleCall_6; }
	}
	public class LiteralBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Boolean / Numeric Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralBooleanExpression fmlExpr::LiteralBooleanExpression:
		//	{fmlExpr::LiteralBooleanExpression} value=EBoolean
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralBooleanExpression} value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralBooleanExpression}
		public Action getLiteralBooleanExpressionAction_0() { return cLiteralBooleanExpressionAction_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}
	public class LiteralIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralIntegerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralIntegerExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntegerParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralIntegerExpression fmlExpr::LiteralIntegerExpression:
		//	{fmlExpr::LiteralIntegerExpression} value=EInteger
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralIntegerExpression} value=EInteger
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralIntegerExpression}
		public Action getLiteralIntegerExpressionAction_0() { return cLiteralIntegerExpressionAction_0; }
		
		//value=EInteger
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInteger
		public RuleCall getValueEIntegerParserRuleCall_1_0() { return cValueEIntegerParserRuleCall_1_0; }
	}
	public class LiteralRationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralRationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralRationalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumeratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumeratorEIntegerParserRuleCall_1_0 = (RuleCall)cNumeratorAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDenominatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDenominatorEIntegerParserRuleCall_3_0 = (RuleCall)cDenominatorAssignment_3.eContents().get(0);
		
		//LiteralRationalExpression fmlExpr::LiteralRationalExpression:
		//	{fmlExpr::LiteralRationalExpression} numerator=EInteger '/' denominator=EInteger
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralRationalExpression} numerator=EInteger '/' denominator=EInteger
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralRationalExpression}
		public Action getLiteralRationalExpressionAction_0() { return cLiteralRationalExpressionAction_0; }
		
		//numerator=EInteger
		public Assignment getNumeratorAssignment_1() { return cNumeratorAssignment_1; }
		
		//EInteger
		public RuleCall getNumeratorEIntegerParserRuleCall_1_0() { return cNumeratorEIntegerParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//denominator=EInteger
		public Assignment getDenominatorAssignment_3() { return cDenominatorAssignment_3; }
		
		//EInteger
		public RuleCall getDenominatorEIntegerParserRuleCall_3_0() { return cDenominatorEIntegerParserRuleCall_3_0; }
	}
	public class LiteralFloatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralFloatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralFloatExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralFloatExpression fmlExpr::LiteralFloatExpression:
		//	{fmlExpr::LiteralFloatExpression} value=EDouble
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralFloatExpression} value=EDouble
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralFloatExpression}
		public Action getLiteralFloatExpressionAction_0() { return cLiteralFloatExpressionAction_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class LiteralCharacterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralCharacterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralCharacterExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueECharacterParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Character / String Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralCharacterExpression fmlExpr::LiteralCharacterExpression:
		//	{fmlExpr::LiteralCharacterExpression} value=ECharacter
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralCharacterExpression} value=ECharacter
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralCharacterExpression}
		public Action getLiteralCharacterExpressionAction_0() { return cLiteralCharacterExpressionAction_0; }
		
		//value=ECharacter
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ECharacter
		public RuleCall getValueECharacterParserRuleCall_1_0() { return cValueECharacterParserRuleCall_1_0; }
	}
	public class LiteralStringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralStringExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralStringExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralStringExpression fmlExpr::LiteralStringExpression:
		//	{fmlExpr::LiteralStringExpression} value=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralStringExpression} value=EString
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralStringExpression}
		public Action getLiteralStringExpressionAction_0() { return cLiteralStringExpressionAction_0; }
		
		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}
	public class LiteralNullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralNullExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralNullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cNullKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cNullKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralNullExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cNullKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cNullKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeDataTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Null Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralNullExpression fmlExpr::LiteralNullExpression:
		//	{fmlExpr::LiteralNullExpression} ('null' | '$null') | {fmlExpr::LiteralNullExpression} ('null<' | '$null<')
		//	type=DataType '>'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralNullExpression} ('null' | '$null') | {fmlExpr::LiteralNullExpression} ('null<' | '$null<')
		//type=DataType '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{fmlExpr::LiteralNullExpression} ('null' | '$null')
		public Group getGroup_0() { return cGroup_0; }
		
		//{fmlExpr::LiteralNullExpression}
		public Action getLiteralNullExpressionAction_0_0() { return cLiteralNullExpressionAction_0_0; }
		
		//('null' | '$null')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'null'
		public Keyword getNullKeyword_0_1_0() { return cNullKeyword_0_1_0; }
		
		//'$null'
		public Keyword getNullKeyword_0_1_1() { return cNullKeyword_0_1_1; }
		
		//{fmlExpr::LiteralNullExpression} ('null<' | '$null<') type=DataType '>'
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::LiteralNullExpression}
		public Action getLiteralNullExpressionAction_1_0() { return cLiteralNullExpressionAction_1_0; }
		
		//('null<' | '$null<')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'null<'
		public Keyword getNullKeyword_1_1_0() { return cNullKeyword_1_1_0; }
		
		//'$null<'
		public Keyword getNullKeyword_1_1_1() { return cNullKeyword_1_1_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_2_0() { return cTypeDataTypeParserRuleCall_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class LiteralCollectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralCollectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralCollectionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDatatypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDatatypeDataTypeParserRuleCall_1_1_0 = (RuleCall)cDatatypeAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_3_0_0_0 = (RuleCall)cValueAssignment_3_0_0.eContents().get(0);
		private final Assignment cValueAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueNamedExpressionParserRuleCall_3_0_1_0 = (RuleCall)cValueAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cValueAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cValueAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cValueNamedExpressionParserRuleCall_3_1_1_1_0 = (RuleCall)cValueAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Collection Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralCollectionExpression fmlExpr::LiteralCollectionExpression:
		//	{fmlExpr::LiteralCollectionExpression} ('<' datatype=DataType '>')?
		//	'{' ((value+=Expression | value+=NamedExpression) (',' (value+=Expression | value+=NamedExpression))*)? '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralCollectionExpression} ('<' datatype=DataType '>')? '{' ((value+=Expression | value+=NamedExpression)
		//(',' (value+=Expression | value+=NamedExpression))*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralCollectionExpression}
		public Action getLiteralCollectionExpressionAction_0() { return cLiteralCollectionExpressionAction_0; }
		
		//('<' datatype=DataType '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//datatype=DataType
		public Assignment getDatatypeAssignment_1_1() { return cDatatypeAssignment_1_1; }
		
		//DataType
		public RuleCall getDatatypeDataTypeParserRuleCall_1_1_0() { return cDatatypeDataTypeParserRuleCall_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//((value+=Expression | value+=NamedExpression) (',' (value+=Expression | value+=NamedExpression))*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(value+=Expression | value+=NamedExpression)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//value+=Expression
		public Assignment getValueAssignment_3_0_0() { return cValueAssignment_3_0_0; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0_0_0() { return cValueExpressionParserRuleCall_3_0_0_0; }
		
		//value+=NamedExpression
		public Assignment getValueAssignment_3_0_1() { return cValueAssignment_3_0_1; }
		
		//NamedExpression
		public RuleCall getValueNamedExpressionParserRuleCall_3_0_1_0() { return cValueNamedExpressionParserRuleCall_3_0_1_0; }
		
		//(',' (value+=Expression | value+=NamedExpression))*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//(value+=Expression | value+=NamedExpression)
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//value+=Expression
		public Assignment getValueAssignment_3_1_1_0() { return cValueAssignment_3_1_1_0; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_1_1_0_0() { return cValueExpressionParserRuleCall_3_1_1_0_0; }
		
		//value+=NamedExpression
		public Assignment getValueAssignment_3_1_1_1() { return cValueAssignment_3_1_1_1; }
		
		//NamedExpression
		public RuleCall getValueNamedExpressionParserRuleCall_3_1_1_1_0() { return cValueNamedExpressionParserRuleCall_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LiteralReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralReferenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralReferenceElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralReferenceVariableContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralReferenceMachineContextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralEnvExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Literal Reference Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralReferenceExpression fmlExpr::LiteralReferenceExpression:
		//	LiteralReferenceElement
		//	| LiteralReferenceVariableContext
		//	| LiteralReferenceMachineContext
		//	| LiteralEnvExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralReferenceElement | LiteralReferenceVariableContext | LiteralReferenceMachineContext | LiteralEnvExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralReferenceElement
		public RuleCall getLiteralReferenceElementParserRuleCall_0() { return cLiteralReferenceElementParserRuleCall_0; }
		
		//LiteralReferenceVariableContext
		public RuleCall getLiteralReferenceVariableContextParserRuleCall_1() { return cLiteralReferenceVariableContextParserRuleCall_1; }
		
		//LiteralReferenceMachineContext
		public RuleCall getLiteralReferenceMachineContextParserRuleCall_2() { return cLiteralReferenceMachineContextParserRuleCall_2; }
		
		//LiteralEnvExpression
		public RuleCall getLiteralEnvExpressionParserRuleCall_3() { return cLiteralEnvExpressionParserRuleCall_3; }
	}
	public class LiteralReferenceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralReferenceElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralReferenceElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueNamedElementCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueNamedElementESIdentifierParserRuleCall_1_0_1 = (RuleCall)cValueNamedElementCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cKindAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_2_0_0_0 = (RuleCall)cKindAssignment_2_0_0.eContents().get(0);
		private final Assignment cArgAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_2_0_1_0 = (RuleCall)cArgAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cKindAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cKindValueParameterExpressionKindEnumRuleCall_2_1_0_0 = (RuleCall)cKindAssignment_2_1_0.eContents().get(0);
		private final Assignment cArgAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgMixTupleExpressionListParserRuleCall_2_1_1_0 = (RuleCall)cArgAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//LiteralReferenceElement fmlExpr::LiteralReferenceElement:
		//	{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	// '(' parameter ',' ... ',' parameter ')'
		//	| kind=ValueParameterExpressionKind
		//	arg=MixTupleExpressionList ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralReferenceElement}
		public Action getLiteralReferenceElementAction_0() { return cLiteralReferenceElementAction_0; }
		
		//value=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getValueNamedElementCrossReference_1_0() { return cValueNamedElementCrossReference_1_0; }
		
		//ESIdentifier
		public RuleCall getValueNamedElementESIdentifierParserRuleCall_1_0_1() { return cValueNamedElementESIdentifierParserRuleCall_1_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' // '(' parameter ',' ... ',' parameter ')'
		//| kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_2_0_0() { return cKindAssignment_2_0_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_2_0_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_2_0_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_2_0_1() { return cArgAssignment_2_0_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_2_0_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_2_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_2() { return cRightSquareBracketKeyword_2_0_2; }
		
		//kind=ValueParameterExpressionKind arg=MixTupleExpressionList ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//kind=ValueParameterExpressionKind
		public Assignment getKindAssignment_2_1_0() { return cKindAssignment_2_1_0; }
		
		//ValueParameterExpressionKind
		public RuleCall getKindValueParameterExpressionKindEnumRuleCall_2_1_0_0() { return cKindValueParameterExpressionKindEnumRuleCall_2_1_0_0; }
		
		//arg=MixTupleExpressionList
		public Assignment getArgAssignment_2_1_1() { return cArgAssignment_2_1_1; }
		
		//MixTupleExpressionList
		public RuleCall getArgMixTupleExpressionListParserRuleCall_2_1_1_0() { return cArgMixTupleExpressionListParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class LiteralPureReferenceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralPureReferenceElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralReferenceElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueNamedElementCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueNamedElementESIdentifierParserRuleCall_1_0_1 = (RuleCall)cValueNamedElementCrossReference_1_0.eContents().get(1);
		
		//LiteralPureReferenceElement fmlExpr::LiteralReferenceElement:
		//	{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier]
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier]
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralReferenceElement}
		public Action getLiteralReferenceElementAction_0() { return cLiteralReferenceElementAction_0; }
		
		//value=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getValueNamedElementCrossReference_1_0() { return cValueNamedElementCrossReference_1_0; }
		
		//ESIdentifier
		public RuleCall getValueNamedElementESIdentifierParserRuleCall_1_0_1() { return cValueNamedElementESIdentifierParserRuleCall_1_0_1; }
	}
	public class LiteralReferenceVariableContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralReferenceVariableContext");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralTimeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralTimeDeltaExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralReferenceVariableContext fmlExpr::LiteralReferenceExpression:
		//	LiteralTimeExpression
		//	| LiteralTimeDeltaExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralTimeExpression | LiteralTimeDeltaExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralTimeExpression
		public RuleCall getLiteralTimeExpressionParserRuleCall_0() { return cLiteralTimeExpressionParserRuleCall_0; }
		
		//LiteralTimeDeltaExpression
		public RuleCall getLiteralTimeDeltaExpressionParserRuleCall_1() { return cLiteralTimeDeltaExpressionParserRuleCall_1; }
	}
	public class LiteralTimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralTimeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralTimeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralTimeExpression fmlExpr::LiteralTimeExpression:
		//	{fmlExpr::LiteralTimeExpression} '$time'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralTimeExpression} '$time'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralTimeExpression}
		public Action getLiteralTimeExpressionAction_0() { return cLiteralTimeExpressionAction_0; }
		
		//'$time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
	}
	public class LiteralTimeDeltaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralTimeDeltaExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralTimeDeltaExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeltaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralTimeDeltaExpression fmlExpr::LiteralTimeDeltaExpression:
		//	{fmlExpr::LiteralTimeDeltaExpression} '$delta'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralTimeDeltaExpression} '$delta'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralTimeDeltaExpression}
		public Action getLiteralTimeDeltaExpressionAction_0() { return cLiteralTimeDeltaExpressionAction_0; }
		
		//'$delta'
		public Keyword getDeltaKeyword_1() { return cDeltaKeyword_1; }
	}
	public class LiteralReferenceMachineContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralReferenceMachineContext");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralThisExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralSelfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParentExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralSuperExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralSystemExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLiteralEnvExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//LiteralReferenceMachineContext fmlExpr::LiteralReferenceExpression:
		//	LiteralThisExpression
		//	| LiteralSelfExpression
		//	| LiteralParentExpression
		//	| LiteralSuperExpression
		//	| LiteralSystemExpression
		//	| LiteralEnvExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralThisExpression | LiteralSelfExpression | LiteralParentExpression | LiteralSuperExpression |
		//LiteralSystemExpression | LiteralEnvExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralThisExpression
		public RuleCall getLiteralThisExpressionParserRuleCall_0() { return cLiteralThisExpressionParserRuleCall_0; }
		
		//LiteralSelfExpression
		public RuleCall getLiteralSelfExpressionParserRuleCall_1() { return cLiteralSelfExpressionParserRuleCall_1; }
		
		//LiteralParentExpression
		public RuleCall getLiteralParentExpressionParserRuleCall_2() { return cLiteralParentExpressionParserRuleCall_2; }
		
		//LiteralSuperExpression
		public RuleCall getLiteralSuperExpressionParserRuleCall_3() { return cLiteralSuperExpressionParserRuleCall_3; }
		
		//LiteralSystemExpression
		public RuleCall getLiteralSystemExpressionParserRuleCall_4() { return cLiteralSystemExpressionParserRuleCall_4; }
		
		//LiteralEnvExpression
		public RuleCall getLiteralEnvExpressionParserRuleCall_5() { return cLiteralEnvExpressionParserRuleCall_5; }
	}
	public class LiteralThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralThisExpression fmlExpr::LiteralThisExpression:
		//	{fmlExpr::LiteralThisExpression} '$this'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralThisExpression} '$this'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralThisExpression}
		public Action getLiteralThisExpressionAction_0() { return cLiteralThisExpressionAction_0; }
		
		//'$this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class LiteralSelfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralSelfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralSelfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralSelfExpression fmlExpr::LiteralSelfExpression:
		//	{fmlExpr::LiteralSelfExpression} '$self'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralSelfExpression} '$self'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralSelfExpression}
		public Action getLiteralSelfExpressionAction_0() { return cLiteralSelfExpressionAction_0; }
		
		//'$self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class LiteralParentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralParentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralParentExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralParentExpression fmlExpr::LiteralParentExpression:
		//	{fmlExpr::LiteralParentExpression} '$parent'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralParentExpression} '$parent'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralParentExpression}
		public Action getLiteralParentExpressionAction_0() { return cLiteralParentExpressionAction_0; }
		
		//'$parent'
		public Keyword getParentKeyword_1() { return cParentKeyword_1; }
	}
	public class LiteralSuperExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralSuperExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralSuperExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralSuperExpression fmlExpr::LiteralSuperExpression:
		//	{fmlExpr::LiteralSuperExpression} '$super'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralSuperExpression} '$super'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralSuperExpression}
		public Action getLiteralSuperExpressionAction_0() { return cLiteralSuperExpressionAction_0; }
		
		//'$super'
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}
	public class LiteralSystemExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralSystemExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralSystemExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LiteralSystemExpression fmlExpr::LiteralSystemExpression:
		//	{fmlExpr::LiteralSystemExpression} '$system'
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralSystemExpression} '$system'
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralSystemExpression}
		public Action getLiteralSystemExpressionAction_0() { return cLiteralSystemExpressionAction_0; }
		
		//'$system'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
	}
	public class LiteralEnvExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralEnvExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralEnvExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEnvKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cEnvKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//LiteralEnvExpression fmlExpr::LiteralEnvExpression:
		//	{fmlExpr::LiteralEnvExpression} ('$env' | 'env')
		@Override public ParserRule getRule() { return rule; }
		
		//{fmlExpr::LiteralEnvExpression} ('$env' | 'env')
		public Group getGroup() { return cGroup; }
		
		//{fmlExpr::LiteralEnvExpression}
		public Action getLiteralEnvExpressionAction_0() { return cLiteralEnvExpressionAction_0; }
		
		//('$env' | 'env')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'$env'
		public Keyword getEnvKeyword_1_0() { return cEnvKeyword_1_0; }
		
		//'env'
		public Keyword getEnvKeyword_1_1() { return cEnvKeyword_1_1; }
	}
	public class LiteralPureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.LiteralPureReferenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralPureReferenceElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralReferenceMachineContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////
		//// Value Element Specification Expression Rules
		//////////////////////////////////////////////////////////////////////////////////
		//LiteralPureReferenceExpression fmlExpr::LiteralReferenceExpression:
		//	LiteralPureReferenceElement
		//	| LiteralReferenceMachineContext
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralPureReferenceElement | LiteralReferenceMachineContext
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralPureReferenceElement
		public RuleCall getLiteralPureReferenceElementParserRuleCall_0() { return cLiteralPureReferenceElementParserRuleCall_0; }
		
		//LiteralReferenceMachineContext
		public RuleCall getLiteralReferenceMachineContextParserRuleCall_1() { return cLiteralReferenceMachineContextParserRuleCall_1; }
	}
	public class ValueSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralReferenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cValueElementSpecificationTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_1_2_0 = (CrossReference)cElementAssignment_1_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_1_2_0_1 = (RuleCall)cElementNamedElementCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cKindAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_1_3_0_0 = (RuleCall)cKindAssignment_1_3_0.eContents().get(0);
		private final Assignment cArgAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_1_3_1_0 = (RuleCall)cArgAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cValueElementSpecificationTargetAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_2_0 = (CrossReference)cElementAssignment_2_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cKindAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_2_3_0_0 = (RuleCall)cKindAssignment_2_3_0.eContents().get(0);
		private final Assignment cArgAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_2_3_1_0 = (RuleCall)cArgAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Action cValueElementSpecificationTargetAction_2_4_0 = (Action)cGroup_2_4.eContents().get(0);
		private final Keyword cFullStopKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Assignment cElementAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_4_2_0 = (CrossReference)cElementAssignment_2_4_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_4_2_0.eContents().get(1);
		private final Group cGroup_2_4_3 = (Group)cGroup_2_4.eContents().get(3);
		private final Assignment cKindAssignment_2_4_3_0 = (Assignment)cGroup_2_4_3.eContents().get(0);
		private final RuleCall cKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0 = (RuleCall)cKindAssignment_2_4_3_0.eContents().get(0);
		private final Assignment cArgAssignment_2_4_3_1 = (Assignment)cGroup_2_4_3.eContents().get(1);
		private final RuleCall cArgPositionalTupleExpressionListParserRuleCall_2_4_3_1_0 = (RuleCall)cArgAssignment_2_4_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4_3_2 = (Keyword)cGroup_2_4_3.eContents().get(2);
		
		//ValueSelectionExpression fmlExpr::Expression:
		//	LiteralReferenceExpression ({fmlExpr::ValueElementSpecification.target=current}
		//	'.' //kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	//			// TODO '(' parameter ',' ... ',' parameter ')'
		//	//			| kind=ValueParameterExpressionKind
		//	//				arg=MixTupleExpressionList  ')'
		//)?)* ({fmlExpr::ValueElementSpecification.target=current}
		//	'->' //kind=ValueArrowFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	//			// TODO '(' parameter ',' ... ',' parameter ')'
		//	//			| kind=ValueParameterExpressionKind
		//	//				arg=MixTupleExpressionList  ')'
		//)? ({fmlExpr::ValueElementSpecification.target=current}
		//	'.' //kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
		//	arg=PositionalTupleExpressionList ']'
		//	//				// TODO '(' parameter ',' ... ',' parameter ')'
		//	//				| kind=ValueParameterExpressionKind
		//	//					arg=MixTupleExpressionList  ')'
		//)?)*)?
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralReferenceExpression ({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)?)* ({fmlExpr::ValueElementSpecification.target=current} '->' //kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)? ({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //				// TODO '(' parameter ',' ... ',' parameter ')'
		////				| kind=ValueParameterExpressionKind
		////					arg=MixTupleExpressionList  ')'
		//)?)*)?
		public Group getGroup() { return cGroup; }
		
		//LiteralReferenceExpression
		public RuleCall getLiteralReferenceExpressionParserRuleCall_0() { return cLiteralReferenceExpressionParserRuleCall_0; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_1_0() { return cValueElementSpecificationTargetAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		////kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_1_2() { return cElementAssignment_1_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_1_2_0() { return cElementNamedElementCrossReference_1_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_1_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_1_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_1_3_0() { return cKindAssignment_1_3_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_1_3_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_1_3_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_1_3_1() { return cArgAssignment_1_3_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_1_3_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '->' //kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)? ({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //				// TODO '(' parameter ',' ... ',' parameter ')'
		////				| kind=ValueParameterExpressionKind
		////					arg=MixTupleExpressionList  ')'
		//)?)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_0() { return cValueElementSpecificationTargetAction_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		////kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_2() { return cElementAssignment_2_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_2_0() { return cElementNamedElementCrossReference_2_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //			// TODO '(' parameter ',' ... ',' parameter ')'
		////			| kind=ValueParameterExpressionKind
		////				arg=MixTupleExpressionList  ')'
		//)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_2_3_0() { return cKindAssignment_2_3_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_2_3_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_2_3_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_2_3_1() { return cArgAssignment_2_3_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_2_3_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3_2() { return cRightSquareBracketKeyword_2_3_2; }
		
		//({fmlExpr::ValueElementSpecification.target=current} '.' //kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //				// TODO '(' parameter ',' ... ',' parameter ')'
		////				| kind=ValueParameterExpressionKind
		////					arg=MixTupleExpressionList  ')'
		//)?)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_4_0() { return cValueElementSpecificationTargetAction_2_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_4_1() { return cFullStopKeyword_2_4_1; }
		
		////kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_4_2() { return cElementAssignment_2_4_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_4_2_0() { return cElementNamedElementCrossReference_2_4_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_4_2_0_1; }
		
		//(kind=ValueIndexExpressionKind arg=PositionalTupleExpressionList ']' //				// TODO '(' parameter ',' ... ',' parameter ')'
		////				| kind=ValueParameterExpressionKind
		////					arg=MixTupleExpressionList  ')'
		//)?
		public Group getGroup_2_4_3() { return cGroup_2_4_3; }
		
		//kind=ValueIndexExpressionKind
		public Assignment getKindAssignment_2_4_3_0() { return cKindAssignment_2_4_3_0; }
		
		//ValueIndexExpressionKind
		public RuleCall getKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0() { return cKindValueIndexExpressionKindEnumRuleCall_2_4_3_0_0; }
		
		//arg=PositionalTupleExpressionList
		public Assignment getArgAssignment_2_4_3_1() { return cArgAssignment_2_4_3_1; }
		
		//PositionalTupleExpressionList
		public RuleCall getArgPositionalTupleExpressionListParserRuleCall_2_4_3_1_0() { return cArgPositionalTupleExpressionListParserRuleCall_2_4_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4_3_2() { return cRightSquareBracketKeyword_2_4_3_2; }
	}
	public class ValuePureNamedMachineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValuePureNamedMachineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralPureReferenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cValueElementSpecificationTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cKindAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKindValueDotFieldExpressionKindEnumRuleCall_1_1_0 = (RuleCall)cKindAssignment_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_1_2_0 = (CrossReference)cElementAssignment_1_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_1_2_0_1 = (RuleCall)cElementNamedElementCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cValueElementSpecificationTargetAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cKindAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKindValueArrowFieldExpressionKindEnumRuleCall_2_1_0 = (RuleCall)cKindAssignment_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_2_0 = (CrossReference)cElementAssignment_2_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Action cValueElementSpecificationTargetAction_2_3_0 = (Action)cGroup_2_3.eContents().get(0);
		private final Assignment cKindAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cKindValueDotFieldExpressionKindEnumRuleCall_2_3_1_0 = (RuleCall)cKindAssignment_2_3_1.eContents().get(0);
		private final Assignment cElementAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final CrossReference cElementNamedElementCrossReference_2_3_2_0 = (CrossReference)cElementAssignment_2_3_2.eContents().get(0);
		private final RuleCall cElementNamedElementESIdentifierParserRuleCall_2_3_2_0_1 = (RuleCall)cElementNamedElementCrossReference_2_3_2_0.eContents().get(1);
		
		////ValuePureNamedElementExpression
		////ValuePureNamedElementExpression returns fmlExpr::Expression
		////	: LiteralPureReferenceExpression
		////
		////		// '.' element
		////		( { fmlExpr::ValueElementSpecification.target=current }
		////			kind=ValueDotFieldExpressionKind
		////			element=[fmlCommon::NamedElement|ESIdentifier]
		////		)*
		////
		////		// '->' element
		////		( { fmlExpr::ValueElementSpecification.target=current }
		////			kind=ValueArrowFieldExpressionKind
		////			element=[fmlCommon::NamedElement|ESIdentifier]
		////
		////			// '.' element
		////			( { fmlExpr::ValueElementSpecification.target=current }
		////				kind=ValueDotFieldExpressionKind
		////				element=[fmlCommon::NamedElement|ESIdentifier]
		////			)*
		////		)?
		////	;
		//ValuePureNamedMachineExpression fmlExpr::Expression:
		//	LiteralPureReferenceExpression ({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier])* ({fmlExpr::ValueElementSpecification.target=current}
		//	kind=ValueArrowFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier] ({fmlExpr::ValueElementSpecification.target=current}
		//	kind=ValueDotFieldExpressionKind
		//	element=[fmlCommon::NamedElement|ESIdentifier])*)?
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralPureReferenceExpression ({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier])* ({fmlExpr::ValueElementSpecification.target=current}
		//kind=ValueArrowFieldExpressionKind element=[fmlCommon::NamedElement|ESIdentifier]
		//({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier])*)?
		public Group getGroup() { return cGroup; }
		
		//LiteralPureReferenceExpression
		public RuleCall getLiteralPureReferenceExpressionParserRuleCall_0() { return cLiteralPureReferenceExpressionParserRuleCall_0; }
		
		//({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_1_0() { return cValueElementSpecificationTargetAction_1_0; }
		
		//kind=ValueDotFieldExpressionKind
		public Assignment getKindAssignment_1_1() { return cKindAssignment_1_1; }
		
		//ValueDotFieldExpressionKind
		public RuleCall getKindValueDotFieldExpressionKindEnumRuleCall_1_1_0() { return cKindValueDotFieldExpressionKindEnumRuleCall_1_1_0; }
		
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_1_2() { return cElementAssignment_1_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_1_2_0() { return cElementNamedElementCrossReference_1_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_1_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_1_2_0_1; }
		
		//({fmlExpr::ValueElementSpecification.target=current} kind=ValueArrowFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier] ({fmlExpr::ValueElementSpecification.target=current}
		//kind=ValueDotFieldExpressionKind element=[fmlCommon::NamedElement|ESIdentifier])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_0() { return cValueElementSpecificationTargetAction_2_0; }
		
		//kind=ValueArrowFieldExpressionKind
		public Assignment getKindAssignment_2_1() { return cKindAssignment_2_1; }
		
		//ValueArrowFieldExpressionKind
		public RuleCall getKindValueArrowFieldExpressionKindEnumRuleCall_2_1_0() { return cKindValueArrowFieldExpressionKindEnumRuleCall_2_1_0; }
		
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_2() { return cElementAssignment_2_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_2_0() { return cElementNamedElementCrossReference_2_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_2_0_1; }
		
		//({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
		//element=[fmlCommon::NamedElement|ESIdentifier])*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//{fmlExpr::ValueElementSpecification.target=current}
		public Action getValueElementSpecificationTargetAction_2_3_0() { return cValueElementSpecificationTargetAction_2_3_0; }
		
		//kind=ValueDotFieldExpressionKind
		public Assignment getKindAssignment_2_3_1() { return cKindAssignment_2_3_1; }
		
		//ValueDotFieldExpressionKind
		public RuleCall getKindValueDotFieldExpressionKindEnumRuleCall_2_3_1_0() { return cKindValueDotFieldExpressionKindEnumRuleCall_2_3_1_0; }
		
		//element=[fmlCommon::NamedElement|ESIdentifier]
		public Assignment getElementAssignment_2_3_2() { return cElementAssignment_2_3_2; }
		
		//[fmlCommon::NamedElement|ESIdentifier]
		public CrossReference getElementNamedElementCrossReference_2_3_2_0() { return cElementNamedElementCrossReference_2_3_2_0; }
		
		//ESIdentifier
		public RuleCall getElementNamedElementESIdentifierParserRuleCall_2_3_2_0_1() { return cElementNamedElementESIdentifierParserRuleCall_2_3_2_0_1; }
	}
	
	public class VisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.VisibilityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPackagePackageKeyword_3_0 = (Keyword)cPackageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityKind returns fmlCommon::VisibilityKind:
		//	public | private | protected | package;
		public EnumRule getRule() { return rule; }
		
		//public | private | protected | package
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() { return cPackageEnumLiteralDeclaration_3; }
		
		//'package'
		public Keyword getPackagePackageKeyword_3_0() { return cPackagePackageKeyword_3_0; }
	}
	public class DesignKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DesignKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cModelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cModelModelKeyword_0_0 = (Keyword)cModelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrototypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrototypePrototypeKeyword_1_0 = (Keyword)cPrototypeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DesignKind returns fmlInfra::DesignKind:
		//	model | prototype;
		public EnumRule getRule() { return rule; }
		
		//model | prototype
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//model
		public EnumLiteralDeclaration getModelEnumLiteralDeclaration_0() { return cModelEnumLiteralDeclaration_0; }
		
		//'model'
		public Keyword getModelModelKeyword_0_0() { return cModelModelKeyword_0_0; }
		
		//prototype
		public EnumLiteralDeclaration getPrototypeEnumLiteralDeclaration_1() { return cPrototypeEnumLiteralDeclaration_1; }
		
		//'prototype'
		public Keyword getPrototypePrototypeKeyword_1_0() { return cPrototypePrototypeKeyword_1_0; }
	}
	public class DesignInstanceKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.DesignInstanceKind");
		private final EnumLiteralDeclaration cInstanceEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInstanceInstanceKeyword_0 = (Keyword)cInstanceEnumLiteralDeclaration.eContents().get(0);
		
		//enum DesignInstanceKind returns fmlInfra::DesignKind:
		//	instance;
		public EnumRule getRule() { return rule; }
		
		//instance
		public EnumLiteralDeclaration getInstanceEnumLiteralDeclaration() { return cInstanceEnumLiteralDeclaration; }
		
		//'instance'
		public Keyword getInstanceInstanceKeyword_0() { return cInstanceInstanceKeyword_0; }
	}
	public class PseudostateKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PseudostateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJunctionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJunctionJunctionKeyword_0_0 = (Keyword)cJunctionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cChoiceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cChoiceChoiceKeyword_1_0 = (Keyword)cChoiceEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cJunctionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cJunctionEntryPointKeyword_2_0 = (Keyword)cJunctionEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cChoiceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cChoiceExitPointKeyword_3_0 = (Keyword)cChoiceEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cForkEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cForkForkKeyword_4_0 = (Keyword)cForkEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJoinEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJoinJoinKeyword_5_0 = (Keyword)cJoinEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDeepHistoryEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDeepHistoryDhistoryKeyword_6_0 = (Keyword)cDeepHistoryEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cShallowHistoryEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cShallowHistoryShistoryKeyword_7_0 = (Keyword)cShallowHistoryEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum PseudostateKind returns fmlStmchn::PseudostateKind:
		//	junction | choice | junction='entryPoint'
		//	| choice='exitPoint'
		//	//	| initial ='initial'
		//	//		
		//	//	| terminate='terminal'
		//	//	| return   ='return'
		//
		//	| fork | join | deepHistory='dhistory'
		//	| shallowHistory='shistory';
		public EnumRule getRule() { return rule; }
		
		//junction | choice | junction='entryPoint' | choice='exitPoint' //	| initial ='initial'
		////		
		////	| terminate='terminal'
		////	| return   ='return'
		//| fork | join | deepHistory='dhistory' | shallowHistory='shistory'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//junction
		public EnumLiteralDeclaration getJunctionEnumLiteralDeclaration_0() { return cJunctionEnumLiteralDeclaration_0; }
		
		//'junction'
		public Keyword getJunctionJunctionKeyword_0_0() { return cJunctionJunctionKeyword_0_0; }
		
		//choice
		public EnumLiteralDeclaration getChoiceEnumLiteralDeclaration_1() { return cChoiceEnumLiteralDeclaration_1; }
		
		//'choice'
		public Keyword getChoiceChoiceKeyword_1_0() { return cChoiceChoiceKeyword_1_0; }
		
		//junction='entryPoint'
		public EnumLiteralDeclaration getJunctionEnumLiteralDeclaration_2() { return cJunctionEnumLiteralDeclaration_2; }
		
		//'entryPoint'
		public Keyword getJunctionEntryPointKeyword_2_0() { return cJunctionEntryPointKeyword_2_0; }
		
		//choice='exitPoint'
		public EnumLiteralDeclaration getChoiceEnumLiteralDeclaration_3() { return cChoiceEnumLiteralDeclaration_3; }
		
		//'exitPoint'
		public Keyword getChoiceExitPointKeyword_3_0() { return cChoiceExitPointKeyword_3_0; }
		
		//fork
		public EnumLiteralDeclaration getForkEnumLiteralDeclaration_4() { return cForkEnumLiteralDeclaration_4; }
		
		//'fork'
		public Keyword getForkForkKeyword_4_0() { return cForkForkKeyword_4_0; }
		
		//join
		public EnumLiteralDeclaration getJoinEnumLiteralDeclaration_5() { return cJoinEnumLiteralDeclaration_5; }
		
		//'join'
		public Keyword getJoinJoinKeyword_5_0() { return cJoinJoinKeyword_5_0; }
		
		//deepHistory='dhistory'
		public EnumLiteralDeclaration getDeepHistoryEnumLiteralDeclaration_6() { return cDeepHistoryEnumLiteralDeclaration_6; }
		
		//'dhistory'
		public Keyword getDeepHistoryDhistoryKeyword_6_0() { return cDeepHistoryDhistoryKeyword_6_0; }
		
		//shallowHistory='shistory'
		public EnumLiteralDeclaration getShallowHistoryEnumLiteralDeclaration_7() { return cShallowHistoryEnumLiteralDeclaration_7; }
		
		//'shistory'
		public Keyword getShallowHistoryShistoryKeyword_7_0() { return cShallowHistoryShistoryKeyword_7_0; }
	}
	public class PseudostateInitialKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PseudostateInitialKind");
		private final EnumLiteralDeclaration cInitialEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInitialInitialKeyword_0 = (Keyword)cInitialEnumLiteralDeclaration.eContents().get(0);
		
		//enum PseudostateInitialKind returns fmlStmchn::PseudostateKind:
		//	initial;
		public EnumRule getRule() { return rule; }
		
		//initial
		public EnumLiteralDeclaration getInitialEnumLiteralDeclaration() { return cInitialEnumLiteralDeclaration; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0() { return cInitialInitialKeyword_0; }
	}
	public class EndingPseudostateKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.EndingPseudostateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTerminateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTerminateTerminalKeyword_0_0 = (Keyword)cTerminateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReturnReturnKeyword_1_0 = (Keyword)cReturnEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EndingPseudostateKind returns fmlStmchn::PseudostateKind:
		//	terminate='terminal'
		//	| return;
		public EnumRule getRule() { return rule; }
		
		//terminate='terminal' | return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//terminate='terminal'
		public EnumLiteralDeclaration getTerminateEnumLiteralDeclaration_0() { return cTerminateEnumLiteralDeclaration_0; }
		
		//'terminal'
		public Keyword getTerminateTerminalKeyword_0_0() { return cTerminateTerminalKeyword_0_0; }
		
		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_1() { return cReturnEnumLiteralDeclaration_1; }
		
		//'return'
		public Keyword getReturnReturnKeyword_1_0() { return cReturnReturnKeyword_1_0; }
	}
	public class ComProtocolKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComProtocolKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEnvEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEnvEnvKeyword_0_0 = (Keyword)cEnvEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRdvEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRdvRdvKeyword_1_0 = (Keyword)cRdvEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMulti_rdvEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMulti_rdvMulti_rdvKeyword_2_0 = (Keyword)cMulti_rdvEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ComProtocolKind returns fmlInfra::ComProtocolKind:
		//	env | rdv | multi_rdv;
		public EnumRule getRule() { return rule; }
		
		//env | rdv | multi_rdv
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//env
		public EnumLiteralDeclaration getEnvEnumLiteralDeclaration_0() { return cEnvEnumLiteralDeclaration_0; }
		
		//'env'
		public Keyword getEnvEnvKeyword_0_0() { return cEnvEnvKeyword_0_0; }
		
		//rdv
		public EnumLiteralDeclaration getRdvEnumLiteralDeclaration_1() { return cRdvEnumLiteralDeclaration_1; }
		
		//'rdv'
		public Keyword getRdvRdvKeyword_1_0() { return cRdvRdvKeyword_1_0; }
		
		//multi_rdv
		public EnumLiteralDeclaration getMulti_rdvEnumLiteralDeclaration_2() { return cMulti_rdvEnumLiteralDeclaration_2; }
		
		//'multi_rdv'
		public Keyword getMulti_rdvMulti_rdvKeyword_2_0() { return cMulti_rdvMulti_rdvKeyword_2_0; }
	}
	public class ComEnvRdvProtocolKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComEnvRdvProtocolKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEnvEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEnvEnvKeyword_0_0 = (Keyword)cEnvEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRdvEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRdvRdvKeyword_1_0 = (Keyword)cRdvEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ComEnvRdvProtocolKind returns fmlInfra::ComProtocolKind:
		//	env | rdv;
		public EnumRule getRule() { return rule; }
		
		//env | rdv
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//env
		public EnumLiteralDeclaration getEnvEnumLiteralDeclaration_0() { return cEnvEnumLiteralDeclaration_0; }
		
		//'env'
		public Keyword getEnvEnvKeyword_0_0() { return cEnvEnvKeyword_0_0; }
		
		//rdv
		public EnumLiteralDeclaration getRdvEnumLiteralDeclaration_1() { return cRdvEnumLiteralDeclaration_1; }
		
		//'rdv'
		public Keyword getRdvRdvKeyword_1_0() { return cRdvRdvKeyword_1_0; }
	}
	public class ComMultiRdvProtocolKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComMultiRdvProtocolKind");
		private final EnumLiteralDeclaration cMulti_rdvEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMulti_rdvMulti_rdvKeyword_0 = (Keyword)cMulti_rdvEnumLiteralDeclaration.eContents().get(0);
		
		//enum ComMultiRdvProtocolKind returns fmlInfra::ComProtocolKind:
		//	multi_rdv;
		public EnumRule getRule() { return rule; }
		
		//multi_rdv
		public EnumLiteralDeclaration getMulti_rdvEnumLiteralDeclaration() { return cMulti_rdvEnumLiteralDeclaration; }
		
		//'multi_rdv'
		public Keyword getMulti_rdvMulti_rdvKeyword_0() { return cMulti_rdvMulti_rdvKeyword_0; }
	}
	public class BufferProtocolKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferProtocolKind");
		private final EnumLiteralDeclaration cBufferEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBufferBufferKeyword_0 = (Keyword)cBufferEnumLiteralDeclaration.eContents().get(0);
		
		//enum BufferProtocolKind returns fmlInfra::ComProtocolKind:
		//	buffer;
		public EnumRule getRule() { return rule; }
		
		//buffer
		public EnumLiteralDeclaration getBufferEnumLiteralDeclaration() { return cBufferEnumLiteralDeclaration; }
		
		//'buffer'
		public Keyword getBufferBufferKeyword_0() { return cBufferBufferKeyword_0; }
	}
	public class ComCastKingElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ComCastKing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnicastEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnicastUnicastKeyword_0_0 = (Keyword)cUnicastEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnycastEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnycastAnycastKeyword_1_0 = (Keyword)cAnycastEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMulticastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMulticastMulticastKeyword_2_0 = (Keyword)cMulticastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBroadcastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBroadcastBroadcastKeyword_3_0 = (Keyword)cBroadcastEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ComCastKing returns fmlInfra::ComCastKind:
		//	unicast | anycast | multicast | broadcast;
		public EnumRule getRule() { return rule; }
		
		//unicast | anycast | multicast | broadcast
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unicast
		public EnumLiteralDeclaration getUnicastEnumLiteralDeclaration_0() { return cUnicastEnumLiteralDeclaration_0; }
		
		//'unicast'
		public Keyword getUnicastUnicastKeyword_0_0() { return cUnicastUnicastKeyword_0_0; }
		
		//anycast
		public EnumLiteralDeclaration getAnycastEnumLiteralDeclaration_1() { return cAnycastEnumLiteralDeclaration_1; }
		
		//'anycast'
		public Keyword getAnycastAnycastKeyword_1_0() { return cAnycastAnycastKeyword_1_0; }
		
		//multicast
		public EnumLiteralDeclaration getMulticastEnumLiteralDeclaration_2() { return cMulticastEnumLiteralDeclaration_2; }
		
		//'multicast'
		public Keyword getMulticastMulticastKeyword_2_0() { return cMulticastMulticastKeyword_2_0; }
		
		//broadcast
		public EnumLiteralDeclaration getBroadcastEnumLiteralDeclaration_3() { return cBroadcastEnumLiteralDeclaration_3; }
		
		//'broadcast'
		public Keyword getBroadcastBroadcastKeyword_3_0() { return cBroadcastBroadcastKeyword_3_0; }
	}
	public class PrimitiveNumberSignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveNumberSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPositive_strictEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPositive_strictPlusSignPlusSignKeyword_1_0 = (Keyword)cPositive_strictEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNegativeHyphenMinusKeyword_2_0 = (Keyword)cNegativeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNegative_strictEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNegative_strictHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cNegative_strictEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PrimitiveNumberSign returns fmlType::PrimitiveNumberSign:
		//	positive='+'
		//	| positive_strict='++'
		//	| negative='-'
		//	| negative_strict='--';
		public EnumRule getRule() { return rule; }
		
		//positive='+' | positive_strict='++' | negative='-' | negative_strict='--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//positive='+'
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }
		
		//positive_strict='++'
		public EnumLiteralDeclaration getPositive_strictEnumLiteralDeclaration_1() { return cPositive_strictEnumLiteralDeclaration_1; }
		
		//'++'
		public Keyword getPositive_strictPlusSignPlusSignKeyword_1_0() { return cPositive_strictPlusSignPlusSignKeyword_1_0; }
		
		//negative='-'
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_2() { return cNegativeEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_2_0() { return cNegativeHyphenMinusKeyword_2_0; }
		
		//negative_strict='--'
		public EnumLiteralDeclaration getNegative_strictEnumLiteralDeclaration_3() { return cNegative_strictEnumLiteralDeclaration_3; }
		
		//'--'
		public Keyword getNegative_strictHyphenMinusHyphenMinusKeyword_3_0() { return cNegative_strictHyphenMinusHyphenMinusKeyword_3_0; }
	}
	public class PrimitiveInstanceKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrimitiveInstanceKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBufferEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBufferBufferKeyword_0_0 = (Keyword)cBufferEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMessageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMessageMessageKeyword_1_0 = (Keyword)cMessageEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPortEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPortPortKeyword_2_0 = (Keyword)cPortEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSignalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSignalSignalKeyword_3_0 = (Keyword)cSignalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMachineEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMachineMachineKeyword_4_0 = (Keyword)cMachineEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cVertexEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cVertexVertexKeyword_5_0 = (Keyword)cVertexEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PrimitiveInstanceKind returns fmlType::PrimitiveInstanceKind:
		//	buffer | message | port | signal | machine | vertex;
		public EnumRule getRule() { return rule; }
		
		//buffer | message | port | signal | machine | vertex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//buffer
		public EnumLiteralDeclaration getBufferEnumLiteralDeclaration_0() { return cBufferEnumLiteralDeclaration_0; }
		
		//'buffer'
		public Keyword getBufferBufferKeyword_0_0() { return cBufferBufferKeyword_0_0; }
		
		//message
		public EnumLiteralDeclaration getMessageEnumLiteralDeclaration_1() { return cMessageEnumLiteralDeclaration_1; }
		
		//'message'
		public Keyword getMessageMessageKeyword_1_0() { return cMessageMessageKeyword_1_0; }
		
		//port
		public EnumLiteralDeclaration getPortEnumLiteralDeclaration_2() { return cPortEnumLiteralDeclaration_2; }
		
		//'port'
		public Keyword getPortPortKeyword_2_0() { return cPortPortKeyword_2_0; }
		
		//signal
		public EnumLiteralDeclaration getSignalEnumLiteralDeclaration_3() { return cSignalEnumLiteralDeclaration_3; }
		
		//'signal'
		public Keyword getSignalSignalKeyword_3_0() { return cSignalSignalKeyword_3_0; }
		
		//machine
		public EnumLiteralDeclaration getMachineEnumLiteralDeclaration_4() { return cMachineEnumLiteralDeclaration_4; }
		
		//'machine'
		public Keyword getMachineMachineKeyword_4_0() { return cMachineMachineKeyword_4_0; }
		
		//vertex
		public EnumLiteralDeclaration getVertexEnumLiteralDeclaration_5() { return cVertexEnumLiteralDeclaration_5; }
		
		//'vertex'
		public Keyword getVertexVertexKeyword_5_0() { return cVertexVertexKeyword_5_0; }
	}
	public class CollectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CollectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVectorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVectorVectorKeyword_0_0 = (Keyword)cVectorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRvectorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRvectorRvectorKeyword_1_0 = (Keyword)cRvectorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cListEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cListListKeyword_2_0 = (Keyword)cListEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSetSetKeyword_3_0 = (Keyword)cSetEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBagBagKeyword_4_0 = (Keyword)cBagEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFifoEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFifoFifoKeyword_5_0 = (Keyword)cFifoEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLifoEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLifoLifoKeyword_6_0 = (Keyword)cLifoEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum CollectionKind returns fmlType::CollectionKind:
		//	vector | rvector | list | set | bag | fifo | lifo;
		public EnumRule getRule() { return rule; }
		
		//vector | rvector | list | set | bag | fifo | lifo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//vector
		public EnumLiteralDeclaration getVectorEnumLiteralDeclaration_0() { return cVectorEnumLiteralDeclaration_0; }
		
		//'vector'
		public Keyword getVectorVectorKeyword_0_0() { return cVectorVectorKeyword_0_0; }
		
		//rvector
		public EnumLiteralDeclaration getRvectorEnumLiteralDeclaration_1() { return cRvectorEnumLiteralDeclaration_1; }
		
		//'rvector'
		public Keyword getRvectorRvectorKeyword_1_0() { return cRvectorRvectorKeyword_1_0; }
		
		//list
		public EnumLiteralDeclaration getListEnumLiteralDeclaration_2() { return cListEnumLiteralDeclaration_2; }
		
		//'list'
		public Keyword getListListKeyword_2_0() { return cListListKeyword_2_0; }
		
		//set
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_3() { return cSetEnumLiteralDeclaration_3; }
		
		//'set'
		public Keyword getSetSetKeyword_3_0() { return cSetSetKeyword_3_0; }
		
		//bag
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_4() { return cBagEnumLiteralDeclaration_4; }
		
		//'bag'
		public Keyword getBagBagKeyword_4_0() { return cBagBagKeyword_4_0; }
		
		//fifo
		public EnumLiteralDeclaration getFifoEnumLiteralDeclaration_5() { return cFifoEnumLiteralDeclaration_5; }
		
		//'fifo'
		public Keyword getFifoFifoKeyword_5_0() { return cFifoFifoKeyword_5_0; }
		
		//lifo
		public EnumLiteralDeclaration getLifoEnumLiteralDeclaration_6() { return cLifoEnumLiteralDeclaration_6; }
		
		//'lifo'
		public Keyword getLifoLifoKeyword_6_0() { return cLifoLifoKeyword_6_0; }
	}
	public class PublicVariableVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PublicVariableVisibilityKind");
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPublicVarKeyword_0 = (Keyword)cPublicEnumLiteralDeclaration.eContents().get(0);
		
		//enum PublicVariableVisibilityKind returns fmlCommon::VisibilityKind:
		//	public='var'
		//	//	| public ='val'
		//	//	| public ='const'
		//;
		public EnumRule getRule() { return rule; }
		
		//public='var'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration() { return cPublicEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getPublicVarKeyword_0() { return cPublicVarKeyword_0; }
	}
	public class ProtectedVariableVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProtectedVariableVisibilityKind");
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtectedVarKeyword_0 = (Keyword)cProtectedEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProtectedVariableVisibilityKind returns fmlCommon::VisibilityKind:
		//	protected='var'
		//	//	| protected ='val'
		//	//	| protected ='const'
		//;
		public EnumRule getRule() { return rule; }
		
		//protected='var'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration() { return cProtectedEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getProtectedVarKeyword_0() { return cProtectedVarKeyword_0; }
	}
	public class PrivateVariableVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrivateVariableVisibilityKind");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateVarKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum PrivateVariableVisibilityKind returns fmlCommon::VisibilityKind:
		//	private='var'
		//	//	| private ='val'
		//	//	| private ='const'
		//;
		public EnumRule getRule() { return rule; }
		
		//private='var'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getPrivateVarKeyword_0() { return cPrivateVarKeyword_0; }
	}
	public class ParameterDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterDirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInoutInoutKeyword_1_0 = (Keyword)cInoutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutOutKeyword_2_0 = (Keyword)cOutEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReturnReturnKeyword_3_0 = (Keyword)cReturnEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ParameterDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	in | inout | out | return;
		public EnumRule getRule() { return rule; }
		
		//in | inout | out | return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_1() { return cInoutEnumLiteralDeclaration_1; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_1_0() { return cInoutInoutKeyword_1_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_2() { return cOutEnumLiteralDeclaration_2; }
		
		//'out'
		public Keyword getOutOutKeyword_2_0() { return cOutOutKeyword_2_0; }
		
		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_3() { return cReturnEnumLiteralDeclaration_3; }
		
		//'return'
		public Keyword getReturnReturnKeyword_3_0() { return cReturnReturnKeyword_3_0; }
	}
	public class BlockParameterDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BlockParameterDirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInputKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInoutInoutKeyword_1_0 = (Keyword)cInoutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutOutputKeyword_2_0 = (Keyword)cOutEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReturnReturnKeyword_3_0 = (Keyword)cReturnEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BlockParameterDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	in='input'
		//	| inout | out='output'
		//	| return;
		public EnumRule getRule() { return rule; }
		
		//in='input' | inout | out='output' | return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in='input'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'input'
		public Keyword getInInputKeyword_0_0() { return cInInputKeyword_0_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_1() { return cInoutEnumLiteralDeclaration_1; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_1_0() { return cInoutInoutKeyword_1_0; }
		
		//out='output'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_2() { return cOutEnumLiteralDeclaration_2; }
		
		//'output'
		public Keyword getOutOutputKeyword_2_0() { return cOutOutputKeyword_2_0; }
		
		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_3() { return cReturnEnumLiteralDeclaration_3; }
		
		//'return'
		public Keyword getReturnReturnKeyword_3_0() { return cReturnReturnKeyword_3_0; }
	}
	public class ParameterInputDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterInputDirectionKind");
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInVarKeyword_0 = (Keyword)cInEnumLiteralDeclaration.eContents().get(0);
		
		//enum ParameterInputDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	in='var';
		public EnumRule getRule() { return rule; }
		
		//in='var'
		public EnumLiteralDeclaration getInEnumLiteralDeclaration() { return cInEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getInVarKeyword_0() { return cInVarKeyword_0; }
	}
	public class ParameterInoutDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterInoutDirectionKind");
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInoutVarKeyword_0 = (Keyword)cInoutEnumLiteralDeclaration.eContents().get(0);
		
		//enum ParameterInoutDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	inout='var';
		public EnumRule getRule() { return rule; }
		
		//inout='var'
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration() { return cInoutEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getInoutVarKeyword_0() { return cInoutVarKeyword_0; }
	}
	public class ParameterOutputDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterOutputDirectionKind");
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOutVarKeyword_0 = (Keyword)cOutEnumLiteralDeclaration.eContents().get(0);
		
		//enum ParameterOutputDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	out='var';
		public EnumRule getRule() { return rule; }
		
		//out='var'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration() { return cOutEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getOutVarKeyword_0() { return cOutVarKeyword_0; }
	}
	public class ParameterReturnDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ParameterReturnDirectionKind");
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cReturnVarKeyword_0 = (Keyword)cReturnEnumLiteralDeclaration.eContents().get(0);
		
		//enum ParameterReturnDirectionKind returns fmlInfra::ParameterDirectionKind:
		//	return='var';
		public EnumRule getRule() { return rule; }
		
		//return='var'
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration() { return cReturnEnumLiteralDeclaration; }
		
		//'var'
		public Keyword getReturnVarKeyword_0() { return cReturnVarKeyword_0; }
	}
	public class BufferContainerKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.BufferContainerKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSetSetKeyword_0_0 = (Keyword)cSetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBagBagKeyword_1_0 = (Keyword)cBagEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFifoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFifoFifoKeyword_2_0 = (Keyword)cFifoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLifoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLifoLifoKeyword_3_0 = (Keyword)cLifoEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BufferContainerKind returns fmlType::CollectionKind:
		//	set | bag | fifo | lifo;
		public EnumRule getRule() { return rule; }
		
		//set | bag | fifo | lifo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//set
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_0() { return cSetEnumLiteralDeclaration_0; }
		
		//'set'
		public Keyword getSetSetKeyword_0_0() { return cSetSetKeyword_0_0; }
		
		//bag
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_1() { return cBagEnumLiteralDeclaration_1; }
		
		//'bag'
		public Keyword getBagBagKeyword_1_0() { return cBagBagKeyword_1_0; }
		
		//fifo
		public EnumLiteralDeclaration getFifoEnumLiteralDeclaration_2() { return cFifoEnumLiteralDeclaration_2; }
		
		//'fifo'
		public Keyword getFifoFifoKeyword_2_0() { return cFifoFifoKeyword_2_0; }
		
		//lifo
		public EnumLiteralDeclaration getLifoEnumLiteralDeclaration_3() { return cLifoEnumLiteralDeclaration_3; }
		
		//'lifo'
		public Keyword getLifoLifoKeyword_3_0() { return cLifoLifoKeyword_3_0; }
	}
	public class PublicBufferVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PublicBufferVisibilityKind");
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPublicBufferKeyword_0 = (Keyword)cPublicEnumLiteralDeclaration.eContents().get(0);
		
		//enum PublicBufferVisibilityKind returns fmlCommon::VisibilityKind:
		//	public='buffer';
		public EnumRule getRule() { return rule; }
		
		//public='buffer'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration() { return cPublicEnumLiteralDeclaration; }
		
		//'buffer'
		public Keyword getPublicBufferKeyword_0() { return cPublicBufferKeyword_0; }
	}
	public class ProtectedBufferVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProtectedBufferVisibilityKind");
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtectedBufferKeyword_0 = (Keyword)cProtectedEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProtectedBufferVisibilityKind returns fmlCommon::VisibilityKind:
		//	protected='buffer';
		public EnumRule getRule() { return rule; }
		
		//protected='buffer'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration() { return cProtectedEnumLiteralDeclaration; }
		
		//'buffer'
		public Keyword getProtectedBufferKeyword_0() { return cProtectedBufferKeyword_0; }
	}
	public class PrivateBufferVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrivateBufferVisibilityKind");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateBufferKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum PrivateBufferVisibilityKind returns fmlCommon::VisibilityKind:
		//	private='buffer';
		public EnumRule getRule() { return rule; }
		
		//private='buffer'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'buffer'
		public Keyword getPrivateBufferKeyword_0() { return cPrivateBufferKeyword_0; }
	}
	public class PublicPortVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PublicPortVisibilityKind");
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPublicPortKeyword_0 = (Keyword)cPublicEnumLiteralDeclaration.eContents().get(0);
		
		//enum PublicPortVisibilityKind returns fmlCommon::VisibilityKind:
		//	public='port';
		public EnumRule getRule() { return rule; }
		
		//public='port'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration() { return cPublicEnumLiteralDeclaration; }
		
		//'port'
		public Keyword getPublicPortKeyword_0() { return cPublicPortKeyword_0; }
	}
	public class ProtectedPortVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProtectedPortVisibilityKind");
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtectedPortKeyword_0 = (Keyword)cProtectedEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProtectedPortVisibilityKind returns fmlCommon::VisibilityKind:
		//	protected='port';
		public EnumRule getRule() { return rule; }
		
		//protected='port'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration() { return cProtectedEnumLiteralDeclaration; }
		
		//'port'
		public Keyword getProtectedPortKeyword_0() { return cProtectedPortKeyword_0; }
	}
	public class PrivatePortVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrivatePortVisibilityKind");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivatePortKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum PrivatePortVisibilityKind returns fmlCommon::VisibilityKind:
		//	private='port';
		public EnumRule getRule() { return rule; }
		
		//private='port'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'port'
		public Keyword getPrivatePortKeyword_0() { return cPrivatePortKeyword_0; }
	}
	public class PublicSignalVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PublicSignalVisibilityKind");
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPublicSignalKeyword_0 = (Keyword)cPublicEnumLiteralDeclaration.eContents().get(0);
		
		//enum PublicSignalVisibilityKind returns fmlCommon::VisibilityKind:
		//	public='signal';
		public EnumRule getRule() { return rule; }
		
		//public='signal'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration() { return cPublicEnumLiteralDeclaration; }
		
		//'signal'
		public Keyword getPublicSignalKeyword_0() { return cPublicSignalKeyword_0; }
	}
	public class ProtectedSignalVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProtectedSignalVisibilityKind");
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtectedSignalKeyword_0 = (Keyword)cProtectedEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProtectedSignalVisibilityKind returns fmlCommon::VisibilityKind:
		//	protected='signal';
		public EnumRule getRule() { return rule; }
		
		//protected='signal'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration() { return cProtectedEnumLiteralDeclaration; }
		
		//'signal'
		public Keyword getProtectedSignalKeyword_0() { return cProtectedSignalKeyword_0; }
	}
	public class PrivateSignalVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrivateSignalVisibilityKind");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateSignalKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum PrivateSignalVisibilityKind returns fmlCommon::VisibilityKind:
		//	private='signal';
		public EnumRule getRule() { return rule; }
		
		//private='signal'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'signal'
		public Keyword getPrivateSignalKeyword_0() { return cPrivateSignalKeyword_0; }
	}
	public class ChannelDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ChannelDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInputInputKeyword_0_0 = (Keyword)cInputEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInoutInoutKeyword_1_0 = (Keyword)cInoutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutputOutputKeyword_2_0 = (Keyword)cOutputEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ChannelDirection returns fmlInfra::ChannelDirection:
		//	input | inout | output;
		public EnumRule getRule() { return rule; }
		
		//input | inout | output
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//input
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_0() { return cInputEnumLiteralDeclaration_0; }
		
		//'input'
		public Keyword getInputInputKeyword_0_0() { return cInputInputKeyword_0_0; }
		
		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_1() { return cInoutEnumLiteralDeclaration_1; }
		
		//'inout'
		public Keyword getInoutInoutKeyword_1_0() { return cInoutInoutKeyword_1_0; }
		
		//output
		public EnumLiteralDeclaration getOutputEnumLiteralDeclaration_2() { return cOutputEnumLiteralDeclaration_2; }
		
		//'output'
		public Keyword getOutputOutputKeyword_2_0() { return cOutputOutputKeyword_2_0; }
	}
	public class PublicChannelVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PublicChannelVisibilityKind");
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPublicChannelKeyword_0 = (Keyword)cPublicEnumLiteralDeclaration.eContents().get(0);
		
		//enum PublicChannelVisibilityKind returns fmlCommon::VisibilityKind:
		//	public='channel';
		public EnumRule getRule() { return rule; }
		
		//public='channel'
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration() { return cPublicEnumLiteralDeclaration; }
		
		//'channel'
		public Keyword getPublicChannelKeyword_0() { return cPublicChannelKeyword_0; }
	}
	public class ProtectedChannelVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ProtectedChannelVisibilityKind");
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtectedChannelKeyword_0 = (Keyword)cProtectedEnumLiteralDeclaration.eContents().get(0);
		
		//enum ProtectedChannelVisibilityKind returns fmlCommon::VisibilityKind:
		//	protected='channel';
		public EnumRule getRule() { return rule; }
		
		//protected='channel'
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration() { return cProtectedEnumLiteralDeclaration; }
		
		//'channel'
		public Keyword getProtectedChannelKeyword_0() { return cProtectedChannelKeyword_0; }
	}
	public class PrivateChannelVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.PrivateChannelVisibilityKind");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivateChannelKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum PrivateChannelVisibilityKind returns fmlCommon::VisibilityKind:
		//	private='channel';
		public EnumRule getRule() { return rule; }
		
		//private='channel'
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }
		
		//'channel'
		public Keyword getPrivateChannelKeyword_0() { return cPrivateChannelKeyword_0; }
	}
	public class TransitionMocElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.TransitionMoc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSimpleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSimpleSimpleKeyword_0_0 = (Keyword)cSimpleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAbortEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAbortAbortKeyword_1_0 = (Keyword)cAbortEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFinalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionMoc returns fmlStmchn::TransitionMoc:
		//	simple | abort | final;
		public EnumRule getRule() { return rule; }
		
		//simple | abort | final
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simple
		public EnumLiteralDeclaration getSimpleEnumLiteralDeclaration_0() { return cSimpleEnumLiteralDeclaration_0; }
		
		//'simple'
		public Keyword getSimpleSimpleKeyword_0_0() { return cSimpleSimpleKeyword_0_0; }
		
		//abort
		public EnumLiteralDeclaration getAbortEnumLiteralDeclaration_1() { return cAbortEnumLiteralDeclaration_1; }
		
		//'abort'
		public Keyword getAbortAbortKeyword_1_0() { return cAbortAbortKeyword_1_0; }
		
		//final
		public EnumLiteralDeclaration getFinalEnumLiteralDeclaration_2() { return cFinalEnumLiteralDeclaration_2; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }
	}
	public class InterruptStatementKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.InterruptStatementKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBreakEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBreakBreakKeyword_0_0 = (Keyword)cBreakEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContinueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContinueContinueKeyword_1_0 = (Keyword)cContinueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReturnReturnKeyword_2_0 = (Keyword)cReturnEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cExitEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cExitExitKeyword_3_0 = (Keyword)cExitEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum InterruptStatementKind returns fmlStmnt::InterruptStatementKind:
		//	break | continue | return | exit;
		public EnumRule getRule() { return rule; }
		
		//break | continue | return | exit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//break
		public EnumLiteralDeclaration getBreakEnumLiteralDeclaration_0() { return cBreakEnumLiteralDeclaration_0; }
		
		//'break'
		public Keyword getBreakBreakKeyword_0_0() { return cBreakBreakKeyword_0_0; }
		
		//continue
		public EnumLiteralDeclaration getContinueEnumLiteralDeclaration_1() { return cContinueEnumLiteralDeclaration_1; }
		
		//'continue'
		public Keyword getContinueContinueKeyword_1_0() { return cContinueContinueKeyword_1_0; }
		
		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_2() { return cReturnEnumLiteralDeclaration_2; }
		
		//'return'
		public Keyword getReturnReturnKeyword_2_0() { return cReturnReturnKeyword_2_0; }
		
		//exit
		public EnumLiteralDeclaration getExitEnumLiteralDeclaration_3() { return cExitEnumLiteralDeclaration_3; }
		
		//'exit'
		public Keyword getExitExitKeyword_3_0() { return cExitExitKeyword_3_0; }
	}
	public class OPERATOR_ACTIVITYElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.OPERATOR_ACTIVITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInitEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInitInitKeyword_0_0 = (Keyword)cInitEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDestroyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDestroyDestroyKeyword_2_0 = (Keyword)cDestroyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStopEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStopStopKeyword_4_0 = (Keyword)cStopEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRestartEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRestartRestartKeyword_5_0 = (Keyword)cRestartEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSuspendEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSuspendSuspendKeyword_6_0 = (Keyword)cSuspendEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cResumeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cResumeResumeKeyword_7_0 = (Keyword)cResumeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cWaitEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cWaitWaitKeyword_8_0 = (Keyword)cWaitEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDisableEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDisableDisableKeyword_9_0 = (Keyword)cDisableEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cEnableEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cEnableEnableKeyword_10_0 = (Keyword)cEnableEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cAbortEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cAbortAbortKeyword_11_0 = (Keyword)cAbortEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cScheduleEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cScheduleScheduleKeyword_12_0 = (Keyword)cScheduleEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cIrunEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cIrunIrunKeyword_13_0 = (Keyword)cIrunEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRunEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRunRunKeyword_14_0 = (Keyword)cRunEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cRtcEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cRtcRtcKeyword_15_0 = (Keyword)cRtcEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum OPERATOR_ACTIVITY returns fmlStmnt::ActivityStatementKind:
		//	init | final | destroy | start | stop | restart | suspend | resume | wait | disable | enable | abort | schedule | irun
		//	| run | rtc;
		public EnumRule getRule() { return rule; }
		
		//init | final | destroy | start | stop | restart | suspend | resume | wait | disable | enable | abort | schedule | irun |
		//run | rtc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//init
		public EnumLiteralDeclaration getInitEnumLiteralDeclaration_0() { return cInitEnumLiteralDeclaration_0; }
		
		//'init'
		public Keyword getInitInitKeyword_0_0() { return cInitInitKeyword_0_0; }
		
		//final
		public EnumLiteralDeclaration getFinalEnumLiteralDeclaration_1() { return cFinalEnumLiteralDeclaration_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }
		
		//destroy
		public EnumLiteralDeclaration getDestroyEnumLiteralDeclaration_2() { return cDestroyEnumLiteralDeclaration_2; }
		
		//'destroy'
		public Keyword getDestroyDestroyKeyword_2_0() { return cDestroyDestroyKeyword_2_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//'start'
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
		
		//stop
		public EnumLiteralDeclaration getStopEnumLiteralDeclaration_4() { return cStopEnumLiteralDeclaration_4; }
		
		//'stop'
		public Keyword getStopStopKeyword_4_0() { return cStopStopKeyword_4_0; }
		
		//restart
		public EnumLiteralDeclaration getRestartEnumLiteralDeclaration_5() { return cRestartEnumLiteralDeclaration_5; }
		
		//'restart'
		public Keyword getRestartRestartKeyword_5_0() { return cRestartRestartKeyword_5_0; }
		
		//suspend
		public EnumLiteralDeclaration getSuspendEnumLiteralDeclaration_6() { return cSuspendEnumLiteralDeclaration_6; }
		
		//'suspend'
		public Keyword getSuspendSuspendKeyword_6_0() { return cSuspendSuspendKeyword_6_0; }
		
		//resume
		public EnumLiteralDeclaration getResumeEnumLiteralDeclaration_7() { return cResumeEnumLiteralDeclaration_7; }
		
		//'resume'
		public Keyword getResumeResumeKeyword_7_0() { return cResumeResumeKeyword_7_0; }
		
		//wait
		public EnumLiteralDeclaration getWaitEnumLiteralDeclaration_8() { return cWaitEnumLiteralDeclaration_8; }
		
		//'wait'
		public Keyword getWaitWaitKeyword_8_0() { return cWaitWaitKeyword_8_0; }
		
		//disable
		public EnumLiteralDeclaration getDisableEnumLiteralDeclaration_9() { return cDisableEnumLiteralDeclaration_9; }
		
		//'disable'
		public Keyword getDisableDisableKeyword_9_0() { return cDisableDisableKeyword_9_0; }
		
		//enable
		public EnumLiteralDeclaration getEnableEnumLiteralDeclaration_10() { return cEnableEnumLiteralDeclaration_10; }
		
		//'enable'
		public Keyword getEnableEnableKeyword_10_0() { return cEnableEnableKeyword_10_0; }
		
		//abort
		public EnumLiteralDeclaration getAbortEnumLiteralDeclaration_11() { return cAbortEnumLiteralDeclaration_11; }
		
		//'abort'
		public Keyword getAbortAbortKeyword_11_0() { return cAbortAbortKeyword_11_0; }
		
		//schedule
		public EnumLiteralDeclaration getScheduleEnumLiteralDeclaration_12() { return cScheduleEnumLiteralDeclaration_12; }
		
		//'schedule'
		public Keyword getScheduleScheduleKeyword_12_0() { return cScheduleScheduleKeyword_12_0; }
		
		//irun
		public EnumLiteralDeclaration getIrunEnumLiteralDeclaration_13() { return cIrunEnumLiteralDeclaration_13; }
		
		//'irun'
		public Keyword getIrunIrunKeyword_13_0() { return cIrunIrunKeyword_13_0; }
		
		//run
		public EnumLiteralDeclaration getRunEnumLiteralDeclaration_14() { return cRunEnumLiteralDeclaration_14; }
		
		//'run'
		public Keyword getRunRunKeyword_14_0() { return cRunRunKeyword_14_0; }
		
		//rtc
		public EnumLiteralDeclaration getRtcEnumLiteralDeclaration_15() { return cRtcEnumLiteralDeclaration_15; }
		
		//'rtc'
		public Keyword getRtcRtcKeyword_15_0() { return cRtcRtcKeyword_15_0; }
	}
	public class ValueDotFieldExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueDotFieldExpressionKind");
		private final EnumLiteralDeclaration cFieldEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFieldFullStopKeyword_0 = (Keyword)cFieldEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueDotFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	field='.';
		public EnumRule getRule() { return rule; }
		
		//field='.'
		public EnumLiteralDeclaration getFieldEnumLiteralDeclaration() { return cFieldEnumLiteralDeclaration; }
		
		//'.'
		public Keyword getFieldFullStopKeyword_0() { return cFieldFullStopKeyword_0; }
	}
	public class ValueColonFieldExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueColonFieldExpressionKind");
		private final EnumLiteralDeclaration cFieldEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFieldColonKeyword_0 = (Keyword)cFieldEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueColonFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	field=':';
		public EnumRule getRule() { return rule; }
		
		//field=':'
		public EnumLiteralDeclaration getFieldEnumLiteralDeclaration() { return cFieldEnumLiteralDeclaration; }
		
		//':'
		public Keyword getFieldColonKeyword_0() { return cFieldColonKeyword_0; }
	}
	public class ValueDoubleColonFieldExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueDoubleColonFieldExpressionKind");
		private final EnumLiteralDeclaration cFieldEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFieldColonColonKeyword_0 = (Keyword)cFieldEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueDoubleColonFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	field='::';
		public EnumRule getRule() { return rule; }
		
		//field='::'
		public EnumLiteralDeclaration getFieldEnumLiteralDeclaration() { return cFieldEnumLiteralDeclaration; }
		
		//'::'
		public Keyword getFieldColonColonKeyword_0() { return cFieldColonColonKeyword_0; }
	}
	public class ValueArrowFieldExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueArrowFieldExpressionKind");
		private final EnumLiteralDeclaration cFieldEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFieldHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cFieldEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueArrowFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	field='->';
		public EnumRule getRule() { return rule; }
		
		//field='->'
		public EnumLiteralDeclaration getFieldEnumLiteralDeclaration() { return cFieldEnumLiteralDeclaration; }
		
		//'->'
		public Keyword getFieldHyphenMinusGreaterThanSignKeyword_0() { return cFieldHyphenMinusGreaterThanSignKeyword_0; }
	}
	public class ValueIndexExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueIndexExpressionKind");
		private final EnumLiteralDeclaration cIndexEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cIndexLeftSquareBracketKeyword_0 = (Keyword)cIndexEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueIndexExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	index='[';
		public EnumRule getRule() { return rule; }
		
		//index='['
		public EnumLiteralDeclaration getIndexEnumLiteralDeclaration() { return cIndexEnumLiteralDeclaration; }
		
		//'['
		public Keyword getIndexLeftSquareBracketKeyword_0() { return cIndexLeftSquareBracketKeyword_0; }
	}
	public class ValueParameterExpressionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.ValueParameterExpressionKind");
		private final EnumLiteralDeclaration cParameterEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cParameterLeftParenthesisKeyword_0 = (Keyword)cParameterEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValueParameterExpressionKind returns fmlExpr::ValueElementSpecificationKind:
		//	parameter='(';
		public EnumRule getRule() { return rule; }
		
		//parameter='('
		public EnumLiteralDeclaration getParameterEnumLiteralDeclaration() { return cParameterEnumLiteralDeclaration; }
		
		//'('
		public Keyword getParameterLeftParenthesisKeyword_0() { return cParameterLeftParenthesisKeyword_0; }
	}
	
	private final XliaElements pXlia;
	private final XliaPrologObjectElements pXliaPrologObject;
	private final XliaPrologAttributeElements pXliaPrologAttribute;
	private final XliaOptionObjectElements pXliaOptionObject;
	private final XliaNamedElementElements pXliaNamedElement;
	private final XliaObjectElements pXliaObject;
	private final XliaAttributeElements pXliaAttribute;
	private final EBooleanElements pEBoolean;
	private final TerminalRule tINT;
	private final EIntElements pEInt;
	private final EIntegerElements pEInteger;
	private final EFloatElements pEFloat;
	private final EDoubleElements pEDouble;
	private final TerminalRule tCHARACTER;
	private final ECharacterElements pECharacter;
	private final EStringElements pEString;
	private final ReservedWordElements pReservedWord;
	private final TerminalRule tXLIA_ID;
	private final ESIdentifierElements pESIdentifier;
	private final ESUfidElements pESUfid;
	private final UnrestrictedNameElements pUnrestrictedName;
	private final QualifiedNameElements pQualifiedName;
	private final PotentiallyAmbiguousQualifiedNameElements pPotentiallyAmbiguousQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final UnqualifiedNameElements pUnqualifiedName;
	private final NameBindingElements pNameBinding;
	private final VisibilityKindElements eVisibilityKind;
	private final DesignKindElements eDesignKind;
	private final DesignInstanceKindElements eDesignInstanceKind;
	private final SystemElements pSystem;
	private final AnyMachineBlockElements pAnyMachineBlock;
	private final InstanceMachineElements pInstanceMachine;
	private final SlotParameterElements pSlotParameter;
	private final SlotPropertyElements pSlotProperty;
	private final MachineBlockElements pMachineBlock;
	private final ProcedureElements pProcedure;
	private final ProcedureExecutionElements pProcedureExecution;
	private final BehaviorElements pBehavior;
	private final MoeBehaviorElements pMoeBehavior;
	private final StatemachineElements pStatemachine;
	private final StatemachineRegionElements pStatemachineRegion;
	private final StatemachineRegionLiteElements pStatemachineRegionLite;
	private final StateElements pState;
	private final CompositeStateElements pCompositeState;
	private final MoeCompositeStateRoutinesElements pMoeCompositeStateRoutines;
	private final SimpleStateElements pSimpleState;
	private final MoeSimpleStateRoutinesElements pMoeSimpleStateRoutines;
	private final StartStateElements pStartState;
	private final MoeStartStateRoutinesElements pMoeStartStateRoutines;
	private final FinalStateElements pFinalState;
	private final MoeFinalStateRoutinesElements pMoeFinalStateRoutines;
	private final PseudostateElements pPseudostate;
	private final OtherPseudostateElements pOtherPseudostate;
	private final PseudostateKindElements ePseudostateKind;
	private final PseudostateInitialElements pPseudostateInitial;
	private final PseudostateInitialKindElements ePseudostateInitialKind;
	private final EndingPseudostateElements pEndingPseudostate;
	private final EndingPseudostateKindElements eEndingPseudostateKind;
	private final ModelOfComputationElements pModelOfComputation;
	private final ModelOfExecutionElements pModelOfExecution;
	private final MoeRoutineElements pMoeRoutine;
	private final RoutineElements pRoutine;
	private final ModelOfInteractionElements pModelOfInteraction;
	private final RouteElements pRoute;
	private final ComRouteProtocolElements pComRouteProtocol;
	private final ConnectionElements pConnection;
	private final ComProtocolElements pComProtocol;
	private final ComProtocolKindElements eComProtocolKind;
	private final ComEnvRdvProtocolKindElements eComEnvRdvProtocolKind;
	private final ComMultiRdvProtocolKindElements eComMultiRdvProtocolKind;
	private final BufferProtocolKindElements eBufferProtocolKind;
	private final ComCastKingElements eComCastKing;
	private final ComPointElements pComPoint;
	private final ComPointProtocolElements pComPointProtocol;
	private final ComElementElements pComElement;
	private final TypeDefinitionElements pTypeDefinition;
	private final TypeDefinitionImplElements pTypeDefinitionImpl;
	private final DataTypeMultiplicityElements pDataTypeMultiplicity;
	private final DataTypeReferenceElements pDataTypeReference;
	private final OtherDataTypeDefinitionElements pOtherDataTypeDefinition;
	private final OtherDataTypeDefinitionImplElements pOtherDataTypeDefinitionImpl;
	private final DataTypeElements pDataType;
	private final SimpleDataTypeElements pSimpleDataType;
	private final StructuredDataTypeElements pStructuredDataType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final PrimitiveNumberTypeElements pPrimitiveNumberType;
	private final PrimitiveNumberSignElements ePrimitiveNumberSign;
	private final PrimitiveIntegerTypeElements pPrimitiveIntegerType;
	private final PrimitiveRationalTypeElements pPrimitiveRationalType;
	private final PrimitiveFloatTypeElements pPrimitiveFloatType;
	private final PrimitiveRealTypeElements pPrimitiveRealType;
	private final PrimitiveTimeTypeElements pPrimitiveTimeType;
	private final PrimitiveTimeNumberTypeElements pPrimitiveTimeNumberType;
	private final OtherPrimitiveTypeElements pOtherPrimitiveType;
	private final PrimitiveBooleanTypeElements pPrimitiveBooleanType;
	private final PrimitiveCharacterTypeElements pPrimitiveCharacterType;
	private final PrimitiveStringTypeElements pPrimitiveStringType;
	private final PrimitiveInstanceKindElements ePrimitiveInstanceKind;
	private final PrimitiveInstanceTypeElements pPrimitiveInstanceType;
	private final IntervalTypeElements pIntervalType;
	private final IntervalTypeDefinitionElements pIntervalTypeDefinition;
	private final IntervalTypeDefinitionImplElements pIntervalTypeDefinitionImpl;
	private final CollectionTypeElements pCollectionType;
	private final CollectionTypeDefinitionElements pCollectionTypeDefinition;
	private final CollectionTypeDefinitionImplElements pCollectionTypeDefinitionImpl;
	private final CollectionKindElements eCollectionKind;
	private final EnumerationTypeElements pEnumerationType;
	private final EnumerationTypeDefinitionElements pEnumerationTypeDefinition;
	private final EnumerationTypeDefinitionImplElements pEnumerationTypeDefinitionImpl;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final StructureTypeElements pStructureType;
	private final StructureTypeDefinitionElements pStructureTypeDefinition;
	private final StructureTypeDefinitionImplElements pStructureTypeDefinitionImpl;
	private final UnionTypeElements pUnionType;
	private final UnionTypeDefinitionElements pUnionTypeDefinition;
	private final UnionTypeDefinitionImplElements pUnionTypeDefinitionImpl;
	private final ChoiceTypeElements pChoiceType;
	private final ChoiceTypeDefinitionElements pChoiceTypeDefinition;
	private final ChoiceTypeDefinitionImplElements pChoiceTypeDefinitionImpl;
	private final ModifierElements pModifier;
	private final VariableElements pVariable;
	private final VariableImplElements pVariableImpl;
	private final OnWriteRoutineElements pOnWriteRoutine;
	private final VariableRoutineParameterElements pVariableRoutineParameter;
	private final PublicVariableVisibilityKindElements ePublicVariableVisibilityKind;
	private final VariablePublicElements pVariablePublic;
	private final ProtectedVariableVisibilityKindElements eProtectedVariableVisibilityKind;
	private final VariableProtectedElements pVariableProtected;
	private final PrivateVariableVisibilityKindElements ePrivateVariableVisibilityKind;
	private final VariablePrivateElements pVariablePrivate;
	private final ParameterDirectionKindElements eParameterDirectionKind;
	private final FunctionalParameterSetElements pFunctionalParameterSet;
	private final FunctionalParameterElements pFunctionalParameter;
	private final FormalParameterSetElements pFormalParameterSet;
	private final FormalParameterElements pFormalParameter;
	private final BlockParameterDirectionKindElements eBlockParameterDirectionKind;
	private final BlockParameterSetElements pBlockParameterSet;
	private final ParameterInputDirectionKindElements eParameterInputDirectionKind;
	private final ParameterInputElements pParameterInput;
	private final ParameterInoutDirectionKindElements eParameterInoutDirectionKind;
	private final ParameterInoutElements pParameterInout;
	private final ParameterOutputDirectionKindElements eParameterOutputDirectionKind;
	private final ParameterOutputElements pParameterOutput;
	private final ParameterReturnDirectionKindElements eParameterReturnDirectionKind;
	private final ParameterReturnElements pParameterReturn;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final BufferContainerTypeElements pBufferContainerType;
	private final BufferContainerKindElements eBufferContainerKind;
	private final BufferElements pBuffer;
	private final BufferImplElements pBufferImpl;
	private final PublicBufferVisibilityKindElements ePublicBufferVisibilityKind;
	private final BufferPublicElements pBufferPublic;
	private final ProtectedBufferVisibilityKindElements eProtectedBufferVisibilityKind;
	private final BufferProtectedElements pBufferProtected;
	private final PrivateBufferVisibilityKindElements ePrivateBufferVisibilityKind;
	private final BufferPrivateElements pBufferPrivate;
	private final PortElements pPort;
	private final PortImplElements pPortImpl;
	private final PublicPortVisibilityKindElements ePublicPortVisibilityKind;
	private final PortPublicElements pPortPublic;
	private final ProtectedPortVisibilityKindElements eProtectedPortVisibilityKind;
	private final PortProtectedElements pPortProtected;
	private final PrivatePortVisibilityKindElements ePrivatePortVisibilityKind;
	private final PortPrivateElements pPortPrivate;
	private final SignalElements pSignal;
	private final SignalImplElements pSignalImpl;
	private final PublicSignalVisibilityKindElements ePublicSignalVisibilityKind;
	private final SignalPublicElements pSignalPublic;
	private final ProtectedSignalVisibilityKindElements eProtectedSignalVisibilityKind;
	private final SignalProtectedElements pSignalProtected;
	private final PrivateSignalVisibilityKindElements ePrivateSignalVisibilityKind;
	private final SignalPrivateElements pSignalPrivate;
	private final ChannelDirectionElements eChannelDirection;
	private final ChannelElements pChannel;
	private final SignalReferenceElements pSignalReference;
	private final PublicChannelVisibilityKindElements ePublicChannelVisibilityKind;
	private final ChannelPublicElements pChannelPublic;
	private final ProtectedChannelVisibilityKindElements eProtectedChannelVisibilityKind;
	private final ChannelProtectedElements pChannelProtected;
	private final PrivateChannelVisibilityKindElements ePrivateChannelVisibilityKind;
	private final ChannelPrivateElements pChannelPrivate;
	private final TransitionElements pTransition;
	private final TransitionMoeElements pTransitionMoe;
	private final TransitionMocElements eTransitionMoc;
	private final TransitionBehaviorElements pTransitionBehavior;
	private final TransitionTriggerElements pTransitionTrigger;
	private final TransitionGuardElements pTransitionGuard;
	private final TransitionGuardExpressionElements pTransitionGuardExpression;
	private final TransitionTimedGuardElements pTransitionTimedGuard;
	private final TransitionEffectElements pTransitionEffect;
	private final TransitionEffectStatementElements pTransitionEffectStatement;
	private final StatementElements pStatement;
	private final BlockStatementElements pBlockStatement;
	private final BlockStatementSchedulerElements pBlockStatementScheduler;
	private final ExpressionStatementElements pExpressionStatement;
	private final GuardStatementElements pGuardStatement;
	private final TimedGuardStatementElements pTimedGuardStatement;
	private final EventGuardStatementElements pEventGuardStatement;
	private final CheckSatGuardStatementElements pCheckSatGuardStatement;
	private final InputComStatementElements pInputComStatement;
	private final OutputComStatementElements pOutputComStatement;
	private final ExpressionAsMachineElements pExpressionAsMachine;
	private final IfStatementElements pIfStatement;
	private final ElseIfStatementElements pElseIfStatement;
	private final WhileDoStatementElements pWhileDoStatement;
	private final DoWhileStatementElements pDoWhileStatement;
	private final ForStatementElements pForStatement;
	private final ForAssignmentExpressionElements pForAssignmentExpression;
	private final ForEachStatementElements pForEachStatement;
	private final InterruptStatementElements pInterruptStatement;
	private final InterruptStatementKindElements eInterruptStatementKind;
	private final ActivityStatementElements pActivityStatement;
	private final OPERATOR_ACTIVITYElements eOPERATOR_ACTIVITY;
	private final InvokeStatementElements pInvokeStatement;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final LeftHandSideExpressionElements pLeftHandSideExpression;
	private final ConditionalTestExpressionElements pConditionalTestExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final BitwiseOrExpressionElements pBitwiseOrExpression;
	private final BitwiseXorExpressionElements pBitwiseXorExpression;
	private final BitwiseAndExpressionElements pBitwiseAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityOperatorElements pEqualityOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalOperatorElements pRelationalOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final PostfixUnaryExpressionElements pPostfixUnaryExpression;
	private final IncrementOrDecrementPostfixExpressionElements pIncrementOrDecrementPostfixExpression;
	private final PrefixUnaryExpressionElements pPrefixUnaryExpression;
	private final IncrementOrDecrementPrefixExpressionElements pIncrementOrDecrementPrefixExpression;
	private final AffixOperatorElements pAffixOperator;
	private final NewfreshExpressionElements pNewfreshExpression;
	private final CastExpressionElements pCastExpression;
	private final ArithmeticUnaryExpressionElements pArithmeticUnaryExpression;
	private final ArithmeticUnaryOperatorElements pArithmeticUnaryOperator;
	private final LogicalUnaryExpressionElements pLogicalUnaryExpression;
	private final BitwiseUnaryExpressionElements pBitwiseUnaryExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final BaseExpressionElements pBaseExpression;
	private final InvokeExpressionElements pInvokeExpression;
	private final InvokeExpressionDeprecatedElements pInvokeExpressionDeprecated;
	private final InstantiationExpressionElements pInstantiationExpression;
	private final DynamicInstanceSpecificationElements pDynamicInstanceSpecification;
	private final TupleParameterExpressionElements pTupleParameterExpression;
	private final MixTupleExpressionListElements pMixTupleExpressionList;
	private final PositionalTupleExpressionListElements pPositionalTupleExpressionList;
	private final NamedExpressionElements pNamedExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final LiteralReferenceableExpressionElements pLiteralReferenceableExpression;
	private final LiteralTerminalExpressionElements pLiteralTerminalExpression;
	private final LiteralBooleanExpressionElements pLiteralBooleanExpression;
	private final LiteralIntegerExpressionElements pLiteralIntegerExpression;
	private final LiteralRationalExpressionElements pLiteralRationalExpression;
	private final LiteralFloatExpressionElements pLiteralFloatExpression;
	private final LiteralCharacterExpressionElements pLiteralCharacterExpression;
	private final LiteralStringExpressionElements pLiteralStringExpression;
	private final LiteralNullExpressionElements pLiteralNullExpression;
	private final LiteralCollectionExpressionElements pLiteralCollectionExpression;
	private final LiteralReferenceExpressionElements pLiteralReferenceExpression;
	private final LiteralReferenceElementElements pLiteralReferenceElement;
	private final LiteralPureReferenceElementElements pLiteralPureReferenceElement;
	private final LiteralReferenceVariableContextElements pLiteralReferenceVariableContext;
	private final LiteralTimeExpressionElements pLiteralTimeExpression;
	private final LiteralTimeDeltaExpressionElements pLiteralTimeDeltaExpression;
	private final LiteralReferenceMachineContextElements pLiteralReferenceMachineContext;
	private final LiteralThisExpressionElements pLiteralThisExpression;
	private final LiteralSelfExpressionElements pLiteralSelfExpression;
	private final LiteralParentExpressionElements pLiteralParentExpression;
	private final LiteralSuperExpressionElements pLiteralSuperExpression;
	private final LiteralSystemExpressionElements pLiteralSystemExpression;
	private final LiteralEnvExpressionElements pLiteralEnvExpression;
	private final LiteralPureReferenceExpressionElements pLiteralPureReferenceExpression;
	private final ValueSelectionExpressionElements pValueSelectionExpression;
	private final ValuePureNamedMachineExpressionElements pValuePureNamedMachineExpression;
	private final ValueDotFieldExpressionKindElements eValueDotFieldExpressionKind;
	private final ValueColonFieldExpressionKindElements eValueColonFieldExpressionKind;
	private final ValueDoubleColonFieldExpressionKindElements eValueDoubleColonFieldExpressionKind;
	private final ValueArrowFieldExpressionKindElements eValueArrowFieldExpressionKind;
	private final ValueIndexExpressionKindElements eValueIndexExpressionKind;
	private final ValueParameterExpressionKindElements eValueParameterExpressionKind;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormalMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXlia = new XliaElements();
		this.pXliaPrologObject = new XliaPrologObjectElements();
		this.pXliaPrologAttribute = new XliaPrologAttributeElements();
		this.pXliaOptionObject = new XliaOptionObjectElements();
		this.pXliaNamedElement = new XliaNamedElementElements();
		this.pXliaObject = new XliaObjectElements();
		this.pXliaAttribute = new XliaAttributeElements();
		this.pEBoolean = new EBooleanElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.INT");
		this.pEInt = new EIntElements();
		this.pEInteger = new EIntegerElements();
		this.pEFloat = new EFloatElements();
		this.pEDouble = new EDoubleElements();
		this.tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.CHARACTER");
		this.pECharacter = new ECharacterElements();
		this.pEString = new EStringElements();
		this.pReservedWord = new ReservedWordElements();
		this.tXLIA_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.efm.formalml.xtext.FormalML.XLIA_ID");
		this.pESIdentifier = new ESIdentifierElements();
		this.pESUfid = new ESUfidElements();
		this.pUnrestrictedName = new UnrestrictedNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPotentiallyAmbiguousQualifiedName = new PotentiallyAmbiguousQualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.pUnqualifiedName = new UnqualifiedNameElements();
		this.pNameBinding = new NameBindingElements();
		this.eVisibilityKind = new VisibilityKindElements();
		this.eDesignKind = new DesignKindElements();
		this.eDesignInstanceKind = new DesignInstanceKindElements();
		this.pSystem = new SystemElements();
		this.pAnyMachineBlock = new AnyMachineBlockElements();
		this.pInstanceMachine = new InstanceMachineElements();
		this.pSlotParameter = new SlotParameterElements();
		this.pSlotProperty = new SlotPropertyElements();
		this.pMachineBlock = new MachineBlockElements();
		this.pProcedure = new ProcedureElements();
		this.pProcedureExecution = new ProcedureExecutionElements();
		this.pBehavior = new BehaviorElements();
		this.pMoeBehavior = new MoeBehaviorElements();
		this.pStatemachine = new StatemachineElements();
		this.pStatemachineRegion = new StatemachineRegionElements();
		this.pStatemachineRegionLite = new StatemachineRegionLiteElements();
		this.pState = new StateElements();
		this.pCompositeState = new CompositeStateElements();
		this.pMoeCompositeStateRoutines = new MoeCompositeStateRoutinesElements();
		this.pSimpleState = new SimpleStateElements();
		this.pMoeSimpleStateRoutines = new MoeSimpleStateRoutinesElements();
		this.pStartState = new StartStateElements();
		this.pMoeStartStateRoutines = new MoeStartStateRoutinesElements();
		this.pFinalState = new FinalStateElements();
		this.pMoeFinalStateRoutines = new MoeFinalStateRoutinesElements();
		this.pPseudostate = new PseudostateElements();
		this.pOtherPseudostate = new OtherPseudostateElements();
		this.ePseudostateKind = new PseudostateKindElements();
		this.pPseudostateInitial = new PseudostateInitialElements();
		this.ePseudostateInitialKind = new PseudostateInitialKindElements();
		this.pEndingPseudostate = new EndingPseudostateElements();
		this.eEndingPseudostateKind = new EndingPseudostateKindElements();
		this.pModelOfComputation = new ModelOfComputationElements();
		this.pModelOfExecution = new ModelOfExecutionElements();
		this.pMoeRoutine = new MoeRoutineElements();
		this.pRoutine = new RoutineElements();
		this.pModelOfInteraction = new ModelOfInteractionElements();
		this.pRoute = new RouteElements();
		this.pComRouteProtocol = new ComRouteProtocolElements();
		this.pConnection = new ConnectionElements();
		this.pComProtocol = new ComProtocolElements();
		this.eComProtocolKind = new ComProtocolKindElements();
		this.eComEnvRdvProtocolKind = new ComEnvRdvProtocolKindElements();
		this.eComMultiRdvProtocolKind = new ComMultiRdvProtocolKindElements();
		this.eBufferProtocolKind = new BufferProtocolKindElements();
		this.eComCastKing = new ComCastKingElements();
		this.pComPoint = new ComPointElements();
		this.pComPointProtocol = new ComPointProtocolElements();
		this.pComElement = new ComElementElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pTypeDefinitionImpl = new TypeDefinitionImplElements();
		this.pDataTypeMultiplicity = new DataTypeMultiplicityElements();
		this.pDataTypeReference = new DataTypeReferenceElements();
		this.pOtherDataTypeDefinition = new OtherDataTypeDefinitionElements();
		this.pOtherDataTypeDefinitionImpl = new OtherDataTypeDefinitionImplElements();
		this.pDataType = new DataTypeElements();
		this.pSimpleDataType = new SimpleDataTypeElements();
		this.pStructuredDataType = new StructuredDataTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pPrimitiveNumberType = new PrimitiveNumberTypeElements();
		this.ePrimitiveNumberSign = new PrimitiveNumberSignElements();
		this.pPrimitiveIntegerType = new PrimitiveIntegerTypeElements();
		this.pPrimitiveRationalType = new PrimitiveRationalTypeElements();
		this.pPrimitiveFloatType = new PrimitiveFloatTypeElements();
		this.pPrimitiveRealType = new PrimitiveRealTypeElements();
		this.pPrimitiveTimeType = new PrimitiveTimeTypeElements();
		this.pPrimitiveTimeNumberType = new PrimitiveTimeNumberTypeElements();
		this.pOtherPrimitiveType = new OtherPrimitiveTypeElements();
		this.pPrimitiveBooleanType = new PrimitiveBooleanTypeElements();
		this.pPrimitiveCharacterType = new PrimitiveCharacterTypeElements();
		this.pPrimitiveStringType = new PrimitiveStringTypeElements();
		this.ePrimitiveInstanceKind = new PrimitiveInstanceKindElements();
		this.pPrimitiveInstanceType = new PrimitiveInstanceTypeElements();
		this.pIntervalType = new IntervalTypeElements();
		this.pIntervalTypeDefinition = new IntervalTypeDefinitionElements();
		this.pIntervalTypeDefinitionImpl = new IntervalTypeDefinitionImplElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pCollectionTypeDefinition = new CollectionTypeDefinitionElements();
		this.pCollectionTypeDefinitionImpl = new CollectionTypeDefinitionImplElements();
		this.eCollectionKind = new CollectionKindElements();
		this.pEnumerationType = new EnumerationTypeElements();
		this.pEnumerationTypeDefinition = new EnumerationTypeDefinitionElements();
		this.pEnumerationTypeDefinitionImpl = new EnumerationTypeDefinitionImplElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pStructureType = new StructureTypeElements();
		this.pStructureTypeDefinition = new StructureTypeDefinitionElements();
		this.pStructureTypeDefinitionImpl = new StructureTypeDefinitionImplElements();
		this.pUnionType = new UnionTypeElements();
		this.pUnionTypeDefinition = new UnionTypeDefinitionElements();
		this.pUnionTypeDefinitionImpl = new UnionTypeDefinitionImplElements();
		this.pChoiceType = new ChoiceTypeElements();
		this.pChoiceTypeDefinition = new ChoiceTypeDefinitionElements();
		this.pChoiceTypeDefinitionImpl = new ChoiceTypeDefinitionImplElements();
		this.pModifier = new ModifierElements();
		this.pVariable = new VariableElements();
		this.pVariableImpl = new VariableImplElements();
		this.pOnWriteRoutine = new OnWriteRoutineElements();
		this.pVariableRoutineParameter = new VariableRoutineParameterElements();
		this.ePublicVariableVisibilityKind = new PublicVariableVisibilityKindElements();
		this.pVariablePublic = new VariablePublicElements();
		this.eProtectedVariableVisibilityKind = new ProtectedVariableVisibilityKindElements();
		this.pVariableProtected = new VariableProtectedElements();
		this.ePrivateVariableVisibilityKind = new PrivateVariableVisibilityKindElements();
		this.pVariablePrivate = new VariablePrivateElements();
		this.eParameterDirectionKind = new ParameterDirectionKindElements();
		this.pFunctionalParameterSet = new FunctionalParameterSetElements();
		this.pFunctionalParameter = new FunctionalParameterElements();
		this.pFormalParameterSet = new FormalParameterSetElements();
		this.pFormalParameter = new FormalParameterElements();
		this.eBlockParameterDirectionKind = new BlockParameterDirectionKindElements();
		this.pBlockParameterSet = new BlockParameterSetElements();
		this.eParameterInputDirectionKind = new ParameterInputDirectionKindElements();
		this.pParameterInput = new ParameterInputElements();
		this.eParameterInoutDirectionKind = new ParameterInoutDirectionKindElements();
		this.pParameterInout = new ParameterInoutElements();
		this.eParameterOutputDirectionKind = new ParameterOutputDirectionKindElements();
		this.pParameterOutput = new ParameterOutputElements();
		this.eParameterReturnDirectionKind = new ParameterReturnDirectionKindElements();
		this.pParameterReturn = new ParameterReturnElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pBufferContainerType = new BufferContainerTypeElements();
		this.eBufferContainerKind = new BufferContainerKindElements();
		this.pBuffer = new BufferElements();
		this.pBufferImpl = new BufferImplElements();
		this.ePublicBufferVisibilityKind = new PublicBufferVisibilityKindElements();
		this.pBufferPublic = new BufferPublicElements();
		this.eProtectedBufferVisibilityKind = new ProtectedBufferVisibilityKindElements();
		this.pBufferProtected = new BufferProtectedElements();
		this.ePrivateBufferVisibilityKind = new PrivateBufferVisibilityKindElements();
		this.pBufferPrivate = new BufferPrivateElements();
		this.pPort = new PortElements();
		this.pPortImpl = new PortImplElements();
		this.ePublicPortVisibilityKind = new PublicPortVisibilityKindElements();
		this.pPortPublic = new PortPublicElements();
		this.eProtectedPortVisibilityKind = new ProtectedPortVisibilityKindElements();
		this.pPortProtected = new PortProtectedElements();
		this.ePrivatePortVisibilityKind = new PrivatePortVisibilityKindElements();
		this.pPortPrivate = new PortPrivateElements();
		this.pSignal = new SignalElements();
		this.pSignalImpl = new SignalImplElements();
		this.ePublicSignalVisibilityKind = new PublicSignalVisibilityKindElements();
		this.pSignalPublic = new SignalPublicElements();
		this.eProtectedSignalVisibilityKind = new ProtectedSignalVisibilityKindElements();
		this.pSignalProtected = new SignalProtectedElements();
		this.ePrivateSignalVisibilityKind = new PrivateSignalVisibilityKindElements();
		this.pSignalPrivate = new SignalPrivateElements();
		this.eChannelDirection = new ChannelDirectionElements();
		this.pChannel = new ChannelElements();
		this.pSignalReference = new SignalReferenceElements();
		this.ePublicChannelVisibilityKind = new PublicChannelVisibilityKindElements();
		this.pChannelPublic = new ChannelPublicElements();
		this.eProtectedChannelVisibilityKind = new ProtectedChannelVisibilityKindElements();
		this.pChannelProtected = new ChannelProtectedElements();
		this.ePrivateChannelVisibilityKind = new PrivateChannelVisibilityKindElements();
		this.pChannelPrivate = new ChannelPrivateElements();
		this.pTransition = new TransitionElements();
		this.pTransitionMoe = new TransitionMoeElements();
		this.eTransitionMoc = new TransitionMocElements();
		this.pTransitionBehavior = new TransitionBehaviorElements();
		this.pTransitionTrigger = new TransitionTriggerElements();
		this.pTransitionGuard = new TransitionGuardElements();
		this.pTransitionGuardExpression = new TransitionGuardExpressionElements();
		this.pTransitionTimedGuard = new TransitionTimedGuardElements();
		this.pTransitionEffect = new TransitionEffectElements();
		this.pTransitionEffectStatement = new TransitionEffectStatementElements();
		this.pStatement = new StatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pBlockStatementScheduler = new BlockStatementSchedulerElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pGuardStatement = new GuardStatementElements();
		this.pTimedGuardStatement = new TimedGuardStatementElements();
		this.pEventGuardStatement = new EventGuardStatementElements();
		this.pCheckSatGuardStatement = new CheckSatGuardStatementElements();
		this.pInputComStatement = new InputComStatementElements();
		this.pOutputComStatement = new OutputComStatementElements();
		this.pExpressionAsMachine = new ExpressionAsMachineElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIfStatement = new ElseIfStatementElements();
		this.pWhileDoStatement = new WhileDoStatementElements();
		this.pDoWhileStatement = new DoWhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForAssignmentExpression = new ForAssignmentExpressionElements();
		this.pForEachStatement = new ForEachStatementElements();
		this.pInterruptStatement = new InterruptStatementElements();
		this.eInterruptStatementKind = new InterruptStatementKindElements();
		this.pActivityStatement = new ActivityStatementElements();
		this.eOPERATOR_ACTIVITY = new OPERATOR_ACTIVITYElements();
		this.pInvokeStatement = new InvokeStatementElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pLeftHandSideExpression = new LeftHandSideExpressionElements();
		this.pConditionalTestExpression = new ConditionalTestExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pBitwiseOrExpression = new BitwiseOrExpressionElements();
		this.pBitwiseXorExpression = new BitwiseXorExpressionElements();
		this.pBitwiseAndExpression = new BitwiseAndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPostfixUnaryExpression = new PostfixUnaryExpressionElements();
		this.pIncrementOrDecrementPostfixExpression = new IncrementOrDecrementPostfixExpressionElements();
		this.pPrefixUnaryExpression = new PrefixUnaryExpressionElements();
		this.pIncrementOrDecrementPrefixExpression = new IncrementOrDecrementPrefixExpressionElements();
		this.pAffixOperator = new AffixOperatorElements();
		this.pNewfreshExpression = new NewfreshExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pArithmeticUnaryExpression = new ArithmeticUnaryExpressionElements();
		this.pArithmeticUnaryOperator = new ArithmeticUnaryOperatorElements();
		this.pLogicalUnaryExpression = new LogicalUnaryExpressionElements();
		this.pBitwiseUnaryExpression = new BitwiseUnaryExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pInvokeExpression = new InvokeExpressionElements();
		this.pInvokeExpressionDeprecated = new InvokeExpressionDeprecatedElements();
		this.pInstantiationExpression = new InstantiationExpressionElements();
		this.pDynamicInstanceSpecification = new DynamicInstanceSpecificationElements();
		this.pTupleParameterExpression = new TupleParameterExpressionElements();
		this.pMixTupleExpressionList = new MixTupleExpressionListElements();
		this.pPositionalTupleExpressionList = new PositionalTupleExpressionListElements();
		this.pNamedExpression = new NamedExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pLiteralReferenceableExpression = new LiteralReferenceableExpressionElements();
		this.pLiteralTerminalExpression = new LiteralTerminalExpressionElements();
		this.pLiteralBooleanExpression = new LiteralBooleanExpressionElements();
		this.pLiteralIntegerExpression = new LiteralIntegerExpressionElements();
		this.pLiteralRationalExpression = new LiteralRationalExpressionElements();
		this.pLiteralFloatExpression = new LiteralFloatExpressionElements();
		this.pLiteralCharacterExpression = new LiteralCharacterExpressionElements();
		this.pLiteralStringExpression = new LiteralStringExpressionElements();
		this.pLiteralNullExpression = new LiteralNullExpressionElements();
		this.pLiteralCollectionExpression = new LiteralCollectionExpressionElements();
		this.pLiteralReferenceExpression = new LiteralReferenceExpressionElements();
		this.pLiteralReferenceElement = new LiteralReferenceElementElements();
		this.pLiteralPureReferenceElement = new LiteralPureReferenceElementElements();
		this.pLiteralReferenceVariableContext = new LiteralReferenceVariableContextElements();
		this.pLiteralTimeExpression = new LiteralTimeExpressionElements();
		this.pLiteralTimeDeltaExpression = new LiteralTimeDeltaExpressionElements();
		this.pLiteralReferenceMachineContext = new LiteralReferenceMachineContextElements();
		this.pLiteralThisExpression = new LiteralThisExpressionElements();
		this.pLiteralSelfExpression = new LiteralSelfExpressionElements();
		this.pLiteralParentExpression = new LiteralParentExpressionElements();
		this.pLiteralSuperExpression = new LiteralSuperExpressionElements();
		this.pLiteralSystemExpression = new LiteralSystemExpressionElements();
		this.pLiteralEnvExpression = new LiteralEnvExpressionElements();
		this.pLiteralPureReferenceExpression = new LiteralPureReferenceExpressionElements();
		this.pValueSelectionExpression = new ValueSelectionExpressionElements();
		this.pValuePureNamedMachineExpression = new ValuePureNamedMachineExpressionElements();
		this.eValueDotFieldExpressionKind = new ValueDotFieldExpressionKindElements();
		this.eValueColonFieldExpressionKind = new ValueColonFieldExpressionKindElements();
		this.eValueDoubleColonFieldExpressionKind = new ValueDoubleColonFieldExpressionKindElements();
		this.eValueArrowFieldExpressionKind = new ValueArrowFieldExpressionKindElements();
		this.eValueIndexExpressionKind = new ValueIndexExpressionKindElements();
		this.eValueParameterExpressionKind = new ValueParameterExpressionKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.efm.formalml.xtext.FormalML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//////////////////////////////////////////////////////////////////////////////////
	//// Main Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Xlia XliaModel:
	//	prolog=XliaPrologObject
	//	system=System
	public XliaElements getXliaAccess() {
		return pXlia;
	}
	
	public ParserRule getXliaRule() {
		return getXliaAccess().getRule();
	}
	
	//XliaPrologObject XliaObject:
	//	name=('@FormalML' | '@xlia' | '@xfsp') '<'
	//	elements+=XliaPrologAttribute '>:'
	//	elements+=XliaOptionObject?
	public XliaPrologObjectElements getXliaPrologObjectAccess() {
		return pXliaPrologObject;
	}
	
	public ParserRule getXliaPrologObjectRule() {
		return getXliaPrologObjectAccess().getRule();
	}
	
	//XliaPrologAttribute XliaAttribute:
	//	name=('system' | 'package') (',' value=(LiteralFloatExpression | LiteralStringExpression))?
	public XliaPrologAttributeElements getXliaPrologAttributeAccess() {
		return pXliaPrologAttribute;
	}
	
	public ParserRule getXliaPrologAttributeRule() {
		return getXliaPrologAttributeAccess().getRule();
	}
	
	////XliaPrologAttribute returns XliaAttribute
	////	: (name = 'model')?    value=XliaModelKind
	////	| (name = 'version')?
	////		value=( LiteralFloatExpression | LiteralStringExpression )
	////	;
	////
	////XliaModelKind returns fmlExpr::LiteralStringExpression
	////	: value=( 'system' | 'package' )
	////	;
	//XliaOptionObject XliaObject:
	//	name='@option' '{'
	//	elements+=XliaNamedElement*
	//	'}'
	public XliaOptionObjectElements getXliaOptionObjectAccess() {
		return pXliaOptionObject;
	}
	
	public ParserRule getXliaOptionObjectRule() {
		return getXliaOptionObjectAccess().getRule();
	}
	
	//XliaNamedElement:
	//	XliaObject
	//	| XliaAttribute;
	public XliaNamedElementElements getXliaNamedElementAccess() {
		return pXliaNamedElement;
	}
	
	public ParserRule getXliaNamedElementRule() {
		return getXliaNamedElementAccess().getRule();
	}
	
	//XliaObject:
	//	name=XLIA_ID '{'
	//	elements+=XliaNamedElement*
	//	'}';
	public XliaObjectElements getXliaObjectAccess() {
		return pXliaObject;
	}
	
	public ParserRule getXliaObjectRule() {
		return getXliaObjectAccess().getRule();
	}
	
	//XliaAttribute:
	//	name=XLIA_ID '=' value=Expression ';';
	public XliaAttributeElements getXliaAttributeAccess() {
		return pXliaAttribute;
	}
	
	public ParserRule getXliaAttributeRule() {
		return getXliaAttributeAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Primitive Value
	//////////////////////////////////////////////////////////////////////////////////
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EInteger ecore::ELong:
	//	'-'? INT
	public EIntegerElements getEIntegerAccess() {
		return pEInteger;
	}
	
	public ParserRule getEIntegerRule() {
		return getEIntegerAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//terminal CHARACTER:
	//	"'" . "'";
	public TerminalRule getCHARACTERRule() {
		return tCHARACTER;
	}
	
	//ECharacter ecore::EChar:
	//	CHARACTER
	public ECharacterElements getECharacterAccess() {
		return pECharacter;
	}
	
	public ParserRule getECharacterRule() {
		return getECharacterAccess().getRule();
	}
	
	//EString:
	//	STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	////QualifiedName returns ecore::EString
	////	: ID ( '[' ID ']' )? '.' ID ( '[' ID ']' )? | ID
	////	;
	//ReservedWord:
	//	'package' | 'system' | 'machine'
	//	| 'statemachine' | 'state' | 'pseudostate' | 'vertex'
	//	| 'procedure' | 'macro' | 'routine' | 'transition'
	//	| 'public' | 'private' | 'protected'
	//	| 'static' | 'final' | 'reference' | 'volatile' | 'transient'
	//	| 'model' | 'prototype' | 'instance'
	//	| 'timed' | 'input_enabled'
	//	| 'port' | 'signal' | 'buffer' | 'channel'
	//	| 'var' | 'val' | 'const'
	//	| 'input' | 'in' | 'inout' | 'output' | 'out' | 'return'
	//	| 'simple' | 'start' | 'final' | 'initial' | 'terminal' | 'junction'
	//	| 'choice' | 'fork' | 'join' | 'dhistory' | 'shistory'
	//	| 'route' | 'connect' | 'env' | 'rdv' | 'multi_rdv' | 'buffer'
	//	| 'unicast' | 'anycast' | 'multicast' | 'broadcast'
	//	| 'boolean' | 'bool' | 'char' | 'string' | 'message'
	//	| 'integer' | 'int' | 'uinteger' | 'uint'
	//	| 'rational' | 'rat' | 'urational' | 'urat'
	//	| 'time' | 'clock'
	//	| 'float' | 'double' | 'real' | 'ufloat' | 'udouble' | 'ureal'
	//	| 'interval' | 'enum' | 'struct' | 'union'
	//	| 'vector' | 'rvector' | 'list' | 'set' | 'bag' | 'fifo' | 'lifo'
	//	| 'guard' | 'tguard' | 'event' | 'checksat' | 'via' | 'newfresh'
	//	| 'break' | 'continue' | 'exit' | 'init' | 'destroy' | 'stop' | 'abort'
	//	| 'restart' | 'suspend' | 'resume' | 'wait' | 'disable' | 'enable'
	//	| 'schedule' | 'irun' | 'run' | 'rtc' | 'call' | 'new' | 'ctor'
	//	| 'this' | 'self' | 'parent' | 'super' | 'null';
	public ReservedWordElements getReservedWordAccess() {
		return pReservedWord;
	}
	
	public ParserRule getReservedWordRule() {
		return getReservedWordAccess().getRule();
	}
	
	//terminal XLIA_ID:
	//	('a'..'z' | 'A'..'Z' | '_' | '#') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '#')*;
	public TerminalRule getXLIA_IDRule() {
		return tXLIA_ID;
	}
	
	//ESIdentifier:
	//	XLIA_ID;
	public ESIdentifierElements getESIdentifierAccess() {
		return pESIdentifier;
	}
	
	public ParserRule getESIdentifierRule() {
		return getESIdentifierAccess().getRule();
	}
	
	//ESUfid:
	//	XLIA_ID (('.' | ':' | '::') XLIA_ID)*;
	public ESUfidElements getESUfidAccess() {
		return pESUfid;
	}
	
	public ParserRule getESUfidRule() {
		return getESUfidAccess().getRule();
	}
	
	//UnrestrictedName:
	//	STRING;
	public UnrestrictedNameElements getUnrestrictedNameAccess() {
		return pUnrestrictedName;
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}
	
	//QualifiedName fmlCommon::QualifiedName:
	//	UnqualifiedName ('::' nameBinding+=NameBinding)* ('.' nameBinding+=NameBinding)*
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PotentiallyAmbiguousQualifiedName fmlCommon::QualifiedName:
	//	UnqualifiedName ('::' nameBinding+=NameBinding)* (isAmbiguous?='.' nameBinding+=NameBinding ('.'
	//	nameBinding+=NameBinding)*)?
	public PotentiallyAmbiguousQualifiedNameElements getPotentiallyAmbiguousQualifiedNameAccess() {
		return pPotentiallyAmbiguousQualifiedName;
	}
	
	public ParserRule getPotentiallyAmbiguousQualifiedNameRule() {
		return getPotentiallyAmbiguousQualifiedNameAccess().getRule();
	}
	
	//ColonQualifiedName fmlCommon::QualifiedName:
	//	UnqualifiedName ('::' nameBinding+=NameBinding)+
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}
	
	//DotQualifiedName fmlCommon::QualifiedName:
	//	UnqualifiedName ('.' nameBinding+=NameBinding)+
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}
	
	//UnqualifiedName fmlCommon::QualifiedName:
	//	nameBinding+=NameBinding
	public UnqualifiedNameElements getUnqualifiedNameAccess() {
		return pUnqualifiedName;
	}
	
	public ParserRule getUnqualifiedNameRule() {
		return getUnqualifiedNameAccess().getRule();
	}
	
	//NameBinding:
	//	XLIA_ID;
	public NameBindingElements getNameBindingAccess() {
		return pNameBinding;
	}
	
	public ParserRule getNameBindingRule() {
		return getNameBindingAccess().getRule();
	}
	
	//enum VisibilityKind returns fmlCommon::VisibilityKind:
	//	public | private | protected | package;
	public VisibilityKindElements getVisibilityKindAccess() {
		return eVisibilityKind;
	}
	
	public EnumRule getVisibilityKindRule() {
		return getVisibilityKindAccess().getRule();
	}
	
	//enum DesignKind returns fmlInfra::DesignKind:
	//	model | prototype;
	public DesignKindElements getDesignKindAccess() {
		return eDesignKind;
	}
	
	public EnumRule getDesignKindRule() {
		return getDesignKindAccess().getRule();
	}
	
	//enum DesignInstanceKind returns fmlInfra::DesignKind:
	//	instance;
	public DesignInstanceKindElements getDesignInstanceKindAccess() {
		return eDesignInstanceKind;
	}
	
	public EnumRule getDesignInstanceKindRule() {
		return getDesignInstanceKindAccess().getRule();
	}
	
	//System fmlInfra::System:
	//	(visibility=VisibilityKind?
	//	& (timed?='timed' | input_enabled?='input_enabled')?)
	//	'system' ('<' 'moc:'? ('and' | 'or') '>')?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	('@property:' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	| '@public:' (port+=PortPublic
	//	| signal+=SignalPublic
	//	| buffer+=BufferPublic
	//	| channel+=ChannelPublic
	//	| typedef+=TypeDefinition
	//	| property+=VariablePublic)*
	//	| '@protected:' (port+=PortProtected
	//	| signal+=SignalProtected
	//	| buffer+=BufferProtected
	//	| channel+=ChannelProtected
	//	| typedef+=TypeDefinition
	//	| property+=VariableProtected)*
	//	| '@private:' (port+=PortPrivate
	//	| signal+=SignalPrivate
	//	| buffer+=BufferPrivate
	//	| channel+=ChannelPrivate
	//	| typedef+=TypeDefinition
	//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
	//	| '@procedure:' procedure+=Procedure+)*
	//	| (routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock
	//	| instance+=InstanceMachine)+
	//	| '@model:' machine+=AnyMachineBlock*
	//	| '@prototype:' machine+=AnyMachineBlock*
	//	| '@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+
	//	| '@statemachine:' behavior+=Statemachine+)*
	//	main=MoeBehavior
	//	'}'
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//AnyMachineBlock fmlInfra::Machine:
	//	MachineBlock
	//	| Statemachine
	public AnyMachineBlockElements getAnyMachineBlockAccess() {
		return pAnyMachineBlock;
	}
	
	public ParserRule getAnyMachineBlockRule() {
		return getAnyMachineBlockAccess().getRule();
	}
	
	//InstanceMachine fmlInfra::InstanceMachine:
	//	'instance' ('machine' | 'statemachine')?
	//	'<' 'model:'? model=[fmlInfra::Machine|ESUfid] '>'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? (('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')')? ';'
	//	| '{' (slot+=SlotProperty ';')* '}')
	public InstanceMachineElements getInstanceMachineAccess() {
		return pInstanceMachine;
	}
	
	public ParserRule getInstanceMachineRule() {
		return getInstanceMachineAccess().getRule();
	}
	
	//SlotParameter fmlInfra::SlotProperty:
	//	xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] ':' value=Expression
	public SlotParameterElements getSlotParameterAccess() {
		return pSlotParameter;
	}
	
	public ParserRule getSlotParameterRule() {
		return getSlotParameterAccess().getRule();
	}
	
	//SlotProperty fmlInfra::SlotProperty:
	//	xliaProperty=[fmlInfra::PropertyDefinition|ESIdentifier] '=' value=Expression
	public SlotPropertyElements getSlotPropertyAccess() {
		return pSlotProperty;
	}
	
	public ParserRule getSlotPropertyRule() {
		return getSlotPropertyAccess().getRule();
	}
	
	//MachineBlock fmlInfra::Machine:
	//	(visibility=VisibilityKind?
	//	& (timed?='timed' | input_enabled?='input_enabled')?
	//	& design=DesignKind?)
	//	'machine' ('<' 'moc:'? ('and' | 'or') '>')?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	('@property:' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	| '@public:' (port+=PortPublic
	//	| signal+=SignalPublic
	//	| buffer+=BufferPublic
	//	| channel+=ChannelPublic
	//	| typedef+=TypeDefinition
	//	| property+=VariablePublic)*
	//	| '@protected:' (port+=PortProtected
	//	| signal+=SignalProtected
	//	| buffer+=BufferProtected
	//	| channel+=ChannelProtected
	//	| typedef+=TypeDefinition
	//	| property+=VariableProtected)*
	//	| '@private:' (port+=PortPrivate
	//	| signal+=SignalPrivate
	//	| buffer+=BufferPrivate
	//	| channel+=ChannelPrivate
	//	| typedef+=TypeDefinition
	//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
	//	| '@procedure:' procedure+=Procedure+)*
	//	| (routine+=Routine | procedure+=Procedure)+) (('@composite:' | '@machine:') (machine+=AnyMachineBlock
	//	| instance+=InstanceMachine)+
	//	| '@model:' machine+=AnyMachineBlock*
	//	| '@prototype:' machine+=AnyMachineBlock*
	//	| '@instance:' instance+=InstanceMachine*)* ('@behavior:' behavior+=Behavior+
	//	| '@statemachine:' behavior+=Statemachine+)*
	//	main=MoeBehavior
	//	'}'
	public MachineBlockElements getMachineBlockAccess() {
		return pMachineBlock;
	}
	
	public ParserRule getMachineBlockRule() {
		return getMachineBlockAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Procedure View Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Procedure fmlInfra::Procedure:
	//	visibility=VisibilityKind?
	//	'procedure' ('<' 'moc:'? ('and' | 'or') '>')?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? (('(' (parameter+=FunctionalParameter (','
	//	parameter+=FunctionalParameter)*)? ')')? ('-->' (parameter+=FormalParameter
	//	| '(' parameter+=FormalParameter (',' parameter+=FormalParameter)* ')'))?)?
	//	'{' ('@parameter:' ('input' (parameter+=ParameterInput
	//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
	//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
	//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
	//	| '{' parameter+=ParameterReturn+ '}'))*
	//	| (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*) ('@input:' (parameter+=ParameterInput
	//	| '{' parameter+=ParameterInput+ '}')*
	//	| '@inout:' (parameter+=ParameterInout
	//	| '{' parameter+=ParameterInout+ '}')*
	//	| '@output:' (parameter+=ParameterOutput
	//	| '{' parameter+=ParameterOutput+ '}')*
	//	| '@return:' (parameter+=ParameterReturn
	//	| '{' parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	| '@public:' (port+=PortPublic
	//	| signal+=SignalPublic
	//	| buffer+=BufferPublic
	//	| channel+=ChannelPublic
	//	| typedef+=TypeDefinition
	//	| property+=VariablePublic)*
	//	| '@protected:' (port+=PortProtected
	//	| signal+=SignalProtected
	//	| buffer+=BufferProtected
	//	| channel+=ChannelProtected
	//	| typedef+=TypeDefinition
	//	| property+=VariableProtected)*
	//	| '@private:' (port+=PortPrivate
	//	| signal+=SignalPrivate
	//	| buffer+=BufferPrivate
	//	| channel+=ChannelPrivate
	//	| typedef+=TypeDefinition
	//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
	//	| '@procedure:' procedure+=Procedure+)*
	//	| (routine+=Routine | procedure+=Procedure)+) (region+=StatemachineRegion+
	//	| region+=StatemachineRegionLite)?
	//	execution=ProcedureExecution?
	//	//		& ( computation=ModelOfComputation )?
	//	//		& ( interaction=ModelOfInteraction )?
	//	'}'
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//ProcedureExecution fmlInfra::ModelOfExecution:
	//	{fmlInfra::ModelOfExecution} '@moe:'? (('@schedule' scheduleRoutine=moeRoutine)?
	//	& ('@run' runRoutine=moeRoutine)?)
	public ProcedureExecutionElements getProcedureExecutionAccess() {
		return pProcedureExecution;
	}
	
	public ParserRule getProcedureExecutionRule() {
		return getProcedureExecutionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Behavior View Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Behavior fmlInfra::Behavior:
	//	Statemachine
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//MoeBehavior fmlInfra::Behavior:
	//	{fmlInfra::Behavior} ('@local:' (port+=PortPrivate
	//	| signal+=SignalPrivate
	//	| buffer+=BufferPrivate
	//	| channel+=ChannelPrivate
	//	| typedef+=TypeDefinition
	//	| property+=VariablePrivate)*)? (execution=ModelOfExecution?
	//	//		& ( computation=ModelOfComputation )?
	//	& interaction=ModelOfInteraction?)
	public MoeBehaviorElements getMoeBehaviorAccess() {
		return pMoeBehavior;
	}
	
	public ParserRule getMoeBehaviorRule() {
		return getMoeBehaviorAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Statemachine Behavior View Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Statemachine fmlStmchn::Statemachine:
	//	{fmlStmchn::Statemachine} (visibility=VisibilityKind?
	//	& (timed?='timed' | input_enabled?='input_enabled')?
	//	& design=DesignKind?)
	//	'statemachine' ('<' 'moc:'? ('or' | 'and') '>')?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' ('@parameter:' ('input' (parameter+=ParameterInput
	//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
	//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
	//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
	//	| '{' parameter+=ParameterReturn+ '}'))*
	//	| (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*) ('@input:' (parameter+=ParameterInput
	//	| '{' parameter+=ParameterInput+ '}')*
	//	| '@inout:' (parameter+=ParameterInout
	//	| '{' parameter+=ParameterInout+ '}')*
	//	| '@output:' (parameter+=ParameterOutput
	//	| '{' parameter+=ParameterOutput+ '}')*
	//	| '@return:' (parameter+=ParameterReturn
	//	| '{' parameter+=ParameterReturn+ '}')*)* ('@property:' (port+=Port
	//	| signal+=Signal
	//	| buffer+=Buffer
	//	| channel+=Channel
	//	| typedef+=TypeDefinition
	//	| property+=Variable)*
	//	| '@public:' (port+=PortPublic
	//	| signal+=SignalPublic
	//	| buffer+=BufferPublic
	//	| channel+=ChannelPublic
	//	| typedef+=TypeDefinition
	//	| property+=VariablePublic)*
	//	| '@protected:' (port+=PortProtected
	//	| signal+=SignalProtected
	//	| buffer+=BufferProtected
	//	| channel+=ChannelProtected
	//	| typedef+=TypeDefinition
	//	| property+=VariableProtected)*
	//	| '@private:' (port+=PortPrivate
	//	| signal+=SignalPrivate
	//	| buffer+=BufferPrivate
	//	| channel+=ChannelPrivate
	//	| typedef+=TypeDefinition
	//	| property+=VariablePrivate)*)* ((('@routine:' | '@macro:') routine+=Routine+
	//	| '@procedure:' procedure+=Procedure+)*
	//	| (routine+=Routine | procedure+=Procedure)+) (region+=StatemachineRegion+
	//	| region+=StatemachineRegionLite) (execution=ModelOfExecution?
	//	//		& ( computation=ModelOfComputation )?
	//	& interaction=ModelOfInteraction?)
	//	'}'
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//StatemachineRegion fmlStmchn::Region:
	//	{fmlStmchn::Region} (('@region:' | '@statemachine:') | ('@region<' | '@statemachine<') name=ESIdentifier
	//	unrestrictedName=UnrestrictedName? '>:') (vertex+=State
	//	| vertex+=Pseudostate)+
	public StatemachineRegionElements getStatemachineRegionAccess() {
		return pStatemachineRegion;
	}
	
	public ParserRule getStatemachineRegionRule() {
		return getStatemachineRegionAccess().getRule();
	}
	
	//StatemachineRegionLite fmlStmchn::Region:
	//	(vertex+=State | vertex+=Pseudostate)+
	public StatemachineRegionLiteElements getStatemachineRegionLiteAccess() {
		return pStatemachineRegionLite;
	}
	
	public ParserRule getStatemachineRegionLiteRule() {
		return getStatemachineRegionLiteAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// State Rules
	//////////////////////////////////////////////////////////////////////////////////
	//State fmlStmchn::State:
	//	CompositeState
	//	| StartState
	//	| SimpleState
	//	| FinalState
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// CompositeState Rules
	//////////////////////////////////////////////////////////////////////////////////
	//CompositeState fmlStmchn::State:
	//	{fmlStmchn::State} composite?='state' '<' 'moc:'? ('or' | orthogonal?='and') '>'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' ((region+=StatemachineRegion
	//	| '@moe:' moe+=moeCompositeStateRoutines*
	//	| '@transition:' transition+=Transition*)+
	//	| region+=StatemachineRegionLite (transition+=Transition
	//	| moe+=moeCompositeStateRoutines)*)
	//	'}'
	//	| ';')
	public CompositeStateElements getCompositeStateAccess() {
		return pCompositeState;
	}
	
	public ParserRule getCompositeStateRule() {
		return getCompositeStateAccess().getRule();
	}
	
	//moeCompositeStateRoutines fmlInfra::Routine:
	//	{fmlInfra::Routine} name=('@init' | '@final' | '@enable' | '@disable'
	//	| '@concurrency' | '@schedule' | '@irun' | '@run') bodyBlock=BlockStatement
	public MoeCompositeStateRoutinesElements getMoeCompositeStateRoutinesAccess() {
		return pMoeCompositeStateRoutines;
	}
	
	public ParserRule getMoeCompositeStateRoutinesRule() {
		return getMoeCompositeStateRoutinesAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// SimpleState Rules
	//////////////////////////////////////////////////////////////////////////////////
	//SimpleState fmlStmchn::State:
	//	{fmlStmchn::State} simple?='state' ('<' 'moc:'? 'simple' '>')?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' (transition+=Transition
	//	| moe+=moeSimpleStateRoutines)*
	//	'}'
	//	| ';')
	public SimpleStateElements getSimpleStateAccess() {
		return pSimpleState;
	}
	
	public ParserRule getSimpleStateRule() {
		return getSimpleStateAccess().getRule();
	}
	
	//moeSimpleStateRoutines fmlInfra::Routine:
	//	{fmlInfra::Routine} name=('@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
	public MoeSimpleStateRoutinesElements getMoeSimpleStateRoutinesAccess() {
		return pMoeSimpleStateRoutines;
	}
	
	public ParserRule getMoeSimpleStateRoutinesRule() {
		return getMoeSimpleStateRoutinesAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// StartState Rules
	//////////////////////////////////////////////////////////////////////////////////
	//StartState fmlStmchn::StartState:
	//	{fmlStmchn::StartState} (simple?='state' '<' 'moc:'? 'start' '>' name=ESIdentifier
	//	| simple?='#start') unrestrictedName=UnrestrictedName? ('{' (transition+=Transition
	//	| moe+=moeStartStateRoutines)*
	//	'}'
	//	| ';')
	public StartStateElements getStartStateAccess() {
		return pStartState;
	}
	
	public ParserRule getStartStateRule() {
		return getStartStateAccess().getRule();
	}
	
	//moeStartStateRoutines fmlInfra::Routine:
	//	{fmlInfra::Routine} name=('@init' | '@enable' | '@disable' | '@irun' / *| '@run'* /) bodyBlock=BlockStatement
	public MoeStartStateRoutinesElements getMoeStartStateRoutinesAccess() {
		return pMoeStartStateRoutines;
	}
	
	public ParserRule getMoeStartStateRoutinesRule() {
		return getMoeStartStateRoutinesAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// FinalState Rules
	//////////////////////////////////////////////////////////////////////////////////
	//FinalState fmlStmchn::FinalState:
	//	{fmlStmchn::FinalState} (simple?='state' '<' 'moc:'? 'final' '>' name=ESIdentifier
	//	| simple?='#final') unrestrictedName=UnrestrictedName? ('{'
	//	moe+=moeFinalStateRoutines*
	//	'}'
	//	| ';')
	public FinalStateElements getFinalStateAccess() {
		return pFinalState;
	}
	
	public ParserRule getFinalStateRule() {
		return getFinalStateAccess().getRule();
	}
	
	//moeFinalStateRoutines fmlInfra::Routine:
	//	{fmlInfra::Routine} name=('@enable' | '@final' / *| '@run'* /) bodyBlock=BlockStatement
	public MoeFinalStateRoutinesElements getMoeFinalStateRoutinesAccess() {
		return pMoeFinalStateRoutines;
	}
	
	public ParserRule getMoeFinalStateRoutinesRule() {
		return getMoeFinalStateRoutinesAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Pseudostate Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Pseudostate fmlStmchn::Pseudostate:
	//	PseudostateInitial
	//	| EndingPseudostate
	//	| OtherPseudostate
	public PseudostateElements getPseudostateAccess() {
		return pPseudostate;
	}
	
	public ParserRule getPseudostateRule() {
		return getPseudostateAccess().getRule();
	}
	
	//OtherPseudostate fmlStmchn::Pseudostate:
	//	{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=PseudostateKind '>'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{' transition+=Transition* '}'
	//	| ';')
	public OtherPseudostateElements getOtherPseudostateAccess() {
		return pOtherPseudostate;
	}
	
	public ParserRule getOtherPseudostateRule() {
		return getOtherPseudostateAccess().getRule();
	}
	
	//enum PseudostateKind returns fmlStmchn::PseudostateKind:
	//	junction | choice | junction='entryPoint'
	//	| choice='exitPoint'
	//	//	| initial ='initial'
	//	//		
	//	//	| terminate='terminal'
	//	//	| return   ='return'
	//
	//	| fork | join | deepHistory='dhistory'
	//	| shallowHistory='shistory';
	public PseudostateKindElements getPseudostateKindAccess() {
		return ePseudostateKind;
	}
	
	public EnumRule getPseudostateKindRule() {
		return getPseudostateKindAccess().getRule();
	}
	
	//PseudostateInitial fmlStmchn::Pseudostate:
	//	{fmlStmchn::Pseudostate} (('state' | 'pseudostate')
	//	'<' 'moc:'? kind=PseudostateInitialKind '>'
	//	name=(ESIdentifier | '#initial' | '#init') | name=('#initial' | '#init')) unrestrictedName=UnrestrictedName? ('{'
	//	transition+=Transition* '}' | ';')
	public PseudostateInitialElements getPseudostateInitialAccess() {
		return pPseudostateInitial;
	}
	
	public ParserRule getPseudostateInitialRule() {
		return getPseudostateInitialAccess().getRule();
	}
	
	//enum PseudostateInitialKind returns fmlStmchn::PseudostateKind:
	//	initial;
	public PseudostateInitialKindElements getPseudostateInitialKindAccess() {
		return ePseudostateInitialKind;
	}
	
	public EnumRule getPseudostateInitialKindRule() {
		return getPseudostateInitialKindAccess().getRule();
	}
	
	//EndingPseudostate fmlStmchn::Pseudostate:
	//	{fmlStmchn::Pseudostate} ('state' | 'pseudostate') '<' 'moc:'? kind=EndingPseudostateKind '>'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('{'
	//	moe+=moeFinalStateRoutines*
	//	'}'
	//	| ';')
	public EndingPseudostateElements getEndingPseudostateAccess() {
		return pEndingPseudostate;
	}
	
	public ParserRule getEndingPseudostateRule() {
		return getEndingPseudostateAccess().getRule();
	}
	
	//enum EndingPseudostateKind returns fmlStmchn::PseudostateKind:
	//	terminate='terminal'
	//	| return;
	public EndingPseudostateKindElements getEndingPseudostateKindAccess() {
		return eEndingPseudostateKind;
	}
	
	public EnumRule getEndingPseudostateKindRule() {
		return getEndingPseudostateKindAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Section Model Of Computation Rules
	//////////////////////////////////////////////////////////////////////////////////
	//ModelOfComputation fmlInfra::ModelOfComputation:
	//	{fmlInfra::ModelOfComputation}
	public ModelOfComputationElements getModelOfComputationAccess() {
		return pModelOfComputation;
	}
	
	public ParserRule getModelOfComputationRule() {
		return getModelOfComputationAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Section Model Of Execution Rules
	//////////////////////////////////////////////////////////////////////////////////
	//ModelOfExecution fmlInfra::ModelOfExecution:
	//	{fmlInfra::ModelOfExecution}
	//	'@moe:'
	//	routine+=Routine* (('@init' initRoutine=moeRoutine)?
	//	& ('@final' finalRoutine=moeRoutine)?
	//	& ('@enable' enableRoutine=moeRoutine)?
	//	& ('@disable' disableRoutine=moeRoutine)?
	//	& ('@concurrency' concurrencyRoutine=moeRoutine)?
	//	& ('@schedule' scheduleRoutine=moeRoutine)?
	//	& ('@irun' irunRoutine=moeRoutine)?
	//	& ('@run' runRoutine=moeRoutine)?) routine+=Routine*
	public ModelOfExecutionElements getModelOfExecutionAccess() {
		return pModelOfExecution;
	}
	
	public ParserRule getModelOfExecutionRule() {
		return getModelOfExecutionAccess().getRule();
	}
	
	//moeRoutine fmlInfra::Routine:
	//	{fmlInfra::Routine} ('(' domain=FunctionalParameterSet? ')')? ('->' ('(' codomain=FunctionalParameterSet ')'
	//	| codomain=FunctionalParameterSet))?
	//	bodyBlock=BlockStatement
	public MoeRoutineElements getMoeRoutineAccess() {
		return pMoeRoutine;
	}
	
	public ParserRule getMoeRoutineRule() {
		return getMoeRoutineAccess().getRule();
	}
	
	//Routine fmlInfra::Routine:
	//	visibility=VisibilityKind? 'macro'? 'routine'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('(' domain=FunctionalParameterSet? ')')? ('-->' ('('
	//	codomain=FunctionalParameterSet ')'
	//	| codomain=FormalParameterSet))?
	//	bodyBlock=BlockStatement
	public RoutineElements getRoutineAccess() {
		return pRoutine;
	}
	
	public ParserRule getRoutineRule() {
		return getRoutineAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Section Model Of Interaction / Communication Rules
	//////////////////////////////////////////////////////////////////////////////////
	//ModelOfInteraction fmlInfra::ModelOfInteraction:
	//	{fmlInfra::ModelOfInteraction}
	//	'@com:' (routes+=Route
	//	| connections+=Connection)*
	public ModelOfInteractionElements getModelOfInteractionAccess() {
		return pModelOfInteraction;
	}
	
	public ParserRule getModelOfInteractionRule() {
		return getModelOfInteractionAccess().getRule();
	}
	
	//Route fmlInfra::Route:
	//	{fmlInfra::Route}
	//	'route' '<' protocol=ComRouteProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)?
	//	'[' ('*'
	//	| signals+=[fmlInfra::Signal|ESUfid] (',' signals+=[fmlInfra::Signal|ESUfid])*)
	//	']' ';'
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}
	
	//ComRouteProtocol fmlInfra::ComProtocol:
	//	protocol=ComProtocolKind
	//	| protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
	//	| inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]
	public ComRouteProtocolElements getComRouteProtocolAccess() {
		return pComRouteProtocol;
	}
	
	public ParserRule getComRouteProtocolRule() {
		return getComRouteProtocolAccess().getRule();
	}
	
	//Connection fmlInfra::Connection:
	//	'connect' '<' protocol=ComProtocol '>' (name=ESIdentifier unrestrictedName=UnrestrictedName?)?
	//	'{' comPoints+=ComPoint+ '}'
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//ComProtocol fmlInfra::ComProtocol:
	//	protocol=ComEnvRdvProtocolKind
	//	| protocol=ComMultiRdvProtocolKind ('<' cast=ComCastKing '>')?
	//	| protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
	//	| inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid] | cast=ComCastKing
	public ComProtocolElements getComProtocolAccess() {
		return pComProtocol;
	}
	
	public ParserRule getComProtocolRule() {
		return getComProtocolAccess().getRule();
	}
	
	//enum ComProtocolKind returns fmlInfra::ComProtocolKind:
	//	env | rdv | multi_rdv;
	public ComProtocolKindElements getComProtocolKindAccess() {
		return eComProtocolKind;
	}
	
	public EnumRule getComProtocolKindRule() {
		return getComProtocolKindAccess().getRule();
	}
	
	//enum ComEnvRdvProtocolKind returns fmlInfra::ComProtocolKind:
	//	env | rdv;
	public ComEnvRdvProtocolKindElements getComEnvRdvProtocolKindAccess() {
		return eComEnvRdvProtocolKind;
	}
	
	public EnumRule getComEnvRdvProtocolKindRule() {
		return getComEnvRdvProtocolKindAccess().getRule();
	}
	
	//enum ComMultiRdvProtocolKind returns fmlInfra::ComProtocolKind:
	//	multi_rdv;
	public ComMultiRdvProtocolKindElements getComMultiRdvProtocolKindAccess() {
		return eComMultiRdvProtocolKind;
	}
	
	public EnumRule getComMultiRdvProtocolKindRule() {
		return getComMultiRdvProtocolKindAccess().getRule();
	}
	
	//enum BufferProtocolKind returns fmlInfra::ComProtocolKind:
	//	buffer;
	public BufferProtocolKindElements getBufferProtocolKindAccess() {
		return eBufferProtocolKind;
	}
	
	public EnumRule getBufferProtocolKindRule() {
		return getBufferProtocolKindAccess().getRule();
	}
	
	//enum ComCastKing returns fmlInfra::ComCastKind:
	//	unicast | anycast | multicast | broadcast;
	public ComCastKingElements getComCastKingAccess() {
		return eComCastKing;
	}
	
	public EnumRule getComCastKingRule() {
		return getComCastKingAccess().getRule();
	}
	
	//ComPoint fmlInfra::ComPoint:
	//	{fmlInfra::ComPoint} direction=ChannelDirection ('<' protocol=ComPointProtocol '>')? (point=ComElement ';'
	//	| '{' points+=ComElement '}')
	public ComPointElements getComPointAccess() {
		return pComPoint;
	}
	
	public ParserRule getComPointRule() {
		return getComPointAccess().getRule();
	}
	
	//ComPointProtocol fmlInfra::ComProtocol:
	//	protocol=BufferProtocolKind (':' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) | '<' (inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]) '>')?
	//	| inner_buffer=BufferContainerType
	//	| ref_buffer=[fmlInfra::Buffer|ESUfid]
	public ComPointProtocolElements getComPointProtocolAccess() {
		return pComPointProtocol;
	}
	
	public ParserRule getComPointProtocolRule() {
		return getComPointProtocolAccess().getRule();
	}
	
	//ComElement fmlExpr::Expression:
	//	LiteralPureReferenceElement ({fmlExpr::ValueElementSpecification.target=current} kind=(ValueDotFieldExpressionKind |
	//	ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier])?
	//	| {fmlExpr::ValueElementSpecification} target=LiteralReferenceMachineContext
	//	// ( '.' | '->' ) element
	//	kind=(ValueDotFieldExpressionKind | ValueArrowFieldExpressionKind) element=[fmlCommon::NamedElement|ESIdentifier]
	public ComElementElements getComElementAccess() {
		return pComElement;
	}
	
	public ParserRule getComElementRule() {
		return getComElementAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Sections Declarations Data Rules
	//////////////////////////////////////////////////////////////////////////////////
	////TypeDefinition returns fmlType::DataType
	////	: typedef?='type' name=ESIdentifier
	////		( support=DataTypeReference ';'
	////		| support=StructuredDataType
	////		)
	////	;
	//TypeDefinition fmlType::DataType:
	//	EnumerationTypeDefinition
	//	| StructureTypeDefinition
	//	| UnionTypeDefinition
	//	| ChoiceTypeDefinition
	//	| IntervalTypeDefinition
	//	| CollectionTypeDefinition
	//	| OtherDataTypeDefinition
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	////TypeDefinitionImpl returns fmlType::DataTypeReference
	////	: name=ESIdentifier
	////		( support=DataTypeReference ';'
	////		| support=StructuredDataType
	////		)
	////	;
	//TypeDefinitionImpl fmlType::DataType:
	//	EnumerationTypeDefinitionImpl
	//	| StructureTypeDefinitionImpl
	//	| UnionTypeDefinitionImpl
	//	| ChoiceTypeDefinitionImpl
	//	| IntervalTypeDefinitionImpl
	//	| CollectionTypeDefinitionImpl
	//	| OtherDataTypeDefinitionImpl
	public TypeDefinitionImplElements getTypeDefinitionImplAccess() {
		return pTypeDefinitionImpl;
	}
	
	public ParserRule getTypeDefinitionImplRule() {
		return getTypeDefinitionImplAccess().getRule();
	}
	
	//DataTypeMultiplicity fmlExpr::Expression:
	//	LiteralIntegerExpression
	//	| LiteralReferenceElement
	public DataTypeMultiplicityElements getDataTypeMultiplicityAccess() {
		return pDataTypeMultiplicity;
	}
	
	public ParserRule getDataTypeMultiplicityRule() {
		return getDataTypeMultiplicityAccess().getRule();
	}
	
	//DataTypeReference fmlType::DataType:
	//	SimpleDataType ({fmlType::DataTypeReference.support=current}
	//	'[' multiplicity=DataTypeMultiplicity ']')?
	//	| {fmlType::DataTypeReference} typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?
	public DataTypeReferenceElements getDataTypeReferenceAccess() {
		return pDataTypeReference;
	}
	
	public ParserRule getDataTypeReferenceRule() {
		return getDataTypeReferenceAccess().getRule();
	}
	
	//OtherDataTypeDefinition fmlType::DataTypeReference:
	//	{fmlType::DataTypeReference} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? (support=PrimitiveType ('[' multiplicity=DataTypeMultiplicity
	//	']')?
	//	| typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?) typedef?=';'
	public OtherDataTypeDefinitionElements getOtherDataTypeDefinitionAccess() {
		return pOtherDataTypeDefinition;
	}
	
	public ParserRule getOtherDataTypeDefinitionRule() {
		return getOtherDataTypeDefinitionAccess().getRule();
	}
	
	//OtherDataTypeDefinitionImpl fmlType::DataTypeReference:
	//	{fmlType::DataTypeReference} name=ESIdentifier unrestrictedName=UnrestrictedName? (support=PrimitiveType ('['
	//	multiplicity=DataTypeMultiplicity ']')?
	//	| typeref=[fmlType::DataType|ESUfid] ('[' multiplicity=DataTypeMultiplicity ']')?) typedef?=';'
	public OtherDataTypeDefinitionImplElements getOtherDataTypeDefinitionImplAccess() {
		return pOtherDataTypeDefinitionImpl;
	}
	
	public ParserRule getOtherDataTypeDefinitionImplRule() {
		return getOtherDataTypeDefinitionImplAccess().getRule();
	}
	
	//DataType fmlType::DataType:
	//	DataTypeReference
	//	| StructuredDataType
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//SimpleDataType fmlType::DataType:
	//	PrimitiveType
	//	| IntervalType
	//	| CollectionType
	public SimpleDataTypeElements getSimpleDataTypeAccess() {
		return pSimpleDataType;
	}
	
	public ParserRule getSimpleDataTypeRule() {
		return getSimpleDataTypeAccess().getRule();
	}
	
	//StructuredDataType fmlType::DataType:
	//	EnumerationType
	//	| StructureType
	//	| UnionType
	//	| ChoiceType
	public StructuredDataTypeElements getStructuredDataTypeAccess() {
		return pStructuredDataType;
	}
	
	public ParserRule getStructuredDataTypeRule() {
		return getStructuredDataTypeAccess().getRule();
	}
	
	////PrimitiveType returns fmlType::PrimitiveType
	////	: kind=NumberPrimitiveTypeKind ( '<' ( 'bit:' )? bitSize = EInt '>' )?
	////	| kind=OtherPrimitiveKind
	////	;
	////
	////enum OtherPrimitiveKind returns fmlType::PrimitiveTypeKind
	////	: BOOLEAN   = 'boolean'
	////	| BOOLEAN   = 'bool'
	////	| CHAR      = 'char'
	////	| STRING    = 'string'
	////	| BUFFER    = 'buffer'
	////	| MESSAGE   = 'message'
	////	| PORT      = 'port'
	////	| MACHINE   = 'machine'
	////	;
	////
	////
	////enum NumberPrimitiveTypeKind returns fmlType::PrimitiveTypeKind
	////	: INTEGER   = 'integer'
	////	| RATIONAL  = 'rational'
	////	| FLOAT     = 'float'
	////	| DOUBLE    = 'double'
	////	| REAL      = 'real'
	////
	////	| TIME      = 'time'
	////
	////	| UINTEGER  = 'uinteger'
	////	| URATIONAL = 'urational'
	////	| UFLOAT    = 'ufloat'
	////	| UDOUBLE   = 'udouble'
	////	| UREAL     = 'ureal'
	////
	////	| INT       = 'int'
	////	| RAT       = 'rat'
	////
	////	| UINT      = 'uint'
	////	| URAT      = 'urat'
	////	;
	//PrimitiveType fmlType::PrimitiveType:
	//	PrimitiveNumberType
	//	| OtherPrimitiveType
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//PrimitiveNumberType fmlType::PrimitiveNumberType:
	//	PrimitiveIntegerType
	//	| PrimitiveRationalType
	//	| PrimitiveFloatType
	//	| PrimitiveRealType
	//	| PrimitiveTimeType
	public PrimitiveNumberTypeElements getPrimitiveNumberTypeAccess() {
		return pPrimitiveNumberType;
	}
	
	public ParserRule getPrimitiveNumberTypeRule() {
		return getPrimitiveNumberTypeAccess().getRule();
	}
	
	//enum PrimitiveNumberSign returns fmlType::PrimitiveNumberSign:
	//	positive='+'
	//	| positive_strict='++'
	//	| negative='-'
	//	| negative_strict='--';
	public PrimitiveNumberSignElements getPrimitiveNumberSignAccess() {
		return ePrimitiveNumberSign;
	}
	
	public EnumRule getPrimitiveNumberSignRule() {
		return getPrimitiveNumberSignAccess().getRule();
	}
	
	//PrimitiveIntegerType fmlType::PrimitiveIntegerType:
	//	{fmlType::PrimitiveIntegerType} sign=PrimitiveNumberSign? ('integer'
	//	| 'uinteger'
	//	| 'int'
	//	| 'uint') (':' size=EInt
	//	| '<' 'size:'? size=EInt '>')?
	public PrimitiveIntegerTypeElements getPrimitiveIntegerTypeAccess() {
		return pPrimitiveIntegerType;
	}
	
	public ParserRule getPrimitiveIntegerTypeRule() {
		return getPrimitiveIntegerTypeAccess().getRule();
	}
	
	//PrimitiveRationalType fmlType::PrimitiveRationalType:
	//	{fmlType::PrimitiveRationalType} sign=PrimitiveNumberSign? ('rational'
	//	| 'urational'
	//	| 'rat'
	//	| 'urat') (':' size=EInt
	//	| '<' 'size:'? size=EInt '>')?
	public PrimitiveRationalTypeElements getPrimitiveRationalTypeAccess() {
		return pPrimitiveRationalType;
	}
	
	public ParserRule getPrimitiveRationalTypeRule() {
		return getPrimitiveRationalTypeAccess().getRule();
	}
	
	//PrimitiveFloatType fmlType::PrimitiveFloatType:
	//	{fmlType::PrimitiveFloatType} sign=PrimitiveNumberSign? ('float'
	//	| 'ufloat'
	//	| 'double'
	//	| 'udouble') (':' size=EInt
	//	| '<' 'size:'? size=EInt '>')?
	public PrimitiveFloatTypeElements getPrimitiveFloatTypeAccess() {
		return pPrimitiveFloatType;
	}
	
	public ParserRule getPrimitiveFloatTypeRule() {
		return getPrimitiveFloatTypeAccess().getRule();
	}
	
	//PrimitiveRealType fmlType::PrimitiveRealType:
	//	{fmlType::PrimitiveRealType} sign=PrimitiveNumberSign? ('real'
	//	| 'ureal') (':' size=EInt
	//	| '<' 'size:'? size=EInt '>')?
	public PrimitiveRealTypeElements getPrimitiveRealTypeAccess() {
		return pPrimitiveRealType;
	}
	
	public ParserRule getPrimitiveRealTypeRule() {
		return getPrimitiveRealTypeAccess().getRule();
	}
	
	//PrimitiveTimeType fmlType::PrimitiveTimeType:
	//	{fmlType::PrimitiveTimeType}
	//	'time' ('<' support=PrimitiveTimeNumberType '>'
	//	| support=PrimitiveTimeNumberType)?
	//	| {fmlType::PrimitiveTimeType} clock?='clock' ('<' support=PrimitiveTimeNumberType '>'
	//	| support=PrimitiveTimeNumberType)?
	public PrimitiveTimeTypeElements getPrimitiveTimeTypeAccess() {
		return pPrimitiveTimeType;
	}
	
	public ParserRule getPrimitiveTimeTypeRule() {
		return getPrimitiveTimeTypeAccess().getRule();
	}
	
	//PrimitiveTimeNumberType fmlType::PrimitiveNumberType:
	//	PrimitiveIntegerType
	//	| PrimitiveRationalType
	//	| PrimitiveFloatType
	//	| PrimitiveRealType
	public PrimitiveTimeNumberTypeElements getPrimitiveTimeNumberTypeAccess() {
		return pPrimitiveTimeNumberType;
	}
	
	public ParserRule getPrimitiveTimeNumberTypeRule() {
		return getPrimitiveTimeNumberTypeAccess().getRule();
	}
	
	//OtherPrimitiveType fmlType::PrimitiveType:
	//	PrimitiveBooleanType
	//	| PrimitiveCharacterType
	//	| PrimitiveStringType
	//	| PrimitiveInstanceType
	public OtherPrimitiveTypeElements getOtherPrimitiveTypeAccess() {
		return pOtherPrimitiveType;
	}
	
	public ParserRule getOtherPrimitiveTypeRule() {
		return getOtherPrimitiveTypeAccess().getRule();
	}
	
	//PrimitiveBooleanType fmlType::PrimitiveBooleanType:
	//	{fmlType::PrimitiveBooleanType} ('boolean' | 'bool')
	public PrimitiveBooleanTypeElements getPrimitiveBooleanTypeAccess() {
		return pPrimitiveBooleanType;
	}
	
	public ParserRule getPrimitiveBooleanTypeRule() {
		return getPrimitiveBooleanTypeAccess().getRule();
	}
	
	//PrimitiveCharacterType fmlType::PrimitiveCharacterType:
	//	{fmlType::PrimitiveCharacterType} 'char'
	public PrimitiveCharacterTypeElements getPrimitiveCharacterTypeAccess() {
		return pPrimitiveCharacterType;
	}
	
	public ParserRule getPrimitiveCharacterTypeRule() {
		return getPrimitiveCharacterTypeAccess().getRule();
	}
	
	//PrimitiveStringType fmlType::PrimitiveStringType:
	//	{fmlType::PrimitiveStringType}
	//	'string' (':' size=EInt
	//	| '<' 'size:'? size=EInt '>')?
	public PrimitiveStringTypeElements getPrimitiveStringTypeAccess() {
		return pPrimitiveStringType;
	}
	
	public ParserRule getPrimitiveStringTypeRule() {
		return getPrimitiveStringTypeAccess().getRule();
	}
	
	//enum PrimitiveInstanceKind returns fmlType::PrimitiveInstanceKind:
	//	buffer | message | port | signal | machine | vertex;
	public PrimitiveInstanceKindElements getPrimitiveInstanceKindAccess() {
		return ePrimitiveInstanceKind;
	}
	
	public EnumRule getPrimitiveInstanceKindRule() {
		return getPrimitiveInstanceKindAccess().getRule();
	}
	
	//PrimitiveInstanceType fmlType::PrimitiveInstanceType:
	//	{fmlType::PrimitiveInstanceType} expected=PrimitiveInstanceKind ('<' model=[fmlCommon::NamedElement|ESIdentifier]
	//	'>')?
	public PrimitiveInstanceTypeElements getPrimitiveInstanceTypeAccess() {
		return pPrimitiveInstanceType;
	}
	
	public ParserRule getPrimitiveInstanceTypeRule() {
		return getPrimitiveInstanceTypeAccess().getRule();
	}
	
	//IntervalType fmlType::IntervalType:
	//	{fmlType::IntervalType}
	//	'interval'
	//	'<'
	//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
	//	'>'
	public IntervalTypeElements getIntervalTypeAccess() {
		return pIntervalType;
	}
	
	public ParserRule getIntervalTypeRule() {
		return getIntervalTypeAccess().getRule();
	}
	
	//IntervalTypeDefinition fmlType::IntervalType:
	//	{fmlType::IntervalType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'interval'
	//	'<'
	//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
	//	'>' ';'
	public IntervalTypeDefinitionElements getIntervalTypeDefinitionAccess() {
		return pIntervalTypeDefinition;
	}
	
	public ParserRule getIntervalTypeDefinitionRule() {
		return getIntervalTypeDefinitionAccess().getRule();
	}
	
	//IntervalTypeDefinitionImpl fmlType::IntervalType:
	//	{fmlType::IntervalType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'interval'
	//	'<'
	//	support=PrimitiveNumberType (lopen?=']' | '[') infimum=Expression ',' supremum=Expression (']' | ropen?='[')
	//	'>' ';'
	public IntervalTypeDefinitionImplElements getIntervalTypeDefinitionImplAccess() {
		return pIntervalTypeDefinitionImpl;
	}
	
	public ParserRule getIntervalTypeDefinitionImplRule() {
		return getIntervalTypeDefinitionImplAccess().getRule();
	}
	
	//// TODO
	//// mettre à jour la grammaire par rapport au noyau, i.e.
	//// CollectionKind | CollectionKind< size > | CollectionKind< type , size >
	//CollectionType fmlType::CollectionType:
	//	{fmlType::CollectionType} container=CollectionKind
	//	'<'
	//	support=DataType (',' (size=EInt | unbounded?='*'))?
	//	'>'
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//CollectionTypeDefinition fmlType::CollectionType:
	//	{fmlType::CollectionType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	container=CollectionKind
	//	'<'
	//	support=DataType (',' (size=EInt | unbounded?='*'))?
	//	'>' ';'
	public CollectionTypeDefinitionElements getCollectionTypeDefinitionAccess() {
		return pCollectionTypeDefinition;
	}
	
	public ParserRule getCollectionTypeDefinitionRule() {
		return getCollectionTypeDefinitionAccess().getRule();
	}
	
	//CollectionTypeDefinitionImpl fmlType::CollectionType:
	//	{fmlType::CollectionType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	container=CollectionKind
	//	'<'
	//	support=DataType (',' (size=EInt | unbounded?='*'))?
	//	'>' ';'
	public CollectionTypeDefinitionImplElements getCollectionTypeDefinitionImplAccess() {
		return pCollectionTypeDefinitionImpl;
	}
	
	public ParserRule getCollectionTypeDefinitionImplRule() {
		return getCollectionTypeDefinitionImplAccess().getRule();
	}
	
	//enum CollectionKind returns fmlType::CollectionKind:
	//	vector | rvector | list | set | bag | fifo | lifo;
	public CollectionKindElements getCollectionKindAccess() {
		return eCollectionKind;
	}
	
	public EnumRule getCollectionKindRule() {
		return getCollectionKindAccess().getRule();
	}
	
	//EnumerationType fmlType::EnumerationType:
	//	{fmlType::EnumerationType}
	//	'enum' '{'
	//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
	//	'}'
	public EnumerationTypeElements getEnumerationTypeAccess() {
		return pEnumerationType;
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}
	
	//EnumerationTypeDefinition fmlType::EnumerationType:
	//	{fmlType::EnumerationType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='enum'
	//	'{'
	//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
	//	'}'
	public EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return pEnumerationTypeDefinition;
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}
	
	//EnumerationTypeDefinitionImpl fmlType::EnumerationType:
	//	{fmlType::EnumerationType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='enum'
	//	'{'
	//	literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)*
	//	'}'
	public EnumerationTypeDefinitionImplElements getEnumerationTypeDefinitionImplAccess() {
		return pEnumerationTypeDefinitionImpl;
	}
	
	public ParserRule getEnumerationTypeDefinitionImplRule() {
		return getEnumerationTypeDefinitionImplAccess().getRule();
	}
	
	//EnumerationLiteral fmlType::EnumerationLiteral:
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' value=LiteralTerminalExpression)?
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//StructureType fmlType::StructureType:
	//	{fmlType::StructureType}
	//	'struct'
	//	'{'
	//	property+=Variable+
	//	'}'
	public StructureTypeElements getStructureTypeAccess() {
		return pStructureType;
	}
	
	public ParserRule getStructureTypeRule() {
		return getStructureTypeAccess().getRule();
	}
	
	//StructureTypeDefinition fmlType::StructureType:
	//	{fmlType::StructureType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='struct'
	//	'{'
	//	property+=Variable+
	//	'}'
	public StructureTypeDefinitionElements getStructureTypeDefinitionAccess() {
		return pStructureTypeDefinition;
	}
	
	public ParserRule getStructureTypeDefinitionRule() {
		return getStructureTypeDefinitionAccess().getRule();
	}
	
	//StructureTypeDefinitionImpl fmlType::StructureType:
	//	{fmlType::StructureType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='struct'
	//	'{'
	//	property+=Variable+
	//	'}'
	public StructureTypeDefinitionImplElements getStructureTypeDefinitionImplAccess() {
		return pStructureTypeDefinitionImpl;
	}
	
	public ParserRule getStructureTypeDefinitionImplRule() {
		return getStructureTypeDefinitionImplAccess().getRule();
	}
	
	//UnionType fmlType::UnionType:
	//	{fmlType::UnionType}
	//	'union'
	//	'{'
	//	property+=Variable+
	//	'}'
	public UnionTypeElements getUnionTypeAccess() {
		return pUnionType;
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}
	
	//UnionTypeDefinition fmlType::UnionType:
	//	{fmlType::UnionType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='union'
	//	'{'
	//	property+=Variable+
	//	'}'
	public UnionTypeDefinitionElements getUnionTypeDefinitionAccess() {
		return pUnionTypeDefinition;
	}
	
	public ParserRule getUnionTypeDefinitionRule() {
		return getUnionTypeDefinitionAccess().getRule();
	}
	
	//UnionTypeDefinitionImpl fmlType::UnionType:
	//	{fmlType::UnionType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='union'
	//	'{'
	//	property+=Variable+
	//	'}'
	public UnionTypeDefinitionImplElements getUnionTypeDefinitionImplAccess() {
		return pUnionTypeDefinitionImpl;
	}
	
	public ParserRule getUnionTypeDefinitionImplRule() {
		return getUnionTypeDefinitionImplAccess().getRule();
	}
	
	//ChoiceType fmlType::ChoiceType:
	//	{fmlType::ChoiceType}
	//	'choice'
	//	'{'
	//	property+=Variable+
	//	'}'
	public ChoiceTypeElements getChoiceTypeAccess() {
		return pChoiceType;
	}
	
	public ParserRule getChoiceTypeRule() {
		return getChoiceTypeAccess().getRule();
	}
	
	//ChoiceTypeDefinition fmlType::ChoiceType:
	//	{fmlType::ChoiceType} visibility=VisibilityKind? 'type'
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='choice'
	//	'{'
	//	property+=Variable+
	//	'}'
	public ChoiceTypeDefinitionElements getChoiceTypeDefinitionAccess() {
		return pChoiceTypeDefinition;
	}
	
	public ParserRule getChoiceTypeDefinitionRule() {
		return getChoiceTypeDefinitionAccess().getRule();
	}
	
	//ChoiceTypeDefinitionImpl fmlType::ChoiceType:
	//	{fmlType::ChoiceType} name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	typedef?='choice'
	//	'{'
	//	property+=Variable+
	//	'}'
	public ChoiceTypeDefinitionImplElements getChoiceTypeDefinitionImplAccess() {
		return pChoiceTypeDefinitionImpl;
	}
	
	public ParserRule getChoiceTypeDefinitionImplRule() {
		return getChoiceTypeDefinitionImplAccess().getRule();
	}
	
	/// *
	//enum TypeSpecifyerKind returns TypeSpecifyerKind
	//	: ALIAS = 'ALIAS'
	//	| BOOLEAN = 'BOOLEAN'
	//	| CHAR = 'CHAR'
	//	| INT = 'INT'
	//	| RATIONAL = 'RATIONAL'
	//	| URATIONAL = 'URATIONAL'
	//	| FLOAT = 'FLOAT'
	//	| UFLOAT = 'UFLOAT'
	//	| DOUBLE = 'DOUBLE'
	//	| UDOUBLE = 'UDOUBLE'
	//	| REAL = 'REAL'
	//	| UREAL = 'UREAL'
	//	| CTIME = 'CTIME'
	//	| DTIME = 'DTIME'
	//	| STRING = 'STRING'
	//	| IDENTIFIER = 'IDENTIFIER'
	//	| UFI = 'UFI'
	//	| ARRAY = 'ARRAY'
	//	| VECTOR = 'VECTOR'
	//	| LIST = 'LIST'
	//	| FIFO = 'FIFO'
	//	| LIFO = 'LIFO'
	//	| MULTISET = 'MULTISET'
	//	| SET = 'SET'
	//	| INTERVAL = 'INTERVAL'
	//	| ENUM = 'ENUM'
	//	| STRUCTURE = 'STRUCTURE'
	//	| BUFFER = 'BUFFER'
	//	| MESSAGE = 'MESSAGE'
	//	| PORT = 'PORT'
	//	| CONNECTION = 'CONNECTION'
	//	| OPERATOR = 'OPERATOR'
	//	| MACHINE = 'MACHINE'
	//	| LAMBDA = 'LAMBDA'
	//	| UNIVERSAL = 'UNIVERSAL'
	//	;
	// * / ////////////////////////////////////////////////////////////////////////////////
	//// Variable Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Modifier fmlInfra::Modifier:
	//	{fmlInfra::Modifier} (static?='static'?
	//	& final?='final'?
	//	& reference?='reference'?
	//	& volatile?='volatile'?
	//	& transient?='transient'?)
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//Variable fmlInfra::Variable:
	//	(visibility=VisibilityKind? & modifier=Modifier?) ('var' | const?='val'
	//	| (const?='const' | const?='final') macro?='macro'? 'var'?
	//	| macro?='macro' ('var' | const?='val')?) type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
	//	'}' | ';')
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableImpl fmlInfra::Variable:
	//	((const?='const' | const?='final')? & macro?='macro'?) type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
	//	'}' | ';')
	public VariableImplElements getVariableImplAccess() {
		return pVariableImpl;
	}
	
	public ParserRule getVariableImplRule() {
		return getVariableImplAccess().getRule();
	}
	
	//OnWriteRoutine fmlInfra::Routine:
	//	{fmlInfra::Routine}
	//	'@on_write' ('(' parameter+=VariableRoutineParameter ')')?
	//	bodyBlock=BlockStatement
	public OnWriteRoutineElements getOnWriteRoutineAccess() {
		return pOnWriteRoutine;
	}
	
	public ParserRule getOnWriteRoutineRule() {
		return getOnWriteRoutineAccess().getRule();
	}
	
	//VariableRoutineParameter fmlInfra::Parameter:
	//	type=DataType?
	//	name=ESIdentifier ('=' defaultValue=Expression)?
	public VariableRoutineParameterElements getVariableRoutineParameterAccess() {
		return pVariableRoutineParameter;
	}
	
	public ParserRule getVariableRoutineParameterRule() {
		return getVariableRoutineParameterAccess().getRule();
	}
	
	//enum PublicVariableVisibilityKind returns fmlCommon::VisibilityKind:
	//	public='var'
	//	//	| public ='val'
	//	//	| public ='const'
	//;
	public PublicVariableVisibilityKindElements getPublicVariableVisibilityKindAccess() {
		return ePublicVariableVisibilityKind;
	}
	
	public EnumRule getPublicVariableVisibilityKindRule() {
		return getPublicVariableVisibilityKindAccess().getRule();
	}
	
	//VariablePublic fmlInfra::Variable:
	//	modifier=Modifier? ((const?='const' | const?='final')?
	//	& macro?='macro'?)?
	//	visibility=PublicVariableVisibilityKind
	//	type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
	//	'}' | ';')
	public VariablePublicElements getVariablePublicAccess() {
		return pVariablePublic;
	}
	
	public ParserRule getVariablePublicRule() {
		return getVariablePublicAccess().getRule();
	}
	
	//enum ProtectedVariableVisibilityKind returns fmlCommon::VisibilityKind:
	//	protected='var'
	//	//	| protected ='val'
	//	//	| protected ='const'
	//;
	public ProtectedVariableVisibilityKindElements getProtectedVariableVisibilityKindAccess() {
		return eProtectedVariableVisibilityKind;
	}
	
	public EnumRule getProtectedVariableVisibilityKindRule() {
		return getProtectedVariableVisibilityKindAccess().getRule();
	}
	
	//VariableProtected fmlInfra::Variable:
	//	modifier=Modifier? ((const?='const' | const?='final')?
	//	& macro?='macro'?)?
	//	visibility=ProtectedVariableVisibilityKind
	//	type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
	//	'}' | ';')
	public VariableProtectedElements getVariableProtectedAccess() {
		return pVariableProtected;
	}
	
	public ParserRule getVariableProtectedRule() {
		return getVariableProtectedAccess().getRule();
	}
	
	//enum PrivateVariableVisibilityKind returns fmlCommon::VisibilityKind:
	//	private='var'
	//	//	| private ='val'
	//	//	| private ='const'
	//;
	public PrivateVariableVisibilityKindElements getPrivateVariableVisibilityKindAccess() {
		return ePrivateVariableVisibilityKind;
	}
	
	public EnumRule getPrivateVariableVisibilityKindRule() {
		return getPrivateVariableVisibilityKindAccess().getRule();
	}
	
	//VariablePrivate fmlInfra::Variable:
	//	modifier=Modifier? ((const?='const' | const?='final')?
	//	& macro?='macro'?)?
	//	visibility=PrivateVariableVisibilityKind
	//	type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ('{' onWriteAction=OnWriteRoutine
	//	'}' | ';')
	public VariablePrivateElements getVariablePrivateAccess() {
		return pVariablePrivate;
	}
	
	public ParserRule getVariablePrivateRule() {
		return getVariablePrivateAccess().getRule();
	}
	
	//enum ParameterDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	in | inout | out | return;
	public ParameterDirectionKindElements getParameterDirectionKindAccess() {
		return eParameterDirectionKind;
	}
	
	public EnumRule getParameterDirectionKindRule() {
		return getParameterDirectionKindAccess().getRule();
	}
	
	//FunctionalParameterSet fmlInfra::ParameterSet:
	//	{fmlInfra::ParameterSet} parameter+=FunctionalParameter (',' parameter+=FunctionalParameter)*
	public FunctionalParameterSetElements getFunctionalParameterSetAccess() {
		return pFunctionalParameterSet;
	}
	
	public ParserRule getFunctionalParameterSetRule() {
		return getFunctionalParameterSetAccess().getRule();
	}
	
	//FunctionalParameter fmlInfra::Parameter:
	//	{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType
	//	name=ESIdentifier ('=' defaultValue=Expression)?
	public FunctionalParameterElements getFunctionalParameterAccess() {
		return pFunctionalParameter;
	}
	
	public ParserRule getFunctionalParameterRule() {
		return getFunctionalParameterAccess().getRule();
	}
	
	//FormalParameterSet fmlInfra::ParameterSet:
	//	{fmlInfra::ParameterSet} parameter+=FormalParameter (',' parameter+=FormalParameter)*
	public FormalParameterSetElements getFormalParameterSetAccess() {
		return pFormalParameterSet;
	}
	
	public ParserRule getFormalParameterSetRule() {
		return getFormalParameterSetAccess().getRule();
	}
	
	//FormalParameter fmlInfra::Parameter:
	//	{fmlInfra::Parameter} direction=ParameterDirectionKind? type=DataType
	//	name=ESIdentifier? ('=' defaultValue=Expression)?
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}
	
	//enum BlockParameterDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	in='input'
	//	| inout | out='output'
	//	| return;
	public BlockParameterDirectionKindElements getBlockParameterDirectionKindAccess() {
		return eBlockParameterDirectionKind;
	}
	
	public EnumRule getBlockParameterDirectionKindRule() {
		return getBlockParameterDirectionKindAccess().getRule();
	}
	
	//BlockParameterSet fmlInfra::ParameterSet:
	//	{fmlInfra::ParameterSet} ('input' (parameter+=ParameterInput
	//	| '{' parameter+=ParameterInput+ '}') | 'inout' (parameter+=ParameterInout
	//	| '{' parameter+=ParameterInout+ '}') | 'output' (parameter+=ParameterOutput
	//	| '{' parameter+=ParameterOutput+ '}') | 'return' (parameter+=ParameterReturn
	//	| '{' parameter+=ParameterReturn+ '}'))*
	public BlockParameterSetElements getBlockParameterSetAccess() {
		return pBlockParameterSet;
	}
	
	public ParserRule getBlockParameterSetRule() {
		return getBlockParameterSetAccess().getRule();
	}
	
	//enum ParameterInputDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	in='var';
	public ParameterInputDirectionKindElements getParameterInputDirectionKindAccess() {
		return eParameterInputDirectionKind;
	}
	
	public EnumRule getParameterInputDirectionKindRule() {
		return getParameterInputDirectionKindAccess().getRule();
	}
	
	//ParameterInput fmlInfra::Parameter:
	//	direction=ParameterInputDirectionKind type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
	public ParameterInputElements getParameterInputAccess() {
		return pParameterInput;
	}
	
	public ParserRule getParameterInputRule() {
		return getParameterInputAccess().getRule();
	}
	
	//enum ParameterInoutDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	inout='var';
	public ParameterInoutDirectionKindElements getParameterInoutDirectionKindAccess() {
		return eParameterInoutDirectionKind;
	}
	
	public EnumRule getParameterInoutDirectionKindRule() {
		return getParameterInoutDirectionKindAccess().getRule();
	}
	
	//ParameterInout fmlInfra::Parameter:
	//	direction=ParameterInoutDirectionKind type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
	public ParameterInoutElements getParameterInoutAccess() {
		return pParameterInout;
	}
	
	public ParserRule getParameterInoutRule() {
		return getParameterInoutAccess().getRule();
	}
	
	//enum ParameterOutputDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	out='var';
	public ParameterOutputDirectionKindElements getParameterOutputDirectionKindAccess() {
		return eParameterOutputDirectionKind;
	}
	
	public EnumRule getParameterOutputDirectionKindRule() {
		return getParameterOutputDirectionKindAccess().getRule();
	}
	
	//ParameterOutput fmlInfra::Parameter:
	//	direction=ParameterOutputDirectionKind type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
	public ParameterOutputElements getParameterOutputAccess() {
		return pParameterOutput;
	}
	
	public ParserRule getParameterOutputRule() {
		return getParameterOutputAccess().getRule();
	}
	
	//enum ParameterReturnDirectionKind returns fmlInfra::ParameterDirectionKind:
	//	return='var';
	public ParameterReturnDirectionKindElements getParameterReturnDirectionKindAccess() {
		return eParameterReturnDirectionKind;
	}
	
	public EnumRule getParameterReturnDirectionKindRule() {
		return getParameterReturnDirectionKindAccess().getRule();
	}
	
	//ParameterReturn fmlInfra::Parameter:
	//	direction=ParameterReturnDirectionKind type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
	public ParameterReturnElements getParameterReturnAccess() {
		return pParameterReturn;
	}
	
	public ParserRule getParameterReturnRule() {
		return getParameterReturnAccess().getRule();
	}
	
	//ParameterDeclaration fmlInfra::Parameter:
	//	{fmlInfra::Parameter} direction=BlockParameterDirectionKind type=DataType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('=' defaultValue=Expression)? ';'
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Buffer Rules
	//////////////////////////////////////////////////////////////////////////////////
	//BufferContainerType fmlType::CollectionType:
	//	{fmlType::CollectionType} container=BufferContainerKind ('<' (size=EInt | unbounded?='*')? '>')?
	public BufferContainerTypeElements getBufferContainerTypeAccess() {
		return pBufferContainerType;
	}
	
	public ParserRule getBufferContainerTypeRule() {
		return getBufferContainerTypeAccess().getRule();
	}
	
	//enum BufferContainerKind returns fmlType::CollectionKind:
	//	set | bag | fifo | lifo;
	public BufferContainerKindElements getBufferContainerKindAccess() {
		return eBufferContainerKind;
	}
	
	public EnumRule getBufferContainerKindRule() {
		return getBufferContainerKindAccess().getRule();
	}
	
	//Buffer fmlInfra::Buffer:
	//	(visibility=VisibilityKind? & modifier=Modifier?)
	//	'buffer' type=BufferContainerType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
	public BufferElements getBufferAccess() {
		return pBuffer;
	}
	
	public ParserRule getBufferRule() {
		return getBufferAccess().getRule();
	}
	
	//BufferImpl fmlInfra::Buffer:
	//	type=BufferContainerType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
	public BufferImplElements getBufferImplAccess() {
		return pBufferImpl;
	}
	
	public ParserRule getBufferImplRule() {
		return getBufferImplAccess().getRule();
	}
	
	//enum PublicBufferVisibilityKind returns fmlCommon::VisibilityKind:
	//	public='buffer';
	public PublicBufferVisibilityKindElements getPublicBufferVisibilityKindAccess() {
		return ePublicBufferVisibilityKind;
	}
	
	public EnumRule getPublicBufferVisibilityKindRule() {
		return getPublicBufferVisibilityKindAccess().getRule();
	}
	
	//BufferPublic fmlInfra::Buffer:
	//	modifier=Modifier?
	//	visibility=PublicBufferVisibilityKind type=BufferContainerType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
	public BufferPublicElements getBufferPublicAccess() {
		return pBufferPublic;
	}
	
	public ParserRule getBufferPublicRule() {
		return getBufferPublicAccess().getRule();
	}
	
	//enum ProtectedBufferVisibilityKind returns fmlCommon::VisibilityKind:
	//	protected='buffer';
	public ProtectedBufferVisibilityKindElements getProtectedBufferVisibilityKindAccess() {
		return eProtectedBufferVisibilityKind;
	}
	
	public EnumRule getProtectedBufferVisibilityKindRule() {
		return getProtectedBufferVisibilityKindAccess().getRule();
	}
	
	//BufferProtected fmlInfra::Buffer:
	//	modifier=Modifier?
	//	visibility=ProtectedBufferVisibilityKind type=BufferContainerType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
	public BufferProtectedElements getBufferProtectedAccess() {
		return pBufferProtected;
	}
	
	public ParserRule getBufferProtectedRule() {
		return getBufferProtectedAccess().getRule();
	}
	
	//enum PrivateBufferVisibilityKind returns fmlCommon::VisibilityKind:
	//	private='buffer';
	public PrivateBufferVisibilityKindElements getPrivateBufferVisibilityKindAccess() {
		return ePrivateBufferVisibilityKind;
	}
	
	public EnumRule getPrivateBufferVisibilityKindRule() {
		return getPrivateBufferVisibilityKindAccess().getRule();
	}
	
	//BufferPrivate fmlInfra::Buffer:
	//	modifier=Modifier?
	//	visibility=PrivateBufferVisibilityKind type=BufferContainerType
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ';'
	public BufferPrivateElements getBufferPrivateAccess() {
		return pBufferPrivate;
	}
	
	public ParserRule getBufferPrivateRule() {
		return getBufferPrivateAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Port rules
	//////////////////////////////////////////////////////////////////////////////////
	//Port fmlInfra::Port:
	//	visibility=VisibilityKind?
	//	'port' direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//PortImpl fmlInfra::Port:
	//	direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public PortImplElements getPortImplAccess() {
		return pPortImpl;
	}
	
	public ParserRule getPortImplRule() {
		return getPortImplAccess().getRule();
	}
	
	//enum PublicPortVisibilityKind returns fmlCommon::VisibilityKind:
	//	public='port';
	public PublicPortVisibilityKindElements getPublicPortVisibilityKindAccess() {
		return ePublicPortVisibilityKind;
	}
	
	public EnumRule getPublicPortVisibilityKindRule() {
		return getPublicPortVisibilityKindAccess().getRule();
	}
	
	//PortPublic fmlInfra::Port:
	//	visibility=PublicPortVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public PortPublicElements getPortPublicAccess() {
		return pPortPublic;
	}
	
	public ParserRule getPortPublicRule() {
		return getPortPublicAccess().getRule();
	}
	
	//enum ProtectedPortVisibilityKind returns fmlCommon::VisibilityKind:
	//	protected='port';
	public ProtectedPortVisibilityKindElements getProtectedPortVisibilityKindAccess() {
		return eProtectedPortVisibilityKind;
	}
	
	public EnumRule getProtectedPortVisibilityKindRule() {
		return getProtectedPortVisibilityKindAccess().getRule();
	}
	
	//PortProtected fmlInfra::Port:
	//	visibility=ProtectedPortVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public PortProtectedElements getPortProtectedAccess() {
		return pPortProtected;
	}
	
	public ParserRule getPortProtectedRule() {
		return getPortProtectedAccess().getRule();
	}
	
	//enum PrivatePortVisibilityKind returns fmlCommon::VisibilityKind:
	//	private='port';
	public PrivatePortVisibilityKindElements getPrivatePortVisibilityKindAccess() {
		return ePrivatePortVisibilityKind;
	}
	
	public EnumRule getPrivatePortVisibilityKindRule() {
		return getPrivatePortVisibilityKindAccess().getRule();
	}
	
	//PortPrivate fmlInfra::Port:
	//	visibility=PrivatePortVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public PortPrivateElements getPortPrivateAccess() {
		return pPortPrivate;
	}
	
	public ParserRule getPortPrivateRule() {
		return getPortPrivateAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Signal rules
	//////////////////////////////////////////////////////////////////////////////////
	//Signal fmlInfra::Signal:
	//	visibility=VisibilityKind?
	//	'signal' direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//SignalImpl fmlInfra::Signal:
	//	direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public SignalImplElements getSignalImplAccess() {
		return pSignalImpl;
	}
	
	public ParserRule getSignalImplRule() {
		return getSignalImplAccess().getRule();
	}
	
	//enum PublicSignalVisibilityKind returns fmlCommon::VisibilityKind:
	//	public='signal';
	public PublicSignalVisibilityKindElements getPublicSignalVisibilityKindAccess() {
		return ePublicSignalVisibilityKind;
	}
	
	public EnumRule getPublicSignalVisibilityKindRule() {
		return getPublicSignalVisibilityKindAccess().getRule();
	}
	
	//SignalPublic fmlInfra::Signal:
	//	visibility=PublicSignalVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public SignalPublicElements getSignalPublicAccess() {
		return pSignalPublic;
	}
	
	public ParserRule getSignalPublicRule() {
		return getSignalPublicAccess().getRule();
	}
	
	//enum ProtectedSignalVisibilityKind returns fmlCommon::VisibilityKind:
	//	protected='signal';
	public ProtectedSignalVisibilityKindElements getProtectedSignalVisibilityKindAccess() {
		return eProtectedSignalVisibilityKind;
	}
	
	public EnumRule getProtectedSignalVisibilityKindRule() {
		return getProtectedSignalVisibilityKindAccess().getRule();
	}
	
	//SignalProtected fmlInfra::Signal:
	//	visibility=ProtectedSignalVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public SignalProtectedElements getSignalProtectedAccess() {
		return pSignalProtected;
	}
	
	public ParserRule getSignalProtectedRule() {
		return getSignalProtectedAccess().getRule();
	}
	
	//enum PrivateSignalVisibilityKind returns fmlCommon::VisibilityKind:
	//	private='signal';
	public PrivateSignalVisibilityKindElements getPrivateSignalVisibilityKindAccess() {
		return ePrivateSignalVisibilityKind;
	}
	
	public EnumRule getPrivateSignalVisibilityKindRule() {
		return getPrivateSignalVisibilityKindAccess().getRule();
	}
	
	//SignalPrivate fmlInfra::Signal:
	//	visibility=PrivateSignalVisibilityKind direction=ChannelDirection?
	//	name=ESIdentifier unrestrictedName=UnrestrictedName? ('('
	//	parameter+=FormalParameter (',' parameter+=FormalParameter)*
	//	')')?
	//	';'
	public SignalPrivateElements getSignalPrivateAccess() {
		return pSignalPrivate;
	}
	
	public ParserRule getSignalPrivateRule() {
		return getSignalPrivateAccess().getRule();
	}
	
	//enum ChannelDirection returns fmlInfra::ChannelDirection:
	//	input | inout | output;
	public ChannelDirectionElements getChannelDirectionAccess() {
		return eChannelDirection;
	}
	
	public EnumRule getChannelDirectionRule() {
		return getChannelDirectionAccess().getRule();
	}
	
	//Channel fmlInfra::Channel:
	//	visibility=VisibilityKind?
	//	'channel' name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (signal+=SignalReference ';')+
	//	'}'
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//SignalReference fmlInfra::Signal:
	//	direction=ChannelDirection? name=ESIdentifier
	public SignalReferenceElements getSignalReferenceAccess() {
		return pSignalReference;
	}
	
	public ParserRule getSignalReferenceRule() {
		return getSignalReferenceAccess().getRule();
	}
	
	//enum PublicChannelVisibilityKind returns fmlCommon::VisibilityKind:
	//	public='channel';
	public PublicChannelVisibilityKindElements getPublicChannelVisibilityKindAccess() {
		return ePublicChannelVisibilityKind;
	}
	
	public EnumRule getPublicChannelVisibilityKindRule() {
		return getPublicChannelVisibilityKindAccess().getRule();
	}
	
	//ChannelPublic fmlInfra::Channel:
	//	visibility=PublicChannelVisibilityKind
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (signal+=SignalReference ';')+
	//	'}'
	public ChannelPublicElements getChannelPublicAccess() {
		return pChannelPublic;
	}
	
	public ParserRule getChannelPublicRule() {
		return getChannelPublicAccess().getRule();
	}
	
	//enum ProtectedChannelVisibilityKind returns fmlCommon::VisibilityKind:
	//	protected='channel';
	public ProtectedChannelVisibilityKindElements getProtectedChannelVisibilityKindAccess() {
		return eProtectedChannelVisibilityKind;
	}
	
	public EnumRule getProtectedChannelVisibilityKindRule() {
		return getProtectedChannelVisibilityKindAccess().getRule();
	}
	
	//ChannelProtected fmlInfra::Channel:
	//	visibility=ProtectedChannelVisibilityKind
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (signal+=SignalReference ';')+
	//	'}'
	public ChannelProtectedElements getChannelProtectedAccess() {
		return pChannelProtected;
	}
	
	public ParserRule getChannelProtectedRule() {
		return getChannelProtectedAccess().getRule();
	}
	
	//enum PrivateChannelVisibilityKind returns fmlCommon::VisibilityKind:
	//	private='channel';
	public PrivateChannelVisibilityKindElements getPrivateChannelVisibilityKindAccess() {
		return ePrivateChannelVisibilityKind;
	}
	
	public EnumRule getPrivateChannelVisibilityKindRule() {
		return getPrivateChannelVisibilityKindAccess().getRule();
	}
	
	//ChannelPrivate fmlInfra::Channel:
	//	visibility=PrivateChannelVisibilityKind
	//	name=ESIdentifier unrestrictedName=UnrestrictedName?
	//	'{' (signal+=SignalReference ';')+
	//	'}'
	public ChannelPrivateElements getChannelPrivateAccess() {
		return pChannelPrivate;
	}
	
	public ParserRule getChannelPrivateRule() {
		return getChannelPrivateAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Section Transition Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Transition fmlStmchn::Transition:
	//	{fmlStmchn::Transition} transient?='transient'? 'transition'
	//	moe=TransitionMoe? (name=ESIdentifier unrestrictedName=UnrestrictedName?)? ('{' (('@trigger:'
	//	trigger+=TransitionTrigger*)? (guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard | '@tguard:')?
	//	'@effect:' effect=TransitionEffect?
	//	| behavior=TransitionBehavior)?
	//	'}' ('-->' target=[fmlCommon::NamedElement|ESUfid] ';')?
	//	| '-->' target=[fmlCommon::NamedElement|ESUfid] ('{' (('@trigger:' trigger+=TransitionTrigger*)?
	//	(guard=TransitionGuard | '@guard:')? (tguard=TransitionTimedGuard | '@tguard:')?
	//	'@effect:' effect=TransitionEffect?
	//	| behavior=TransitionBehavior)?
	//	'}' | ';'))
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//TransitionMoe fmlStmchn::TransitionMoe:
	//	'<' ('moc:'? (moc=TransitionMoc ('&' isElse?='else')?
	//	| isElse?='else') (',' "prior:"? prior=EInt)?
	//	| "prior:"? prior=EInt)
	//	'>'
	public TransitionMoeElements getTransitionMoeAccess() {
		return pTransitionMoe;
	}
	
	public ParserRule getTransitionMoeRule() {
		return getTransitionMoeAccess().getRule();
	}
	
	//enum TransitionMoc returns fmlStmchn::TransitionMoc:
	//	simple | abort | final;
	public TransitionMocElements getTransitionMocAccess() {
		return eTransitionMoc;
	}
	
	public EnumRule getTransitionMocRule() {
		return getTransitionMocAccess().getRule();
	}
	
	//TransitionBehavior fmlStmnt::BlockStatement:
	//	{fmlStmnt::BlockStatement} op=BlockStatementScheduler?
	//	statement+=Statement*
	public TransitionBehaviorElements getTransitionBehaviorAccess() {
		return pTransitionBehavior;
	}
	
	public ParserRule getTransitionBehaviorRule() {
		return getTransitionBehaviorAccess().getRule();
	}
	
	//TransitionTrigger fmlStmnt::InputComStatement:
	//	InputComStatement
	public TransitionTriggerElements getTransitionTriggerAccess() {
		return pTransitionTrigger;
	}
	
	public ParserRule getTransitionTriggerRule() {
		return getTransitionTriggerAccess().getRule();
	}
	
	//TransitionGuard fmlStmnt::AbstractGuardStatement:
	//	{fmlStmnt::GuardStatement}
	//	'@guard<' condition=TransitionGuardExpression
	//	| '@guard:' ({fmlStmnt::GuardStatement} ('[' condition=Expression ']'
	//	| condition=Expression) | GuardStatement
	//	| EventGuardStatement
	//	| CheckSatGuardStatement)
	public TransitionGuardElements getTransitionGuardAccess() {
		return pTransitionGuard;
	}
	
	public ParserRule getTransitionGuardRule() {
		return getTransitionGuardAccess().getRule();
	}
	
	//TransitionGuardExpression fmlExpr::Expression:
	//	{fmlExpr::LogicalAssociativeExpression} operator=('&&' | 'and' | '||' | 'or') '>:'
	//	operand+=BitwiseOrExpression+
	public TransitionGuardExpressionElements getTransitionGuardExpressionAccess() {
		return pTransitionGuardExpression;
	}
	
	public ParserRule getTransitionGuardExpressionRule() {
		return getTransitionGuardExpressionAccess().getRule();
	}
	
	//TransitionTimedGuard fmlStmnt::TimedGuardStatement:
	//	{fmlStmnt::TimedGuardStatement}
	//	'@tguard<' condition=TransitionGuardExpression
	//	| '@tguard:' ({fmlStmnt::TimedGuardStatement} ('{' condition=Expression '}'
	//	| condition=Expression) | TimedGuardStatement)
	public TransitionTimedGuardElements getTransitionTimedGuardAccess() {
		return pTransitionTimedGuard;
	}
	
	public ParserRule getTransitionTimedGuardRule() {
		return getTransitionTimedGuardAccess().getRule();
	}
	
	//TransitionEffect fmlStmnt::Statement:
	//	TransitionEffectStatement ({fmlStmnt::BlockStatement.statement+=current} statement+=TransitionEffectStatement)*
	public TransitionEffectElements getTransitionEffectAccess() {
		return pTransitionEffect;
	}
	
	public ParserRule getTransitionEffectRule() {
		return getTransitionEffectAccess().getRule();
	}
	
	//TransitionEffectStatement fmlStmnt::Statement:
	//	ExpressionStatement
	//	| OutputComStatement
	//	| IfStatement
	//	| WhileDoStatement
	//	| DoWhileStatement
	//	| ForStatement
	//	| ForEachStatement
	//	| InterruptStatement
	//	| ActivityStatement
	//	| InvokeStatement
	public TransitionEffectStatementElements getTransitionEffectStatementAccess() {
		return pTransitionEffectStatement;
	}
	
	public ParserRule getTransitionEffectStatementRule() {
		return getTransitionEffectStatementAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Statement Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Statement fmlStmnt::Statement:
	//	BlockStatement
	//	| ExpressionStatement
	//	| GuardStatement
	//	| TimedGuardStatement
	//	| EventGuardStatement
	//	| CheckSatGuardStatement
	//	| InputComStatement
	//	| OutputComStatement
	//	| IfStatement
	//	| WhileDoStatement
	//	| DoWhileStatement
	//	| ForStatement
	//	| ForEachStatement
	//	| InterruptStatement
	//	| ActivityStatement
	//	| InvokeStatement
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//BlockStatement fmlStmnt::BlockStatement:
	//	{fmlStmnt::BlockStatement}
	//	'{'
	//	op=BlockStatementScheduler?
	//	statement+=Statement*
	//	'}'
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//BlockStatementScheduler:
	//	'|;|' | '|§|' | '|;;|' | '|.|' | '|/;|'
	//	| '|i|' | '|,|' | '|a|'
	//	| '|and|' | '|or|'
	//	| '|and#then|' | '|or#else|'
	//	| '|indet|' | '|/\\|'
	//	| '|fork|' | '|join|';
	public BlockStatementSchedulerElements getBlockStatementSchedulerAccess() {
		return pBlockStatementScheduler;
	}
	
	public ParserRule getBlockStatementSchedulerRule() {
		return getBlockStatementSchedulerAccess().getRule();
	}
	
	///////////////////////////////////////////
	//// Assignment Rules as Expression Statement
	//// lv = rv
	//// newfresh lv
	//// ++lv --lv
	//// lv++  lv--
	///////////////////////////////////////////
	//ExpressionStatement fmlStmnt::ExpressionStatement:
	//	expression=AssignmentExpression ';'
	//	| expression=NewfreshExpression ';'
	//	| expression=IncrementOrDecrementPrefixExpression ';'
	//	| expression=IncrementOrDecrementPostfixExpression ';'
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	/////////////////////////////////////////////
	////// Guard Rules
	/////////////////////////////////////////////
	//GuardStatement fmlStmnt::GuardStatement:
	//	'guard' condition=Expression ';'
	public GuardStatementElements getGuardStatementAccess() {
		return pGuardStatement;
	}
	
	public ParserRule getGuardStatementRule() {
		return getGuardStatementAccess().getRule();
	}
	
	//TimedGuardStatement fmlStmnt::TimedGuardStatement:
	//	'tguard' condition=Expression ';'
	public TimedGuardStatementElements getTimedGuardStatementAccess() {
		return pTimedGuardStatement;
	}
	
	public ParserRule getTimedGuardStatementRule() {
		return getTimedGuardStatementAccess().getRule();
	}
	
	//EventGuardStatement fmlStmnt::EventGuardStatement:
	//	'event' condition=Expression ';'
	public EventGuardStatementElements getEventGuardStatementAccess() {
		return pEventGuardStatement;
	}
	
	public ParserRule getEventGuardStatementRule() {
		return getEventGuardStatementAccess().getRule();
	}
	
	//CheckSatGuardStatement fmlStmnt::CheckSatGuardStatement:
	//	'checksat' '<' solver=ESIdentifier '>' condition=Expression ';'
	public CheckSatGuardStatementElements getCheckSatGuardStatementAccess() {
		return pCheckSatGuardStatement;
	}
	
	public ParserRule getCheckSatGuardStatementRule() {
		return getCheckSatGuardStatementAccess().getRule();
	}
	
	/////////////////////////////////////////////
	////
	////// Communication Rules
	/////////////////////////////////////////////
	//InputComStatement fmlStmnt::InputComStatement:
	//	'input' port=[fmlCommon::NamedElement|ESUfid] ('(' leftValue+=Expression (',' leftValue+=Expression)* ')')? (('<--'
	//	target=ExpressionAsMachine)?
	//	& (('<==' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
	public InputComStatementElements getInputComStatementAccess() {
		return pInputComStatement;
	}
	
	public ParserRule getInputComStatementRule() {
		return getInputComStatementAccess().getRule();
	}
	
	//OutputComStatement fmlStmnt::OutputComStatement:
	//	'output' port=[fmlCommon::NamedElement|ESUfid] ('(' rigthValue+=Expression (',' rigthValue+=Expression)* ')')? (('-->'
	//	target=ExpressionAsMachine)?
	//	& (('==>' | 'via') route=[fmlInfra::Channel|ESUfid])?) ';'
	public OutputComStatementElements getOutputComStatementAccess() {
		return pOutputComStatement;
	}
	
	public ParserRule getOutputComStatementRule() {
		return getOutputComStatementAccess().getRule();
	}
	
	//ExpressionAsMachine fmlExpr::ExpressionAsMachine:
	//	machine=ValuePureNamedMachineExpression
	public ExpressionAsMachineElements getExpressionAsMachineAccess() {
		return pExpressionAsMachine;
	}
	
	public ParserRule getExpressionAsMachineRule() {
		return getExpressionAsMachineAccess().getRule();
	}
	
	/////////////////////////////////////////////
	////// If - Conditional Rules
	/////////////////////////////////////////////
	//IfStatement fmlStmnt::IfStatement:
	//	'if' condition=Expression
	//	bodyBlock=BlockStatement
	//	elseifStatement+=ElseIfStatement* ('else' elseBlock=BlockStatement)?
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseIfStatement fmlStmnt::ConditionalBlockStatement:
	//	('elseif' | 'else' 'if') condition=Expression
	//	bodyBlock=BlockStatement
	public ElseIfStatementElements getElseIfStatementAccess() {
		return pElseIfStatement;
	}
	
	public ParserRule getElseIfStatementRule() {
		return getElseIfStatementAccess().getRule();
	}
	
	///////////////////////////////////////////
	//// Loop - Iteration Rules
	///////////////////////////////////////////
	//WhileDoStatement fmlStmnt::WhileDoStatement:
	//	'while' condition=Expression bodyBlock=BlockStatement
	public WhileDoStatementElements getWhileDoStatementAccess() {
		return pWhileDoStatement;
	}
	
	public ParserRule getWhileDoStatementRule() {
		return getWhileDoStatementAccess().getRule();
	}
	
	//DoWhileStatement fmlStmnt::DoWhileStatement:
	//	'do' bodyBlock=BlockStatement 'while' condition=Expression ';'
	public DoWhileStatementElements getDoWhileStatementAccess() {
		return pDoWhileStatement;
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}
	
	//ForStatement fmlStmnt::ForStatement:
	//	'for' init=ForAssignmentExpression? ';'
	//	condition=Expression ';' iterate=ForAssignmentExpression?
	//	bodyBlock=BlockStatement
	//	| 'for' '(' init=ForAssignmentExpression? ';'
	//	condition=Expression ';' iterate=ForAssignmentExpression? ')'
	//	bodyBlock=BlockStatement
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForAssignmentExpression fmlExpr::Expression:
	//	AssignmentExpression
	//	| IncrementOrDecrementPrefixExpression
	//	| IncrementOrDecrementPostfixExpression
	public ForAssignmentExpressionElements getForAssignmentExpressionAccess() {
		return pForAssignmentExpression;
	}
	
	public ParserRule getForAssignmentExpressionRule() {
		return getForAssignmentExpressionAccess().getRule();
	}
	
	//ForEachStatement fmlStmnt::ForEachStatement:
	//	'for' iterator=LeftHandSideExpression ':' enumeration=Expression
	//	bodyBlock=BlockStatement
	//	| 'for' '(' iterator=LeftHandSideExpression ':' enumeration=Expression ')'
	//	bodyBlock=BlockStatement
	public ForEachStatementElements getForEachStatementAccess() {
		return pForEachStatement;
	}
	
	public ParserRule getForEachStatementRule() {
		return getForEachStatementAccess().getRule();
	}
	
	///////////////////////////////////////////
	//// Interrupt Rules
	///////////////////////////////////////////
	//InterruptStatement fmlStmnt::InterruptStatement:
	//	kind=InterruptStatementKind (expr+=Expression
	//	| '(' expr+=Expression (',' expr+=Expression)* ')')? ';'
	public InterruptStatementElements getInterruptStatementAccess() {
		return pInterruptStatement;
	}
	
	public ParserRule getInterruptStatementRule() {
		return getInterruptStatementAccess().getRule();
	}
	
	//enum InterruptStatementKind returns fmlStmnt::InterruptStatementKind:
	//	break | continue | return | exit;
	public InterruptStatementKindElements getInterruptStatementKindAccess() {
		return eInterruptStatementKind;
	}
	
	public EnumRule getInterruptStatementKindRule() {
		return getInterruptStatementKindAccess().getRule();
	}
	
	/////////////////////////////////////////////
	////// Activity Rules
	/////////////////////////////////////////////
	//ActivityStatement fmlStmnt::ActivityStatement:
	//	{fmlStmnt::ActivityStatement} op=OPERATOR_ACTIVITY
	//	machine=ValuePureNamedMachineExpression
	//	tuple=TupleParameterExpression?
	//	';'
	public ActivityStatementElements getActivityStatementAccess() {
		return pActivityStatement;
	}
	
	public ParserRule getActivityStatementRule() {
		return getActivityStatementAccess().getRule();
	}
	
	//enum OPERATOR_ACTIVITY returns fmlStmnt::ActivityStatementKind:
	//	init | final | destroy | start | stop | restart | suspend | resume | wait | disable | enable | abort | schedule | irun
	//	| run | rtc;
	public OPERATOR_ACTIVITYElements getOPERATOR_ACTIVITYAccess() {
		return eOPERATOR_ACTIVITY;
	}
	
	public EnumRule getOPERATOR_ACTIVITYRule() {
		return getOPERATOR_ACTIVITYAccess().getRule();
	}
	
	//InvokeStatement fmlStmnt::InvokeStatement:
	//	expression=InvokeExpressionDeprecated ';'
	//	// Exec Routine
	//	| invokable=[fmlCommon::NamedElement|ESUfid] execRoutine?='(' args=MixTupleExpressionList? ')' ('-->'
	//	(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
	//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
	//	// Exec Routine
	//	| execRoutine?='exec' invokable=[fmlCommon::NamedElement|ESUfid]
	//	'(' args=MixTupleExpressionList? ')' ('-->' (rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
	//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
	//	// Call Procedure
	//	| callProcedure?='call' invokable=[fmlCommon::NamedElement|ESUfid] args=MixTupleExpressionList? ('-->'
	//	(rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])*
	//	| '(' rets+=[fmlInfra::Variable] (',' rets+=[fmlInfra::Variable])* ')'))? ';'
	public InvokeStatementElements getInvokeStatementAccess() {
		return pInvokeStatement;
	}
	
	public ParserRule getInvokeStatementRule() {
		return getInvokeStatementAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//Expression fmlExpr::Expression:
	//	AssignmentExpression
	//	| ConditionalTestExpression
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Assignment Expression
	//AssignmentExpression fmlExpr::AssignmentExpression:
	//	leftHandSide=LeftHandSideExpression
	//	operator=AssignmentOperator rigthHandSide=Expression
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//AssignmentOperator:
	//	'=' | ':=' | '::='
	//	| '+=' | '-='
	//	| '*=' | '/=' | '%='
	//	| '&&=' | '||='
	//	| '&=' | '|=' | '^='
	//	| '<<=' | '>>=' | '>>>='
	//	// queue operation: push, assign_top, top, pop
	//	| '<=<'
	//	| '^=<'
	//	| '^=>'
	//	| '>=>';
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//LeftHandSideExpression fmlExpr::LeftHandSideExpression:
	//	{fmlExpr::LeftHandSideExpression} (lvalue=ValueSelectionExpression
	//	| '(' lvalue=ValueSelectionExpression ')')
	public LeftHandSideExpressionElements getLeftHandSideExpressionAccess() {
		return pLeftHandSideExpression;
	}
	
	public ParserRule getLeftHandSideExpressionRule() {
		return getLeftHandSideExpressionAccess().getRule();
	}
	
	//// Conditional Test Expression
	//ConditionalTestExpression fmlExpr::Expression:
	//	LogicalOrExpression ({fmlExpr::ConditionalTestExpression.condition=current} operator='?' thenOperand=Expression ':'
	//	elseOperand=Expression)?
	public ConditionalTestExpressionElements getConditionalTestExpressionAccess() {
		return pConditionalTestExpression;
	}
	
	public ParserRule getConditionalTestExpressionRule() {
		return getConditionalTestExpressionAccess().getRule();
	}
	
	//// Logical Expression
	//LogicalOrExpression fmlExpr::Expression:
	//	LogicalAndExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('||' | 'or')
	//	operand+=LogicalAndExpression (('||' | 'or') operand+=LogicalAndExpression)*)?
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression fmlExpr::Expression:
	//	BitwiseOrExpression ({fmlExpr::LogicalAssociativeExpression.operand+=current} operator=('&&' | 'and')
	//	operand+=BitwiseOrExpression (('&&' | 'and') operand+=BitwiseOrExpression)*)?
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwise Expression
	//BitwiseOrExpression fmlExpr::Expression:
	//	BitwiseXorExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='|'
	//	operand+=BitwiseXorExpression ('|' operand+=BitwiseXorExpression)*)?
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return pBitwiseOrExpression;
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXorExpression fmlExpr::Expression:
	//	BitwiseAndExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='^'
	//	operand+=BitwiseAndExpression ('^' operand+=BitwiseAndExpression)*)?
	public BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return pBitwiseXorExpression;
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}
	
	//BitwiseAndExpression fmlExpr::Expression:
	//	EqualityExpression ({fmlExpr::BitwiseAssociativeExpression.operand+=current} operator='&' operand+=EqualityExpression
	//	('&' operand+=EqualityExpression)*)?
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return pBitwiseAndExpression;
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Equality Expression
	//EqualityExpression fmlExpr::Expression:
	//	RelationalExpression ({fmlExpr::EqualityBinaryExpression.leftOperand=current} operator=EqualityOperator
	//	rigthOperand=RelationalExpression)?
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityOperator:
	//	'==' | '!=' | '===' | '=!=' | '=/=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//// Relational Binary Expression
	//RelationalExpression fmlExpr::Expression:
	//	AdditiveExpression ({fmlExpr::RelationalBinaryExpression.leftOperand=current} operator=RelationalOperator
	//	rigthOperand=AdditiveExpression ({fmlExpr::RelationalTernaryExpression.leftRelation=current}
	//	rigthOperator=RelationalOperator rigthOperand=AdditiveExpression)?)?
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalOperator:
	//	'<' | '>' | '<=' | '>=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//// Arithmetic Associative (left) Expression
	//AdditiveExpression fmlExpr::Expression:
	//	MultiplicativeExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='+'
	//	operand+=MultiplicativeExpression ('+' operand+=MultiplicativeExpression)* |
	//	{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='-' operand+=MultiplicativeExpression ('-'
	//	operand+=MultiplicativeExpression)*)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression fmlExpr::Expression:
	//	UnaryExpression ({fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='*' operand+=UnaryExpression
	//	('*' operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='**'
	//	operand+=UnaryExpression ('**' operand+=UnaryExpression)* |
	//	{fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='/' operand+=UnaryExpression ('/'
	//	operand+=UnaryExpression)* | {fmlExpr::ArithmeticAssociativeExpression.operand+=current} operator='%'
	//	operand+=UnaryExpression ('%' operand+=UnaryExpression)*)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//// Unary Expression
	//UnaryExpression fmlExpr::Expression:
	//	LiteralTerminalExpression
	//	| ArithmeticUnaryExpression
	//	| LogicalUnaryExpression
	//	| BitwiseUnaryExpression
	//	| NewfreshExpression
	//	| CastExpression
	//	| PrefixUnaryExpression
	//	| PostfixUnaryExpression
	//	| PrimaryExpression
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//// Postfix Increment or Decrement Expression
	//PostfixUnaryExpression fmlExpr::Expression:
	//	IncrementOrDecrementPostfixExpression
	public PostfixUnaryExpressionElements getPostfixUnaryExpressionAccess() {
		return pPostfixUnaryExpression;
	}
	
	public ParserRule getPostfixUnaryExpressionRule() {
		return getPostfixUnaryExpressionAccess().getRule();
	}
	
	//IncrementOrDecrementPostfixExpression fmlExpr::IncrementOrDecrementPostfixExpression:
	//	leftHandSide=LeftHandSideExpression operator=AffixOperator
	public IncrementOrDecrementPostfixExpressionElements getIncrementOrDecrementPostfixExpressionAccess() {
		return pIncrementOrDecrementPostfixExpression;
	}
	
	public ParserRule getIncrementOrDecrementPostfixExpressionRule() {
		return getIncrementOrDecrementPostfixExpressionAccess().getRule();
	}
	
	//// Prefix Increment or Decrement Expression
	//PrefixUnaryExpression fmlExpr::Expression:
	//	IncrementOrDecrementPrefixExpression
	public PrefixUnaryExpressionElements getPrefixUnaryExpressionAccess() {
		return pPrefixUnaryExpression;
	}
	
	public ParserRule getPrefixUnaryExpressionRule() {
		return getPrefixUnaryExpressionAccess().getRule();
	}
	
	//IncrementOrDecrementPrefixExpression fmlExpr::IncrementOrDecrementPrefixExpression:
	//	operator=AffixOperator leftHandSide=LeftHandSideExpression
	public IncrementOrDecrementPrefixExpressionElements getIncrementOrDecrementPrefixExpressionAccess() {
		return pIncrementOrDecrementPrefixExpression;
	}
	
	public ParserRule getIncrementOrDecrementPrefixExpressionRule() {
		return getIncrementOrDecrementPrefixExpressionAccess().getRule();
	}
	
	//AffixOperator:
	//	'++' | '--';
	public AffixOperatorElements getAffixOperatorAccess() {
		return pAffixOperator;
	}
	
	public ParserRule getAffixOperatorRule() {
		return getAffixOperatorAccess().getRule();
	}
	
	//// Newfresh Unary Expression
	//NewfreshExpression fmlExpr::NewfreshExpression:
	//	'newfresh' leftHandSide=LeftHandSideExpression
	//	| '(:' leftHandSide=LeftHandSideExpression 'newfresh' ')'
	public NewfreshExpressionElements getNewfreshExpressionAccess() {
		return pNewfreshExpression;
	}
	
	public ParserRule getNewfreshExpressionRule() {
		return getNewfreshExpressionAccess().getRule();
	}
	
	//// Cast Expression
	//CastExpression fmlExpr::CastExpression:
	//	'ctor' '<' datatype=[fmlType::DataType|ESUfid] '>'
	//	'(' operand=Expression ')'
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//// Arithmetic Unary Expression
	//ArithmeticUnaryExpression fmlExpr::ArithmeticUnaryExpression:
	//	operator=ArithmeticUnaryOperator operand=UnaryExpression
	public ArithmeticUnaryExpressionElements getArithmeticUnaryExpressionAccess() {
		return pArithmeticUnaryExpression;
	}
	
	public ParserRule getArithmeticUnaryExpressionRule() {
		return getArithmeticUnaryExpressionAccess().getRule();
	}
	
	//ArithmeticUnaryOperator:
	//	'+' | '-';
	public ArithmeticUnaryOperatorElements getArithmeticUnaryOperatorAccess() {
		return pArithmeticUnaryOperator;
	}
	
	public ParserRule getArithmeticUnaryOperatorRule() {
		return getArithmeticUnaryOperatorAccess().getRule();
	}
	
	//// Logical Unary Expression
	//LogicalUnaryExpression fmlExpr::LogicalUnaryExpression:
	//	operator=('!' | 'not') operand=UnaryExpression
	public LogicalUnaryExpressionElements getLogicalUnaryExpressionAccess() {
		return pLogicalUnaryExpression;
	}
	
	public ParserRule getLogicalUnaryExpressionRule() {
		return getLogicalUnaryExpressionAccess().getRule();
	}
	
	//// Logical Unary Expression
	//BitwiseUnaryExpression fmlExpr::BitwiseUnaryExpression:
	//	operator='~' operand=UnaryExpression
	public BitwiseUnaryExpressionElements getBitwiseUnaryExpressionAccess() {
		return pBitwiseUnaryExpression;
	}
	
	public ParserRule getBitwiseUnaryExpressionRule() {
		return getBitwiseUnaryExpressionAccess().getRule();
	}
	
	//PrimaryExpression fmlExpr::Expression:
	//	BaseExpression ({fmlExpr::ValueElementSpecification.target=current}
	//	'.' //kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	// '(' parameter ',' ... ',' parameter ')'
	//	| kind=ValueParameterExpressionKind
	//	arg=MixTupleExpressionList ')')?)* ({fmlExpr::ValueElementSpecification.target=current}
	//	'->' //kind=ValueArrowFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	// '(' parameter ',' ... ',' parameter ')'
	//	| kind=ValueParameterExpressionKind
	//	arg=MixTupleExpressionList ')')? ({fmlExpr::ValueElementSpecification.target=current}
	//	'.' //kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	// '(' parameter ',' ... ',' parameter ')'
	//	| kind=ValueParameterExpressionKind
	//	arg=MixTupleExpressionList ')')?)*)?
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//BaseExpression fmlExpr::Expression:
	//	LiteralReferenceableExpression
	//	| '(' Expression ')'
	//	| InvokeExpressionDeprecated
	//	| InstantiationExpression
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//// Behavior Invoke Expression
	//InvokeExpression fmlExpr::InvokeExpression:
	//	{fmlExpr::InvokeExpression} invoke=ValueSelectionExpression
	public InvokeExpressionElements getInvokeExpressionAccess() {
		return pInvokeExpression;
	}
	
	public ParserRule getInvokeExpressionRule() {
		return getInvokeExpressionAccess().getRule();
	}
	
	//InvokeExpressionDeprecated fmlExpr::InvokeExpression:
	//	{fmlExpr::InvokeExpression}
	//	'(:' args+=Expression invoke=LiteralReferenceElement args+=Expression* ')'
	public InvokeExpressionDeprecatedElements getInvokeExpressionDeprecatedAccess() {
		return pInvokeExpressionDeprecated;
	}
	
	public ParserRule getInvokeExpressionDeprecatedRule() {
		return getInvokeExpressionDeprecatedAccess().getRule();
	}
	
	//InstantiationExpression fmlExpr::InstantiationExpression:
	//	{fmlExpr::InstantiationExpression} instance=DynamicInstanceSpecification ';'
	public InstantiationExpressionElements getInstantiationExpressionAccess() {
		return pInstantiationExpression;
	}
	
	public ParserRule getInstantiationExpressionRule() {
		return getInstantiationExpressionAccess().getRule();
	}
	
	//DynamicInstanceSpecification fmlInfra::InstanceMachine:
	//	{fmlInfra::InstanceMachine}
	//	'new' model=[fmlInfra::Machine|ESIdentifier] ('(' (slot+=SlotParameter (',' slot+=SlotParameter)*)? ')'
	//	| '{' (slot+=SlotProperty ';')* '}')?
	public DynamicInstanceSpecificationElements getDynamicInstanceSpecificationAccess() {
		return pDynamicInstanceSpecification;
	}
	
	public ParserRule getDynamicInstanceSpecificationRule() {
		return getDynamicInstanceSpecificationAccess().getRule();
	}
	
	//// Tuple Expression
	//TupleParameterExpression fmlExpr::TupleExpression:
	//	'(' MixTupleExpressionList ')'
	public TupleParameterExpressionElements getTupleParameterExpressionAccess() {
		return pTupleParameterExpression;
	}
	
	public ParserRule getTupleParameterExpressionRule() {
		return getTupleParameterExpressionAccess().getRule();
	}
	
	//MixTupleExpressionList fmlExpr::MixTupleExpression:
	//	{fmlExpr::MixTupleExpression} value+=(Expression | NamedExpression) (',' value+=(Expression | NamedExpression))*
	public MixTupleExpressionListElements getMixTupleExpressionListAccess() {
		return pMixTupleExpressionList;
	}
	
	public ParserRule getMixTupleExpressionListRule() {
		return getMixTupleExpressionListAccess().getRule();
	}
	
	////// At least one NamedExpression
	////FormalMixTupleExpressionList returns fmlExpr::MixTupleExpression
	////	: {fmlExpr::MixTupleExpression}
	////		( value+=Expression  ( ',' value+=Expression )*
	////			( ',' value+=NamedExpression )
	////		| value+=NamedExpression
	////		)
	////		( ',' value+=( Expression | NamedExpression ) )*
	////	;
	////
	////// NamedExpression only at the end
	////EndingMixTupleExpressionList returns fmlExpr::MixTupleExpression
	////	: {fmlExpr::MixTupleExpression}
	////		( value+=Expression  ( ',' value+=Expression )*
	////		| value+=NamedExpression
	////		)
	////		( ',' value+=NamedExpression )*
	////	;
	////
	////
	////NamedTupleExpressionList returns fmlExpr::NamedTupleExpression
	////	: value+=NamedExpression ( ',' value+=NamedExpression )*
	////	;
	//PositionalTupleExpressionList fmlExpr::PositionalTupleExpression:
	//	value+=Expression (',' value+=Expression)*
	public PositionalTupleExpressionListElements getPositionalTupleExpressionListAccess() {
		return pPositionalTupleExpressionList;
	}
	
	public ParserRule getPositionalTupleExpressionListRule() {
		return getPositionalTupleExpressionListAccess().getRule();
	}
	
	//NamedExpression fmlExpr::NamedExpression:
	//	name=XLIA_ID (':' | '=>' | '<-') expression=Expression
	public NamedExpressionElements getNamedExpressionAccess() {
		return pNamedExpression;
	}
	
	public ParserRule getNamedExpressionRule() {
		return getNamedExpressionAccess().getRule();
	}
	
	////NotificationComExpression returns fmlExpr::Expression
	////	: { fmlExpr::Expression }
	////		symbol=( 'present' | 'absent' )  operand+=Expression
	////	;
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralExpression fmlExpr::LiteralExpression:
	//	LiteralTerminalExpression
	//	| LiteralReferenceableExpression
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LiteralReferenceableExpression fmlExpr::LiteralExpression:
	//	LiteralCollectionExpression
	//	| LiteralReferenceExpression
	public LiteralReferenceableExpressionElements getLiteralReferenceableExpressionAccess() {
		return pLiteralReferenceableExpression;
	}
	
	public ParserRule getLiteralReferenceableExpressionRule() {
		return getLiteralReferenceableExpressionAccess().getRule();
	}
	
	//LiteralTerminalExpression fmlExpr::LiteralExpression:
	//	LiteralBooleanExpression
	//	| LiteralIntegerExpression
	//	| LiteralRationalExpression
	//	| LiteralFloatExpression
	//	| LiteralCharacterExpression
	//	| LiteralStringExpression
	//	| LiteralNullExpression
	public LiteralTerminalExpressionElements getLiteralTerminalExpressionAccess() {
		return pLiteralTerminalExpression;
	}
	
	public ParserRule getLiteralTerminalExpressionRule() {
		return getLiteralTerminalExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Boolean / Numeric Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralBooleanExpression fmlExpr::LiteralBooleanExpression:
	//	{fmlExpr::LiteralBooleanExpression} value=EBoolean
	public LiteralBooleanExpressionElements getLiteralBooleanExpressionAccess() {
		return pLiteralBooleanExpression;
	}
	
	public ParserRule getLiteralBooleanExpressionRule() {
		return getLiteralBooleanExpressionAccess().getRule();
	}
	
	//LiteralIntegerExpression fmlExpr::LiteralIntegerExpression:
	//	{fmlExpr::LiteralIntegerExpression} value=EInteger
	public LiteralIntegerExpressionElements getLiteralIntegerExpressionAccess() {
		return pLiteralIntegerExpression;
	}
	
	public ParserRule getLiteralIntegerExpressionRule() {
		return getLiteralIntegerExpressionAccess().getRule();
	}
	
	//LiteralRationalExpression fmlExpr::LiteralRationalExpression:
	//	{fmlExpr::LiteralRationalExpression} numerator=EInteger '/' denominator=EInteger
	public LiteralRationalExpressionElements getLiteralRationalExpressionAccess() {
		return pLiteralRationalExpression;
	}
	
	public ParserRule getLiteralRationalExpressionRule() {
		return getLiteralRationalExpressionAccess().getRule();
	}
	
	//LiteralFloatExpression fmlExpr::LiteralFloatExpression:
	//	{fmlExpr::LiteralFloatExpression} value=EDouble
	public LiteralFloatExpressionElements getLiteralFloatExpressionAccess() {
		return pLiteralFloatExpression;
	}
	
	public ParserRule getLiteralFloatExpressionRule() {
		return getLiteralFloatExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Character / String Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralCharacterExpression fmlExpr::LiteralCharacterExpression:
	//	{fmlExpr::LiteralCharacterExpression} value=ECharacter
	public LiteralCharacterExpressionElements getLiteralCharacterExpressionAccess() {
		return pLiteralCharacterExpression;
	}
	
	public ParserRule getLiteralCharacterExpressionRule() {
		return getLiteralCharacterExpressionAccess().getRule();
	}
	
	//LiteralStringExpression fmlExpr::LiteralStringExpression:
	//	{fmlExpr::LiteralStringExpression} value=EString
	public LiteralStringExpressionElements getLiteralStringExpressionAccess() {
		return pLiteralStringExpression;
	}
	
	public ParserRule getLiteralStringExpressionRule() {
		return getLiteralStringExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Null Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralNullExpression fmlExpr::LiteralNullExpression:
	//	{fmlExpr::LiteralNullExpression} ('null' | '$null') | {fmlExpr::LiteralNullExpression} ('null<' | '$null<')
	//	type=DataType '>'
	public LiteralNullExpressionElements getLiteralNullExpressionAccess() {
		return pLiteralNullExpression;
	}
	
	public ParserRule getLiteralNullExpressionRule() {
		return getLiteralNullExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Collection Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralCollectionExpression fmlExpr::LiteralCollectionExpression:
	//	{fmlExpr::LiteralCollectionExpression} ('<' datatype=DataType '>')?
	//	'{' ((value+=Expression | value+=NamedExpression) (',' (value+=Expression | value+=NamedExpression))*)? '}'
	public LiteralCollectionExpressionElements getLiteralCollectionExpressionAccess() {
		return pLiteralCollectionExpression;
	}
	
	public ParserRule getLiteralCollectionExpressionRule() {
		return getLiteralCollectionExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Literal Reference Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralReferenceExpression fmlExpr::LiteralReferenceExpression:
	//	LiteralReferenceElement
	//	| LiteralReferenceVariableContext
	//	| LiteralReferenceMachineContext
	//	| LiteralEnvExpression
	public LiteralReferenceExpressionElements getLiteralReferenceExpressionAccess() {
		return pLiteralReferenceExpression;
	}
	
	public ParserRule getLiteralReferenceExpressionRule() {
		return getLiteralReferenceExpressionAccess().getRule();
	}
	
	//LiteralReferenceElement fmlExpr::LiteralReferenceElement:
	//	{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	// '(' parameter ',' ... ',' parameter ')'
	//	| kind=ValueParameterExpressionKind
	//	arg=MixTupleExpressionList ')')?
	public LiteralReferenceElementElements getLiteralReferenceElementAccess() {
		return pLiteralReferenceElement;
	}
	
	public ParserRule getLiteralReferenceElementRule() {
		return getLiteralReferenceElementAccess().getRule();
	}
	
	//LiteralPureReferenceElement fmlExpr::LiteralReferenceElement:
	//	{fmlExpr::LiteralReferenceElement} value=[fmlCommon::NamedElement|ESIdentifier]
	public LiteralPureReferenceElementElements getLiteralPureReferenceElementAccess() {
		return pLiteralPureReferenceElement;
	}
	
	public ParserRule getLiteralPureReferenceElementRule() {
		return getLiteralPureReferenceElementAccess().getRule();
	}
	
	//LiteralReferenceVariableContext fmlExpr::LiteralReferenceExpression:
	//	LiteralTimeExpression
	//	| LiteralTimeDeltaExpression
	public LiteralReferenceVariableContextElements getLiteralReferenceVariableContextAccess() {
		return pLiteralReferenceVariableContext;
	}
	
	public ParserRule getLiteralReferenceVariableContextRule() {
		return getLiteralReferenceVariableContextAccess().getRule();
	}
	
	//LiteralTimeExpression fmlExpr::LiteralTimeExpression:
	//	{fmlExpr::LiteralTimeExpression} '$time'
	public LiteralTimeExpressionElements getLiteralTimeExpressionAccess() {
		return pLiteralTimeExpression;
	}
	
	public ParserRule getLiteralTimeExpressionRule() {
		return getLiteralTimeExpressionAccess().getRule();
	}
	
	//LiteralTimeDeltaExpression fmlExpr::LiteralTimeDeltaExpression:
	//	{fmlExpr::LiteralTimeDeltaExpression} '$delta'
	public LiteralTimeDeltaExpressionElements getLiteralTimeDeltaExpressionAccess() {
		return pLiteralTimeDeltaExpression;
	}
	
	public ParserRule getLiteralTimeDeltaExpressionRule() {
		return getLiteralTimeDeltaExpressionAccess().getRule();
	}
	
	//LiteralReferenceMachineContext fmlExpr::LiteralReferenceExpression:
	//	LiteralThisExpression
	//	| LiteralSelfExpression
	//	| LiteralParentExpression
	//	| LiteralSuperExpression
	//	| LiteralSystemExpression
	//	| LiteralEnvExpression
	public LiteralReferenceMachineContextElements getLiteralReferenceMachineContextAccess() {
		return pLiteralReferenceMachineContext;
	}
	
	public ParserRule getLiteralReferenceMachineContextRule() {
		return getLiteralReferenceMachineContextAccess().getRule();
	}
	
	//LiteralThisExpression fmlExpr::LiteralThisExpression:
	//	{fmlExpr::LiteralThisExpression} '$this'
	public LiteralThisExpressionElements getLiteralThisExpressionAccess() {
		return pLiteralThisExpression;
	}
	
	public ParserRule getLiteralThisExpressionRule() {
		return getLiteralThisExpressionAccess().getRule();
	}
	
	//LiteralSelfExpression fmlExpr::LiteralSelfExpression:
	//	{fmlExpr::LiteralSelfExpression} '$self'
	public LiteralSelfExpressionElements getLiteralSelfExpressionAccess() {
		return pLiteralSelfExpression;
	}
	
	public ParserRule getLiteralSelfExpressionRule() {
		return getLiteralSelfExpressionAccess().getRule();
	}
	
	//LiteralParentExpression fmlExpr::LiteralParentExpression:
	//	{fmlExpr::LiteralParentExpression} '$parent'
	public LiteralParentExpressionElements getLiteralParentExpressionAccess() {
		return pLiteralParentExpression;
	}
	
	public ParserRule getLiteralParentExpressionRule() {
		return getLiteralParentExpressionAccess().getRule();
	}
	
	//LiteralSuperExpression fmlExpr::LiteralSuperExpression:
	//	{fmlExpr::LiteralSuperExpression} '$super'
	public LiteralSuperExpressionElements getLiteralSuperExpressionAccess() {
		return pLiteralSuperExpression;
	}
	
	public ParserRule getLiteralSuperExpressionRule() {
		return getLiteralSuperExpressionAccess().getRule();
	}
	
	//LiteralSystemExpression fmlExpr::LiteralSystemExpression:
	//	{fmlExpr::LiteralSystemExpression} '$system'
	public LiteralSystemExpressionElements getLiteralSystemExpressionAccess() {
		return pLiteralSystemExpression;
	}
	
	public ParserRule getLiteralSystemExpressionRule() {
		return getLiteralSystemExpressionAccess().getRule();
	}
	
	//LiteralEnvExpression fmlExpr::LiteralEnvExpression:
	//	{fmlExpr::LiteralEnvExpression} ('$env' | 'env')
	public LiteralEnvExpressionElements getLiteralEnvExpressionAccess() {
		return pLiteralEnvExpression;
	}
	
	public ParserRule getLiteralEnvExpressionRule() {
		return getLiteralEnvExpressionAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	//// Value Element Specification Expression Rules
	//////////////////////////////////////////////////////////////////////////////////
	//LiteralPureReferenceExpression fmlExpr::LiteralReferenceExpression:
	//	LiteralPureReferenceElement
	//	| LiteralReferenceMachineContext
	public LiteralPureReferenceExpressionElements getLiteralPureReferenceExpressionAccess() {
		return pLiteralPureReferenceExpression;
	}
	
	public ParserRule getLiteralPureReferenceExpressionRule() {
		return getLiteralPureReferenceExpressionAccess().getRule();
	}
	
	//ValueSelectionExpression fmlExpr::Expression:
	//	LiteralReferenceExpression ({fmlExpr::ValueElementSpecification.target=current}
	//	'.' //kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	//			// TODO '(' parameter ',' ... ',' parameter ')'
	//	//			| kind=ValueParameterExpressionKind
	//	//				arg=MixTupleExpressionList  ')'
	//)?)* ({fmlExpr::ValueElementSpecification.target=current}
	//	'->' //kind=ValueArrowFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	//			// TODO '(' parameter ',' ... ',' parameter ')'
	//	//			| kind=ValueParameterExpressionKind
	//	//				arg=MixTupleExpressionList  ')'
	//)? ({fmlExpr::ValueElementSpecification.target=current}
	//	'.' //kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] (kind=ValueIndexExpressionKind
	//	arg=PositionalTupleExpressionList ']'
	//	//				// TODO '(' parameter ',' ... ',' parameter ')'
	//	//				| kind=ValueParameterExpressionKind
	//	//					arg=MixTupleExpressionList  ')'
	//)?)*)?
	public ValueSelectionExpressionElements getValueSelectionExpressionAccess() {
		return pValueSelectionExpression;
	}
	
	public ParserRule getValueSelectionExpressionRule() {
		return getValueSelectionExpressionAccess().getRule();
	}
	
	////ValuePureNamedElementExpression
	////ValuePureNamedElementExpression returns fmlExpr::Expression
	////	: LiteralPureReferenceExpression
	////
	////		// '.' element
	////		( { fmlExpr::ValueElementSpecification.target=current }
	////			kind=ValueDotFieldExpressionKind
	////			element=[fmlCommon::NamedElement|ESIdentifier]
	////		)*
	////
	////		// '->' element
	////		( { fmlExpr::ValueElementSpecification.target=current }
	////			kind=ValueArrowFieldExpressionKind
	////			element=[fmlCommon::NamedElement|ESIdentifier]
	////
	////			// '.' element
	////			( { fmlExpr::ValueElementSpecification.target=current }
	////				kind=ValueDotFieldExpressionKind
	////				element=[fmlCommon::NamedElement|ESIdentifier]
	////			)*
	////		)?
	////	;
	//ValuePureNamedMachineExpression fmlExpr::Expression:
	//	LiteralPureReferenceExpression ({fmlExpr::ValueElementSpecification.target=current} kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier])* ({fmlExpr::ValueElementSpecification.target=current}
	//	kind=ValueArrowFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier] ({fmlExpr::ValueElementSpecification.target=current}
	//	kind=ValueDotFieldExpressionKind
	//	element=[fmlCommon::NamedElement|ESIdentifier])*)?
	public ValuePureNamedMachineExpressionElements getValuePureNamedMachineExpressionAccess() {
		return pValuePureNamedMachineExpression;
	}
	
	public ParserRule getValuePureNamedMachineExpressionRule() {
		return getValuePureNamedMachineExpressionAccess().getRule();
	}
	
	//enum ValueDotFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	field='.';
	public ValueDotFieldExpressionKindElements getValueDotFieldExpressionKindAccess() {
		return eValueDotFieldExpressionKind;
	}
	
	public EnumRule getValueDotFieldExpressionKindRule() {
		return getValueDotFieldExpressionKindAccess().getRule();
	}
	
	//enum ValueColonFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	field=':';
	public ValueColonFieldExpressionKindElements getValueColonFieldExpressionKindAccess() {
		return eValueColonFieldExpressionKind;
	}
	
	public EnumRule getValueColonFieldExpressionKindRule() {
		return getValueColonFieldExpressionKindAccess().getRule();
	}
	
	//enum ValueDoubleColonFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	field='::';
	public ValueDoubleColonFieldExpressionKindElements getValueDoubleColonFieldExpressionKindAccess() {
		return eValueDoubleColonFieldExpressionKind;
	}
	
	public EnumRule getValueDoubleColonFieldExpressionKindRule() {
		return getValueDoubleColonFieldExpressionKindAccess().getRule();
	}
	
	//enum ValueArrowFieldExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	field='->';
	public ValueArrowFieldExpressionKindElements getValueArrowFieldExpressionKindAccess() {
		return eValueArrowFieldExpressionKind;
	}
	
	public EnumRule getValueArrowFieldExpressionKindRule() {
		return getValueArrowFieldExpressionKindAccess().getRule();
	}
	
	//enum ValueIndexExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	index='[';
	public ValueIndexExpressionKindElements getValueIndexExpressionKindAccess() {
		return eValueIndexExpressionKind;
	}
	
	public EnumRule getValueIndexExpressionKindRule() {
		return getValueIndexExpressionKindAccess().getRule();
	}
	
	//enum ValueParameterExpressionKind returns fmlExpr::ValueElementSpecificationKind:
	//	parameter='(';
	public ValueParameterExpressionKindElements getValueParameterExpressionKindAccess() {
		return eValueParameterExpressionKind;
	}
	
	public EnumRule getValueParameterExpressionKindRule() {
		return getValueParameterExpressionKindAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
